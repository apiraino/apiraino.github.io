<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>localhost</title>
    <link href="https://apiraino.github.io/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://apiraino.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-11-06T00:00:00+00:00</updated>
    <id>https://apiraino.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Appreciation for software #7: NoScript</title>
        <published>2020-11-06T00:00:00+00:00</published>
        <updated>2020-11-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-7/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-7/</id>
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;noscript.net&quot;&gt;NoScript&lt;&#x2F;a&gt; is a Firefox extension that I&#x27;ve been using for so many years (I think +5 years is not far from the truth) and it deserves much more visibility and recognition than it has.&lt;&#x2F;p&gt;
&lt;p&gt;At its core &lt;a href=&quot;https:&#x2F;&#x2F;noscript.net&quot;&gt;NoScript&lt;&#x2F;a&gt; blocks JavaScript from executing on your browser. As simple as it seems, this has profound ramifications and consequences on your browsing experience and the &amp;quot;internet user&amp;quot; you become.&lt;&#x2F;p&gt;
&lt;p&gt;During the years JavaScript became more and more widespread, ubiquitous but also more annoying and ... dangerous. A lot of tricks and malicious scripts started pestering and tricking users.&lt;&#x2F;p&gt;
&lt;p&gt;With NoScript this all will disappear. Together with half of the websites becoming broken or unusable :-)&lt;&#x2F;p&gt;
&lt;p&gt;NoScript has a very fine-grained blocking mask that allows to singularly block scripts, objects, media files, iframes, &lt;code&gt;fetch&lt;&#x2F;code&gt; requests and so on ... but the single most useful one is the ability to allow scripts either permanently or temporarily for that session (and reset the permission grant when the browser is restarted). Some scripts might be needed on some websites but not on other. If I see that a scripts is used almost everywhere I just add it the permanent whitelist.&lt;&#x2F;p&gt;
&lt;p&gt;I have a policy of whitelisting JavaScript. Instead of choosing what to block, I choose what to allow. It takes a bit of patience, because websites need to be loaded twice when they do not work without scripts.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s really a formative experience. Here are some key takeaways I could think of right now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You realize that often the &amp;quot;full enhanced&amp;quot; experience that JavaScript provides is just bullshit. I put the blame on who has developed the website, not on JavaScript.&lt;&#x2F;li&gt;
&lt;li&gt;The amount of trackers piling up on some websites is perplexing (load any news website and have a look at the network traffic). You realize there&#x27;s something deeply broken in their business model when they feel the need to profile their users so passionately. The &amp;quot;free content&amp;quot; on Internet spoiled us and we&#x27;re not paying anymore for a lot of things. This has consequences.&lt;&#x2F;li&gt;
&lt;li&gt;It goes without saying that the same website without JavaScript runs faster on my computer. As a user, most of the time I accept a visually broken website until it&#x27;s usable for this reason only. I don&#x27;t care if it looks like shit: if it works I&#x27;m ok with that.&lt;&#x2F;li&gt;
&lt;li&gt;By intentionally breaking websites, you learn how they work. By allowing scripts one by one from a domain you realize what it&#x27;s really needed and what is dubious stuff that apparently has no functional purpose.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I admit I have a Firefox profile without NoScript in case I want to visit one of those websites (such as facebook, instagram, youtube, ...). In the latest months Facebook-owned products became more hostile and basically blocked the content for non-logged users. Somewhere in 2020 Instagram because unusable for me as a non-logged user. If you didn&#x27;t notice this change, then you see why it&#x27;s important to raise questions such as: why can&#x27;t I use a website like I perfectly did weeks ago? Why do they force me to use scripts for &lt;em&gt;the very same&lt;&#x2F;em&gt; website and no additional feature? Why do they &lt;em&gt;force&lt;&#x2F;em&gt; me to be logged in?&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand there are also funny surprises. twitter.com is 90% perfectly usable without javascript (only videos do not work) and you also have access to the list of followers and following of a profile, which are blocked behind a login in the JavaScript version. Again, a clear sign of hiding features for no good reason.&lt;&#x2F;p&gt;
&lt;p&gt;NoScript is basically what makes browsing bearable for me since quite a bit of time. To make a parallel for the casual reader, Firefox without NoScript is similar to what a lot of people experienced in May 2019 during the infamous Firefox incident of the &lt;a href=&quot;https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;05&#x2F;technical-details-on-the-recent-firefox-add-on-outage&quot;&gt;accidental expiry of the Addons certificates&lt;&#x2F;a&gt; that caused all addons to stop working and people suddenly experienced the &amp;quot;internet&amp;quot; without adblockers and various other added functionalities. My friends and I stayed without using a browser for a couple of days, only opening it on a selected list of websites. It was a surreal travel back in time to those &amp;quot;funny websites&amp;quot; of the 2000s, with websites assaulting the visitor with colors, stuff moving and confusing content, your laptop fans spinning like they were compiling a &amp;quot;hello world&amp;quot; in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;That day of May 2019 I fully realized the junkyard that the Internet of websites and webapplications had become while I innocently enjoyed my happy years of browsing, ignoring what was really happening outside there. It was an uncomfortable but necessary wake-up call.&lt;&#x2F;p&gt;
&lt;p&gt;One more note: using privacy-focused extensions such as Adblock Origin or Privacy Badger is different, as they are focused on the &amp;quot;privacy&amp;quot; part of the browsing experience, they just block trackers and such. NoScript is a declaration of war to the bloated Internet that we are seeing today.&lt;&#x2F;p&gt;
&lt;p&gt;But history repeats itself and will once again. Just as the wave of abusing GIFs and banners came and went away, then the wave of Flash applications, now this. This wave of insane SPA and steaming pile of JavaScript poo will be abandoned and turned into something else when people&#x27;s patience will be depleted. Whatever will come will perhaps make NoScript useless (for example browser fingerprinting), whatever will come will be again abused, will trigger a new generation of counter-tools to fight them back. And so on and on.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Enabling Emacs 24bit themes</title>
        <published>2020-08-02T00:00:00+00:00</published>
        <updated>2020-08-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/emacs-themes-24bit/" type="text/html"/>
        <id>https://apiraino.github.io/emacs-themes-24bit/</id>
        <content type="html">&lt;p&gt;This weekend I&#x27;ve spent some time on &lt;a href=&quot;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;unixporn&#x2F;&quot;&gt;&lt;code&gt;&#x2F;r&#x2F;unixporn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and enjoyed their beautiful desktop customizations. The next things I know is that I&#x27;ve ended up into another hell-hole to enable one theme on my Emacs. Let&#x27;s see how deep the rabbit hole goes and summarize the keypoints learned.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;preface-linux-shells-suck&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#preface-linux-shells-suck&quot; aria-label=&quot;Anchor link for: preface-linux-shells-suck&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Preface: Linux shells suck&lt;&#x2F;h3&gt;
&lt;p&gt;Mr. Obvious, I suppose?&lt;&#x2F;p&gt;
&lt;p&gt;There is a crowd of lost souls out there trying to figure out and explain in which order the linux shell loads configuration files, because the most common answer is: &amp;quot;it depends&amp;quot;. It&#x27;s one of the classic UNIX stratified crust dating back to (I guess) ~20 (30?) years ago and always kept back compatible. Anyway, done with the complaints, let&#x27;s move on.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back, these were the steps I went through to reach the goal:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Why Emacs screws up theme colors&lt;&#x2F;li&gt;
&lt;li&gt;Because it&#x27;s a 24bit colors theme: how do I have Emacs support such themes?&lt;&#x2F;li&gt;
&lt;li&gt;It depends on the shell: what shell do I have and why it doesn&#x27;t behave the way I want&lt;&#x2F;li&gt;
&lt;li&gt;The shell doesn&#x27;t know how to manage more than 256 colors: how do I fix this?&lt;&#x2F;li&gt;
&lt;li&gt;I have the fix: how to apply it in a consistent way?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In one sentence: on a Linux shell, you need to customize &lt;code&gt;terminfo&lt;&#x2F;code&gt; to have Emacs display more than 256 colors.&lt;&#x2F;p&gt;
&lt;p&gt;Each damn step took its own good deal of research, trial and error, let&#x27;s go through each one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-why-emacs-screws-up-theme-colors&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-why-emacs-screws-up-theme-colors&quot; aria-label=&quot;Anchor link for: 1-why-emacs-screws-up-theme-colors&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
1) Why Emacs screws up theme colors&lt;&#x2F;h3&gt;
&lt;p&gt;Many Emacs themes (especially the most beautiful) have more than 256 colors. In my narrow-minded view, never could I imagine that so many colors could be needed.&lt;&#x2F;p&gt;
&lt;p&gt;Installed the theme, run Emacs, I get &lt;em&gt;slightly&lt;&#x2F;em&gt; disappointed, the product does not match the label on the tin.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;emacs-theme-00.png&quot;&gt;
    &lt;figcaption&gt;Comparing what I see to what I am *supposed* to see&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;2-how-do-i-have-emacs-display-more-colors&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-how-do-i-have-emacs-display-more-colors&quot; aria-label=&quot;Anchor link for: 2-how-do-i-have-emacs-display-more-colors&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
2) How do I have Emacs display more colors?&lt;&#x2F;h3&gt;
&lt;p&gt;Emacs support 24bit colors since 26.x. I notice that &amp;quot;graphical&amp;quot; Emacs (&lt;code&gt;emacs-gtk&lt;&#x2F;code&gt; and &lt;code&gt;emacs-lucid&lt;&#x2F;code&gt;, compiled against X11 and more libraries) behave differently. They bring a set of dependencies and eLisp functions to check for graphical capabilities. Now I understand why I don&#x27;t have any of those. I&#x27;ve always used &lt;code&gt;emacs-nox&lt;&#x2F;code&gt;, the version without dependencies, &lt;a href=&quot;https:&#x2F;&#x2F;emacs.stackexchange.com&#x2F;a&#x2F;45564&quot;&gt;without even realizing the limitations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;emacs -nw&lt;&#x2F;code&gt; (no window) shows the same behaviour as using &lt;code&gt;emacs-nox&lt;&#x2F;code&gt;, so I can test capabilities both on the &amp;quot;enhanced&amp;quot; emacs version and the barebone one.&lt;&#x2F;p&gt;
&lt;p&gt;All good, then? Nope. It&#x27;s not a problem of emacs, rather of the shell I&#x27;m sitting on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-what-shell-do-i-have-and-why-it-doesn-t-behave-the-way-i-want&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-what-shell-do-i-have-and-why-it-doesn-t-behave-the-way-i-want&quot; aria-label=&quot;Anchor link for: 3-what-shell-do-i-have-and-why-it-doesn-t-behave-the-way-i-want&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
3) What shell do I have and why it doesn&#x27;t behave the way I want&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s first check the terminal capabilities:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $TERM
xterm-256color
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $COLORTERM
truecolor
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;XVilka&#x2F;8346728&quot;&gt;This Github gist details 24bit support&lt;&#x2F;a&gt; in many shells: it&#x27;s very likely that a modern shell supports 24bit colors.&lt;&#x2F;p&gt;
&lt;p&gt;So how do I do that?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-have-more-color-on-the-linux-shell&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-have-more-color-on-the-linux-shell&quot; aria-label=&quot;Anchor link for: 4-have-more-color-on-the-linux-shell&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
4) Have more color on the Linux shell&lt;&#x2F;h3&gt;
&lt;p&gt;In order to have 24bit colors, you need to first instruct the shell to use such a palette, being the standard 256 colors (or worse, if you&#x27;re out of luck). This is done by generating a new &lt;code&gt;terminfo&lt;&#x2F;code&gt; file (a database describing terminals).&lt;&#x2F;p&gt;
&lt;p&gt;You can verify this with one of the many scripts around, example &lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;821157&#x2F;print-a-256-color-test-pattern-in-the-terminal&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This procedure is detailed on &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;emacs&#x2F;manual&#x2F;html_node&#x2F;efaq&#x2F;Colors-on-a-TTY.html&quot;&gt;GNU&#x27;s emacs faq&lt;&#x2F;a&gt; and it takes 10 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s generate the 24bit &lt;code&gt;terminfo&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ tic -x -o ~&amp;#x2F;.terminfo terminfo-24bit.src

# or better, a XDG basedir compliant path:
$ export TERMINFO=$XDG_CONFIG_HOME&amp;#x2F;terminfo
$ tic -x -o $TERMINFO terminfo-24bit.src
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and tell our shell to use more colors:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ export TERM=xterm-24bit
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s run emacs and compare the colors available with &lt;code&gt;M-x list-colors-display&lt;&#x2F;code&gt; with the new env var enabled.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;emacs-theme-03.png&quot;&gt;
    &lt;figcaption&gt;The number of colors is doubled!&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Interesting fact: even on a 24bit enabled shell, Emacs only has ~550 colors instead of ~256: this is something curious I didn&#x27;t figure out.&lt;&#x2F;p&gt;
&lt;p&gt;As always, the funny thing is that once you identify exactly the problem, there is always a place where you could find the correct solution, &lt;a href=&quot;http:&#x2F;&#x2F;www.skybert.net&#x2F;emacs&#x2F;colourful-tty-emacs&quot;&gt;this blog post&lt;&#x2F;a&gt; for example - provided you could formulate the right question.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;5-persist-this-configuration&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-persist-this-configuration&quot; aria-label=&quot;Anchor link for: 5-persist-this-configuration&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
5) Persist this configuration&lt;&#x2F;h3&gt;
&lt;p&gt;I throw the new env vars in &lt;code&gt;~&#x2F;.profile&lt;&#x2F;code&gt; so after the next login I will have everything set.&lt;&#x2F;p&gt;
&lt;p&gt;Nope.&lt;&#x2F;p&gt;
&lt;p&gt;When I open a new terminal (I use Gnome Terminal) from X11 or Wayland I don&#x27;t see my $TERM applied and I am back to 256 colors. Terminal (non graphical) shells are fine.&lt;&#x2F;p&gt;
&lt;p&gt;More digging. And here I&#x27;ve learned the exact &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;170493&#x2F;login-non-login-and-interactive-non-interactive-shells&quot;&gt;differences between shells&lt;&#x2F;a&gt;: login, non-login, interactive and non-interactive.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out that Gnome Terminal is the &amp;quot;culprit&amp;quot;. By default it doesn&#x27;t open a login shell (which makes sense) but that means that it &lt;strong&gt;overwrites&lt;&#x2F;strong&gt; your &lt;code&gt;~&#x2F;.profile&lt;&#x2F;code&gt; with something else (which is not ok).&lt;&#x2F;p&gt;
&lt;p&gt;I can say &amp;quot;overwrite&amp;quot; by placing &lt;code&gt;echo&lt;&#x2F;code&gt; statements all along the login process and save a log file:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;-- Loading &amp;#x2F;etc&amp;#x2F;profile [start]: $TERM=dumb
-- Loading &amp;#x2F;etc&amp;#x2F;profile [end]: $TERM=dumb
-- Loading ~&amp;#x2F;.profile [start]: $TERM=dumb
-- Loading ~&amp;#x2F;.profile [end]: $TERM=xterm-24bit
-- Loading ~&amp;#x2F;.bashrc: $TERM=xterm-256color          # &amp;lt;-- WHAT THE HELL?!
user@localhost:~$
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;printf&lt;&#x2F;code&gt; debugging never disappoints.&lt;&#x2F;p&gt;
&lt;p&gt;You have two choices: create &lt;code&gt;~&#x2F;.bash_profile&lt;&#x2F;code&gt; or tell Gnome Terminal to behave like a login shell which will force reading the &lt;code&gt;.&#x2F;profile&lt;&#x2F;code&gt; file. I choose the second option because I don&#x27;t want another confusing file lingering around.&lt;&#x2F;p&gt;
&lt;p&gt;Now all settings will survive a reboot.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;emacs-theme-04.png&quot;&gt;
    &lt;figcaption&gt;Behold the colors!&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;finished&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#finished&quot; aria-label=&quot;Anchor link for: finished&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Finished?&lt;&#x2F;h3&gt;
&lt;p&gt;Of course not: bugs!&lt;&#x2F;p&gt;
&lt;p&gt;If you followed and implemented the above steps, congratulations: I have just broke your shell when you ssh into a remote server supporting only 256 colors! The TERM environment variable is always sent.&lt;&#x2F;p&gt;
&lt;p&gt;You can workaround this by aliasing the old color scheme:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;alias ssh256=&amp;quot;TERM=xterm-256color ssh&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;EDIT: But that will have other problems, such giving &lt;code&gt;ssh&lt;&#x2F;code&gt; will not autocomplete hosts anymore. So the most sensitive choice is to &lt;em&gt;not&lt;&#x2F;em&gt; set this configuration in the shell settings and only launch emacs with it:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;alias emacs=&#x27;TERM=xterm-24bit emacs&#x27;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Bridge networking with QEMU based VM (KVM)</title>
        <published>2020-07-06T00:00:00+00:00</published>
        <updated>2020-07-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/qemu-bridge-networking/" type="text/html"/>
        <id>https://apiraino.github.io/qemu-bridge-networking/</id>
        <content type="html">&lt;p&gt;After learning how to create KVM based virtual machines, I had to figure out how to access them from a network interface, not only from a GUI. Turns out I had opened another can of worms.&lt;&#x2F;p&gt;
&lt;p&gt;As mentioned in my &lt;a href=&quot;&#x2F;qemu-kvm&quot;&gt;previous article&lt;&#x2F;a&gt;, once you setup your QEMU&#x2F;KVM virtual machine, you can only interact with it with a user interface, be it an opaque and arcane QEMU launch script, Gnome Boxes or &lt;code&gt;virt-manager&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But unless your virtual machine runs with root permission (in the &lt;code&gt;qemu:&#x2F;&#x2F;&#x2F;system&lt;&#x2F;code&gt; space), you will not be able to access it by any other mean. It is often underestimated the importance of running virtual machines as unprivileged user. The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;KVM#Setting_up_bridge_networking&quot;&gt;official Debian Wiki&lt;&#x2F;a&gt;, for example, completely ignores this topic.&lt;&#x2F;p&gt;
&lt;p&gt;By default, a virtual machine will be created with a &#x27;usermode&#x27; QEMU networking device:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;figcaption&gt;The &#x27;usermode&#x27; networking device&lt;&#x2F;figcaption&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;virt-manager-usermode-networking.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Before explaining the solution, I&#x27;ll try to sum up all the symptoms and cues to actually understand what&#x27;s happening. I will describe either by using &lt;code&gt;virsh&lt;&#x2F;code&gt; (command-line tool) and &lt;code&gt;virt-manager&lt;&#x2F;code&gt; (the GUI tool), both great tools.&lt;&#x2F;p&gt;
&lt;p&gt;When you install QEMU and &lt;code&gt;libvirtd&lt;&#x2F;code&gt; you should have a default virtual network interface available, but only in the &lt;code&gt;qemu:&#x2F;&#x2F;&#x2F;system&lt;&#x2F;code&gt; space. If you connect to the user space (&lt;code&gt;qemu:&#x2F;&#x2F;&#x2F;session&lt;&#x2F;code&gt;), it&#x27;s not there anymore.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ virsh
virsh # net-list
 Name      State    Autostart   Persistent
--------------------------------------------
 default   active   yes         yes

virsh # net-info --network default
Name:           default
UUID:           c1e51079-7727-4c3d-846e-3179f56fe94f
Active:         yes
Persistent:     yes
Autostart:      yes
Bridge:         virbr0

virsh # connect qemu:&amp;#x2F;&amp;#x2F;&amp;#x2F;session

virsh # net-list
 Name   State   Autostart   Persistent
----------------------------------------

virsh #
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
    &lt;figcaption&gt;The same info from virt-manager&lt;&#x2F;figcaption&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;net-list-virt-manager.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;You will notice that the virtual network bridge interface is &lt;code&gt;virbr0&lt;&#x2F;code&gt; (&lt;code&gt;vir&lt;&#x2F;code&gt;-tual &lt;code&gt;br&lt;&#x2F;code&gt;-igde, if it helps) and assigns a DHCP address from a pool of a &#x2F;24 class. More info can be obtained with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ brctl show
bridge name	bridge id		STP enabled	interfaces
virbr0		8000.52540099f456	yes		virbr0-nic
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ bridge link show virbr0
5: virbr0-nic: &amp;lt;BROADCAST,MULTICAST&amp;gt; mtu 1500 master virbr0 state disabled priority 32 cost 100
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ ip addr show virbr0
4: virbr0: &amp;lt;NO-CARRIER,BROADCAST,MULTICAST,UP&amp;gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000
    link&amp;#x2F;ether 52:54:00:99:f4:56 brd ff:ff:ff:ff:ff:ff
    inet 192.168.122.1&amp;#x2F;24 brd 192.168.122.255 scope global virbr0
       valid_lft forever preferred_lft forever
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In case this network is not available it can be created by following instructions such as &lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;6&#x2F;html&#x2F;virtualization_host_configuration_and_guest_installation_guide&#x2F;chap-virtualization_host_configuration_and_guest_installation_guide-network_configuration&quot;&gt;these&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;blog.programster.org&#x2F;kvm-missing-default-network&quot;&gt;these&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The RedHat &lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;6&#x2F;html&#x2F;virtualization_host_configuration_and_guest_installation_guide&#x2F;chap-virtualization_host_configuration_and_guest_installation_guide-network_configuration&quot;&gt;documentation&lt;&#x2F;a&gt; explains how to create a bridge but lacks an important detail: how to use it with an unprivileged QEMU VM!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-problem&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-problem&quot; aria-label=&quot;Anchor link for: the-problem&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
The problem&lt;&#x2F;h3&gt;
&lt;p&gt;So, the current situation is that our VM can access the &amp;quot;internet&amp;quot; but is isolated from us. When you run your KVM guest as unprivileged user, you cannot use the &lt;code&gt;default&lt;&#x2F;code&gt; network bridge, no matter if your user belongs to the &lt;code&gt;kvm&lt;&#x2F;code&gt; or &lt;code&gt;libvirt&lt;&#x2F;code&gt; groups, it&#x27;s simply impossible.&lt;&#x2F;p&gt;
&lt;p&gt;Again, from the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.libvirt.org&#x2F;page&#x2F;FAQ#What_is_the_difference_between_qemu:.2F.2F.2Fsystem_and_qemu:.2F.2F.2Fsession.3F_Which_one_should_I_use.3F&quot;&gt;libvirt documentation&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;qemu:&#x2F;&#x2F;&#x2F;session has a serious drawback: since the libvirtd instance does not have sufficient privileges, the only out of the box network option is qemu&#x27;s usermode networking, which has nonobvious limitations, so its usage is discouraged.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Why is it discouraged? Basically because it&#x27;s an unoptimized implementation of a tcp&#x2F;ip stack in QEMU, here are &lt;a href=&quot;https:&#x2F;&#x2F;jonaspfannschmidt.com&#x2F;libvirt_session.html&quot;&gt;some reasons why&lt;&#x2F;a&gt;: in short, it&#x27;s just a pass-through for the guest to access external resources.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;host-to-guest-networking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#host-to-guest-networking&quot; aria-label=&quot;Anchor link for: host-to-guest-networking&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
host-to-guest networking&lt;&#x2F;h3&gt;
&lt;p&gt;Your only chance to access the VM vithout going crazy creating subnetworks of fiddling with &lt;code&gt;iptables&lt;&#x2F;code&gt; (there are some answers around on this but I don&#x27;t like them) is by using &lt;code&gt;qemu-bridge-helper&lt;&#x2F;code&gt;, as explained in &lt;a href=&quot;https:&#x2F;&#x2F;mike42.me&#x2F;blog&#x2F;2019-08-how-to-use-the-qemu-bridge-helper-on-debian-10&quot;&gt;this article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this missing piece of info in our hands, it&#x27;s now easy to fix.&lt;&#x2F;p&gt;
&lt;p&gt;Note: as of July, 2020 the above article and the official documentation have some inaccuracies that are here fixed (along with some small optimizations).&lt;&#x2F;p&gt;
&lt;p&gt;Assuming that ipv4 forwarding has been enabled (see previous documentation):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat &amp;#x2F;etc&amp;#x2F;sysctl.conf
...
net.ipv4.ip_forward = 1
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the virtual bridge &lt;code&gt;virbr0&lt;&#x2F;code&gt; is enabled and autostarted (again, see above) we need to create this file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# echo &amp;quot;allow virbr0&amp;quot; &amp;gt; &amp;#x2F;etc&amp;#x2F;qemu&amp;#x2F;bridge.conf
# chown root:kvm &amp;#x2F;etc&amp;#x2F;qemu&amp;#x2F;bridge.conf
# chmod 0660 &amp;#x2F;etc&amp;#x2F;qemu&amp;#x2F;bridge.conf
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This file will set an ACL telling QEMU that the &lt;code&gt;virbr0&lt;&#x2F;code&gt; interface should be whitelisted. By default all the rest is blacklisted (details &lt;a href=&quot;https:&#x2F;&#x2F;wiki.qemu.org&#x2F;Features&#x2F;HelperNetworking&quot;&gt;here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then you should have installed &lt;code&gt;qemu-bridge-helper&lt;&#x2F;code&gt;, available in the &lt;code&gt;qemu-system-common&lt;&#x2F;code&gt; package (for Debian based Linux distributions). Ensure that it has the &lt;code&gt;suid&lt;&#x2F;code&gt; bit set:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# chmod u+s &amp;#x2F;usr&amp;#x2F;lib&amp;#x2F;qemu&amp;#x2F;qemu-bridge-helper
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try starting your unprivileged VM without setting the suid bit, you will get a permission error:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error starting domain: internal error: &#x2F;usr&#x2F;lib&#x2F;qemu&#x2F;qemu-bridge-helper --use-vnet --br=virbr0 --fd=24: failed to communicate with bridge helper: Transport endpoint is not connected
stderr=failed to create tun device: Operation not permitted&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now you should be able to start your virtual machine and get to the console. Login and configure the networking device on the guest to ensure the DHCP is getting an address (how to do that is distro-specific, so I won&#x27;t detail it here) and check what&#x27;s going on the host:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ journalctl -t dnsmasq-dhcp -f
-- Logs begin at Fri 2019-06-21 21:08:01 CEST. --
Jul 06 10:53:55 host dnsmasq-dhcp[1350]: read &amp;#x2F;var&amp;#x2F;lib&amp;#x2F;libvirt&amp;#x2F;dnsmasq&amp;#x2F;default.hostsfile
Jul 06 11:18:14 host dnsmasq-dhcp[1350]: DHCPDISCOVER(virbr0) 52:54:00:53:52:b1
Jul 06 11:18:14 host dnsmasq-dhcp[1350]: DHCPOFFER(virbr0) 192.168.122.62 52:54:00:53:52:b1
Jul 06 11:18:14 host dnsmasq-dhcp[1350]: DHCPREQUEST(virbr0) 192.168.122.62 52:54:00:53:52:b1
Jul 06 11:18:14 host dnsmasq-dhcp[1350]: DHCPACK(virbr0) 192.168.122.62 52:54:00:53:52:b1 guestvm
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;seems like &lt;code&gt;guestvm&lt;&#x2F;code&gt; is receiving an ip address! Let&#x27;s go back to the guest.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;figcaption&gt;The guest received an IP address&lt;&#x2F;figcaption&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;qemu-guest-ip-addr.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Now we are able to access the guest (let&#x27;s say we enable SSH on it) and the guest still have access to the world.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;user@host$ ssh 192.168.122.62
user@192.168.122.62&amp;#x27;s password:
Linux guestvm 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) x86_64
user@nyarlathoep:~$
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Refactored Emacs config</title>
        <published>2020-05-23T00:00:00+00:00</published>
        <updated>2020-05-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/emacs-new-config/" type="text/html"/>
        <id>https://apiraino.github.io/emacs-new-config/</id>
        <content type="html">&lt;p&gt;I&#x27;ve completely reworked my Emacs config. I&#x27;ve been using the excellent uber-package &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bbatsov&#x2F;prelude&quot;&gt;Prelude&lt;&#x2F;a&gt; for years, but like many big monolithic installations you don&#x27;t know if you really need everything. Also, although very customizable, I had found two &#x27;core&#x27; packages I could not disable without touching the core files, which I didn&#x27;t want to.&lt;&#x2F;p&gt;
&lt;p&gt;So, I&#x27;ve started from scratch, read one by one all the packages I had installed before and one by one installed and configured each package I wanted to keep. I&#x27;ve learned a lot about a packages and how to tailor your own Emacs. I&#x27;m tired and I hate emacs eLisp and probably I did not yet finish, but I still &lt;a href=&quot;&#x2F;2019&#x2F;01&#x2F;24&#x2F;software-appreciation.html&quot;&gt;even more&lt;&#x2F;a&gt; amazed by this surprising piece of software and the incredible community behind.&lt;&#x2F;p&gt;
&lt;p&gt;Just for the record a clean Prelude installation is ~25Mb, now my whole Emacs installation (included compiled packages) floats around 8.5mb. My entire Emacs configuration file is under 11kb, 6kb (!) without comments. The Emacs binary is around 38mb stripped.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ du -sk .emacs.d
8656   .emacs.d
$ du -sk .emacs.d.prelude&amp;#x2F;
25760  .emacs.d.prelude&amp;#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I challenge anyone to show me an entire IDE, organizer, TODO list, email client, IRC client, &lt;a href=&quot;https:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;EmacsDoctor&quot;&gt;psycotherapist&lt;&#x2F;a&gt; and much more in such a small bundle. &lt;&#x2F;p&gt;
&lt;p&gt;If the world ended, it can be rebuild using Emacs, the basic building block of anything.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Tracking Colemak learning progress</title>
        <published>2020-05-13T00:00:00+00:00</published>
        <updated>2020-05-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/colemak-tracking-progress/" type="text/html"/>
        <id>https://apiraino.github.io/colemak-tracking-progress/</id>
        <content type="html">&lt;p&gt;Here I am tracking my progress while learning the Colemak keyboard layout.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;motivation&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation&quot; aria-label=&quot;Anchor link for: motivation&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Motivation&lt;&#x2F;h3&gt;
&lt;p&gt;Learning touch typing because coding while having to look at the keyboard is distracting.&lt;&#x2F;p&gt;
&lt;p&gt;PROS&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;will be finally entitled to a blind keyboard (very cool nerd gizmo)&lt;&#x2F;li&gt;
&lt;li&gt;relaxing exercise for the brain, empties your head&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;CONS&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;VIM bindings break - unsure if I should remap &lt;code&gt;h,j,k,l&lt;&#x2F;code&gt; to &lt;code&gt;h,n,e,i&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Emacs bindings break - esp. those to move around, ex.:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-n&lt;&#x2F;code&gt; one line down&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C-p&lt;&#x2F;code&gt; one line up&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C-b&lt;&#x2F;code&gt; one char back&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;C-f&lt;&#x2F;code&gt; one char forward&lt;&#x2F;li&gt;
&lt;li&gt;a lot of others that I can&#x27;t say off the top of my head: I don&#x27;t really know what I am typing on Emacs, I cannot spell which keycombo I&#x27;m typing, it&#x27;s completely automated. So it&#x27;s really hard to remap muscle memory.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;No physical layout under my eyes therefore obliged to learn touch typing (which I was never motivated enough to do)&lt;&#x2F;li&gt;
&lt;li&gt;Initial muscle strain because the higher concentration on typing leads to keep my arms stiff&lt;&#x2F;li&gt;
&lt;li&gt;I have to start from scratch with typing training. This has many ramifications I will detail down in a bit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;learning-milestones&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-milestones&quot; aria-label=&quot;Anchor link for: learning-milestones&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Learning milestones&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;2020-05-12&lt;&#x2F;strong&gt;: incomplete layout (very few punctuation): 16~18 wpm, very high accuracy rate&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2020-05-15&lt;&#x2F;strong&gt;: around 15-18 wpm with almost full punctuation: high accuracy rate. Most common errors: &lt;code&gt;f,g,l,m&lt;&#x2F;code&gt;. Encountering problems also because I can&#x27;t touch type over a QWERTY layout, therefore errors also on punctuation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2020-05-17&lt;&#x2F;strong&gt;: around 20 wpm with very few punctuation. Error map says I&#x27;m getting confused by e,g,k.n and a lot by comma and dot.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward to &lt;strong&gt;2020-05-30&lt;&#x2F;strong&gt;: I can keep a sustained 25-35 wpm when copying text, with very few errors.&lt;&#x2F;p&gt;
&lt;p&gt;I can see the trend. There is a steady and proportional improvemend if I exercise regularly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;caveats&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#caveats&quot; aria-label=&quot;Anchor link for: caveats&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Caveats&lt;&#x2F;h3&gt;
&lt;p&gt;Or: what they don&#x27;t tell you when you try a new keyboard layout.&lt;&#x2F;p&gt;
&lt;p&gt;You start doing exercises like any good schoolboy would do, after a relative short time you also reach good results. You can also compete with encouraging results in those typing games you find around.&lt;&#x2F;p&gt;
&lt;p&gt;Then off you go to your favourite chat and start typing to your frieds how cool i
s. typing. using. the. new. layout. You suddenly realize you are not able anymore of thinking &lt;em&gt;and&lt;&#x2F;em&gt; typing. Your speed is at least halved on any hello world text you try to write without reading from a script.&lt;&#x2F;p&gt;
&lt;p&gt;Not to mention when you dare to write a line of code. Half of what you write is garbage and you must rewrite it because you still don&#x27;t have come to terms with mixing (old) punctuation and (new) keyboard layout. It&#x27;s disappointing because it prevents you into going into &amp;quot;the zone&amp;quot;, to concentrate and be productive.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily I notice that passing from one layout to another is effortless, I had expected my brain to refuse switching from one to another in just a couple of seconds (for example, switching spoken language takes me longer): this means that I can proficiently work during the day and in the evening exercise for half an hour or more (depending on how tired I am).&lt;&#x2F;p&gt;
&lt;p&gt;So my evaluation so far (after admittedly very short time) is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;learning a new keyboard layout and at the same time touch typing is a noticeable effort that requires time, so this evaluation is only partial&lt;&#x2F;li&gt;
&lt;li&gt;learning a new keyboard layout is a waste of time unless there is a physical condition requiring you to do so (example some people reported less wrist strain) or in your daily work you type so fast (example texts, not code) that the Colemak layout gives you a concrete advantage.&lt;&#x2F;li&gt;
&lt;li&gt;touch typing is great (once mastered) but not always applicable (I can imagine many situations in which I don&#x27;t have physical room to lay my hands in the correct position)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Virtualization with KVM</title>
        <published>2020-05-02T00:00:00+00:00</published>
        <updated>2020-05-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/qemu-kvm/" type="text/html"/>
        <id>https://apiraino.github.io/qemu-kvm/</id>
        <content type="html">&lt;p&gt;The toy project for the weekend was to get rid of Virtualbox and migrate everything to KVM-based virtualization (QEMU, libvirt, Gnome Boxes). Here&#x27;s an overview of my learnings.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-dumping-proprietary-virtualization-platforms&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-dumping-proprietary-virtualization-platforms&quot; aria-label=&quot;Anchor link for: why-dumping-proprietary-virtualization-platforms&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Why dumping proprietary virtualization platforms&lt;&#x2F;h3&gt;
&lt;p&gt;My virtualization needs are pretty basic, I run virtual machines to try new linux distributions or to keep a couple of Windows machines for browser testing or some quaint Windows-only software. Occasionally I need to run macOS.&lt;&#x2F;p&gt;
&lt;p&gt;Years ago I used to use VMware Player but it became impossible to even simply download the free player without signing in and checking hundreds of checkboxes with unintelligible corporate blurb - ok I got it you don&#x27;t me to use your software anymore.&lt;&#x2F;p&gt;
&lt;p&gt;So I had settled on Virtualbox because of its ease of use, but again, after being bought by Oracle things went downhill. While Virtualbox is still GPL, there are &lt;a href=&quot;https:&#x2F;&#x2F;www.theregister.co.uk&#x2F;2019&#x2F;10&#x2F;04&#x2F;oracle_virtualbox_merula&#x2F;&quot;&gt;horror stories&lt;&#x2F;a&gt; of Virtualbox phoning home when installing the proprietary extension and calling the vultures on you to pay hefty fees. Well, &lt;span class=&quot;censored&quot;&gt;fuck you Oracle and all the IT companies for paying mojito drinks to managers with legacy software&lt;&#x2F;span&gt; thanks but no thanks.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qemu-kvm-libvirt-some-clarifications&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#qemu-kvm-libvirt-some-clarifications&quot; aria-label=&quot;Anchor link for: qemu-kvm-libvirt-some-clarifications&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
QEMU, KVM, libvirt... some clarifications&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.linux-kvm.org&#x2F;page&#x2F;Main_Page&quot;&gt;KVM&lt;&#x2F;a&gt; is an amazing piece of software. At a very high level, it&#x27;s a kernel module that interfaces hardware resources directly to the virtual machines to give maximum performances. The Linux Hypervisor has then two hardware interfaces to the CPU: either Intel VT or AMD-V.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.qemu.org&quot;&gt;QEMU&lt;&#x2F;a&gt; is a project initially wrote by &lt;a href=&quot;https:&#x2F;&#x2F;bellard.org&quot;&gt;Fabrice Bellard&lt;&#x2F;a&gt; that has expanded as the virtualization solution for a &lt;a href=&quot;https:&#x2F;&#x2F;wiki.qemu.org&#x2F;Documentation&#x2F;Platforms&quot;&gt;myriad of architectures and CPUs&lt;&#x2F;a&gt; (half of them unknown to me).&lt;&#x2F;p&gt;
&lt;p&gt;QEMU is a full-featured, very well-documented &lt;em&gt;AND&lt;&#x2F;em&gt; user-hostile command line tool, so there are frontends for the rest of us. But its job is to spin a single VM, it&#x27;s the equivalent of launching VMware Player.&lt;&#x2F;p&gt;
&lt;p&gt;QEMU can also run without KVM but then it gets slow on VM hungry of resources.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;&quot;&gt;libvirt&lt;&#x2F;a&gt; is a VM manager (invisible to the user) akin to their closed source solutions such are Virtualbox and VMware Workstation (plus more enterprise stuff).&lt;&#x2F;p&gt;
&lt;p&gt;On top of libvirt there are many GUI and command-line frontends. Perhaps &lt;a href=&quot;https:&#x2F;&#x2F;virt-manager.org&#x2F;&quot;&gt;virt-manager&lt;&#x2F;a&gt; is one of most well-known. I&#x27;ve also been suggested to try &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Boxes&quot;&gt;Gnome Boxes&lt;&#x2F;a&gt;, a very convenient and basic solution if you just want to quickly get started. As usual, the command line in the end is more convenient to use so I&#x27;ll also mention &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;manpages&#x2F;virsh.html&quot;&gt;virsh&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;down-the-rabbit-hole&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#down-the-rabbit-hole&quot; aria-label=&quot;Anchor link for: down-the-rabbit-hole&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Down the rabbit hole&lt;&#x2F;h3&gt;
&lt;p&gt;So, let&#x27;s get to the meat. Like I mentioned, what I wanted to accomplish is moving all my VMs under libvirt. Using Gnome Boxes to create Linux and Windows VM is very easy (click, click, yes, yes, done), so nothing to see here.&lt;&#x2F;p&gt;
&lt;p&gt;Moving the macOS VM away from Virtualbox was more interesting. Thanks &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foxlet&#x2F;macOS-Simple-KVM&quot;&gt;to this repo&lt;&#x2F;a&gt; I quickly get started with a QEMU script to run macOS Catalina. But a QEMU VM is not manageable by libvirt, it must be imported, so I need an intermediate XML export file to attach the VM to libvirt. Having done that I can now see the VM from &lt;code&gt;virt-manager&lt;&#x2F;code&gt; but not from Gnome Boxes. Uhm ... there is also an open issue on the repo, let&#x27;s see what we can do.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s step back and first things let&#x27;s familiarize with some libvirt terminology (I can see the footprint of Red Hat business jargon): a &amp;quot;domain&amp;quot; is a VM that can be executed under libvirt. The domain is described and imported (&amp;quot;defined&amp;quot;) using an XML file. The domain can then be removed and destroyed (&amp;quot;undefined&amp;quot;) from the VM manager.&lt;&#x2F;p&gt;
&lt;p&gt;The domain XML is created using the great &lt;code&gt;virsh&lt;&#x2F;code&gt; command line tool. My current config is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ virsh
virsh # version
Compiled against library: libvirt 5.4.0
Using library: libvirt 5.4.0
Using API: QEMU 5.4.0
Running hypervisor: QEMU 4.0.0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s generate a domain XML from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foxlet&#x2F;macOS-Simple-KVM&#x2F;blob&#x2F;master&#x2F;basic.sh&quot;&gt;the QEMU shell script&lt;&#x2F;a&gt;. A snippet of the bash script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;qemu-system-x86_64 \
    -enable-kvm \
    -m 2G \
    -machine q35,accel=kvm \
    -smp 4,cores=2 \
    -cpu Penryn,vendor=GenuineIntel,kvm=on,+sse3,+sse4.2,....
    ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_enterprise_linux&#x2F;6&#x2F;html&#x2F;virtualization_administration_guide&#x2F;sub-sect-domain_commands-converting_qemu_arguments_to_domain_xml&quot;&gt;According to the documentation&lt;&#x2F;a&gt; I need to rewrite that script putting everything in one line and feed the new script to virsh:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;$ virsh domxml-from-native qemu-argv basic.args &amp;gt; macos.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This step took me a truckload of time because QEMU parameters do not match one-to-one to libvirt domain XML format (specs &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;formatdomain.html&quot;&gt;here&lt;&#x2F;a&gt;). I had to look up a lot of errors, painfully tweak the QEMU script to get a valid XML.&lt;&#x2F;p&gt;
&lt;p&gt;Also some funny WTF moments, like when I could not figure out the correct QEMU syntax to assign a drive to the correct bus. I could use the &lt;code&gt;index&lt;&#x2F;code&gt; parameter, for example, but how?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;-drive id=SystemDisk,if=none,index=XXX,file=MyDisk.qcow2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;well, by incrementing XXX I observed that &lt;code&gt;&amp;lt;address&amp;gt;&lt;&#x2F;code&gt; parameters are treated like a single binary number 🤦‍♂️, therefore the XML changes like this:️&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;quot;index=0&amp;quot; gives &amp;lt;address type=&amp;#x27;drive&amp;#x27; controller=&amp;#x27;0&amp;#x27; bus=&amp;#x27;0&amp;#x27; target=&amp;#x27;0&amp;#x27; unit=&amp;#x27;0&amp;#x27;&amp;#x2F;&amp;gt;
&amp;quot;index=1&amp;quot; gives &amp;lt;address type=&amp;#x27;drive&amp;#x27; controller=&amp;#x27;0&amp;#x27; bus=&amp;#x27;0&amp;#x27; target=&amp;#x27;0&amp;#x27; unit=&amp;#x27;1&amp;#x27;&amp;#x2F;&amp;gt;
&amp;quot;index=2&amp;quot; gives &amp;lt;address type=&amp;#x27;drive&amp;#x27; controller=&amp;#x27;0&amp;#x27; bus=&amp;#x27;0&amp;#x27; target=&amp;#x27;1&amp;#x27; unit=&amp;#x27;0&amp;#x27;&amp;#x2F;&amp;gt;
&amp;quot;index=3&amp;quot; gives &amp;lt;address type=&amp;#x27;drive&amp;#x27; controller=&amp;#x27;0&amp;#x27; bus=&amp;#x27;1&amp;#x27; target=&amp;#x27;0&amp;#x27; unit=&amp;#x27;1&amp;#x27;&amp;#x2F;&amp;gt;
&amp;quot;index=4&amp;quot; gives &amp;lt;address type=&amp;#x27;drive&amp;#x27; controller=&amp;#x27;1&amp;#x27; bus=&amp;#x27;0&amp;#x27; target=&amp;#x27;0&amp;#x27; unit=&amp;#x27;0&amp;#x27;&amp;#x2F;&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anyway, in the end I gave up and modified directly the XML file (snippet):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;domain type=&amp;#x27;kvm&amp;#x27; xmlns:qemu=&amp;#x27;http:&amp;#x2F;&amp;#x2F;libvirt.org&amp;#x2F;schemas&amp;#x2F;domain&amp;#x2F;qemu&amp;#x2F;1.0&amp;#x27;&amp;gt;
  &amp;lt;name&amp;gt;macOS-test&amp;lt;&amp;#x2F;name&amp;gt;
  &amp;lt;uuid&amp;gt;bb1dee99-d97f-497f-8238-f2df783deef0&amp;lt;&amp;#x2F;uuid&amp;gt;
  &amp;lt;memory unit=&amp;#x27;KiB&amp;#x27;&amp;gt;2097152&amp;lt;&amp;#x2F;memory&amp;gt;
  &amp;lt;currentMemory unit=&amp;#x27;KiB&amp;#x27;&amp;gt;2097152&amp;lt;&amp;#x2F;currentMemory&amp;gt;
  &amp;lt;vcpu placement=&amp;#x27;static&amp;#x27;&amp;gt;4&amp;lt;&amp;#x2F;vcpu&amp;gt;
  &amp;lt;os&amp;gt;
    &amp;lt;type arch=&amp;#x27;x86_64&amp;#x27; machine=&amp;#x27;pc-q35-4.0&amp;#x27;&amp;gt;hvm&amp;lt;&amp;#x2F;type&amp;gt;
    &amp;lt;loader readonly=&amp;#x27;yes&amp;#x27; type=&amp;#x27;pflash&amp;#x27;&amp;gt;OVMF_CODE.fd&amp;lt;&amp;#x2F;loader&amp;gt;
    &amp;lt;nvram&amp;gt;OVMF_VARS-1024x768.fd&amp;lt;&amp;#x2F;nvram&amp;gt;
    &amp;lt;boot dev=&amp;#x27;hd&amp;#x27;&amp;#x2F;&amp;gt;
  &amp;lt;&amp;#x2F;os&amp;gt;
  &amp;lt;features&amp;gt;
  ...
  &amp;lt;&amp;#x2F;features&amp;gt;
  ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s feed this XML into libvirt. Optionally one can also validate the XML (against &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;formatdomain.html&quot;&gt;this schema&lt;&#x2F;a&gt;) while creating the VM. This command will create a new VM called &amp;quot;macOS-test&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh define macos.xml [--validate]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;XML validation often fails even if the XML is &amp;quot;good&amp;quot; because the parser is overly-zealous.&lt;&#x2F;p&gt;
&lt;p&gt;To remove the VM, let&#x27;s use the opposite command. The &lt;code&gt;--keep-nvram&lt;&#x2F;code&gt; is needed in case the VM has shared resources with other VMs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh undefine macOS-test [--keep-nvram]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Of course we can now go the other way round and export a domain XML into a QEMU script (&lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;manpages&#x2F;virsh.html#domxml-from-native&quot;&gt;docs&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh domxml-to-native --domain macOS-test --format qemu-argv &amp;gt; macos.sh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Again, &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;drvqemu.html#xmlexport&quot;&gt;caveat applies&lt;&#x2F;a&gt;, the generated bash script con contain resources not available outside of libvirt 🤦‍♂️ 🤦‍♂️.&lt;&#x2F;p&gt;
&lt;p&gt;So, it&#x27;s clear that this conversion between QEMU bash scripts and domain XML is problematic, they recommend using it only to migrate QEMU scripts or even &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;drvqemu.html#xmlimport&quot;&gt;manually craft the XML file&lt;&#x2F;a&gt; for new VMs.&lt;&#x2F;p&gt;
&lt;p&gt;The XML file can also be used to move a VM around:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh dumpxml macOS-test &amp;gt; export.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh create export.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally let&#x27;s spin up the VM:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh start bb1dee99-d97f-497f-8238-f2df783deef0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;or kill it (forced shutdown, equals to rip the power cord):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh destroy bb1dee99-d97f-497f-8238-f2df783deef0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;have-the-vm-show-up-in-gnome-boxes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#have-the-vm-show-up-in-gnome-boxes&quot; aria-label=&quot;Anchor link for: have-the-vm-show-up-in-gnome-boxes&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Have the VM show up in Gnome Boxes&lt;&#x2F;h3&gt;
&lt;p&gt;Now the virtual machine shows up in &lt;code&gt;virt-manager&lt;&#x2F;code&gt; but we also want to use Gnome Boxes. Why does it not appear? Uhm ... some more digging.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out another important piece of knowledge I was missing. A QEMU VM can run inside libvirt either as privileged user (&lt;code&gt;qemu:&#x2F;&#x2F;&#x2F;system&lt;&#x2F;code&gt;) or as normal user (&lt;code&gt;qemu:&#x2F;&#x2F;&#x2F;session&lt;&#x2F;code&gt;). The latter is advisable unless there are certain requirements, &lt;a href=&quot;https:&#x2F;&#x2F;blog.wikichoon.com&#x2F;2016&#x2F;01&#x2F;qemusystem-vs-qemusession.html&quot;&gt;here is an article about that&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The reason why it didn&#x27;t appear is that Gnome Boxes (when run as user) only has access to user VMs, while virt-manager shows you both, although separately.&lt;&#x2F;p&gt;
&lt;p&gt;So in the end, all I needed to do was ensuring the VM was imported in libvirt userspace 🤦‍♂️🤦‍♂️🤦‍♂️, and so:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;virsh -c qemu:&#x2F;&#x2F;&#x2F;session define macos.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This distinction only became clear when I started using &lt;code&gt;virsh&lt;&#x2F;code&gt; directly, see next paragraph.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;networking&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#networking&quot; aria-label=&quot;Anchor link for: networking&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Networking&lt;&#x2F;h3&gt;
&lt;p&gt;When you run your KVM guest as unprivileged user, by default you cannot access the virtual machine through any network interface, fullstop. And this is pretty annoying.&lt;&#x2F;p&gt;
&lt;p&gt;Your only chance without going crazy with subnetworks or playing with &lt;code&gt;iptables&lt;&#x2F;code&gt; is to configure a bridge.&lt;&#x2F;p&gt;
&lt;p&gt;Since this a topic that kept me busy for a while, it is explained in detail in a &lt;a href=&quot;&#x2F;qemu-bridge-networking&quot;&gt;separate article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quick-reference-for-virsh&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#quick-reference-for-virsh&quot; aria-label=&quot;Anchor link for: quick-reference-for-virsh&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Quick reference for virsh&lt;&#x2F;h3&gt;
&lt;p&gt;ref: &lt;a href=&quot;https:&#x2F;&#x2F;libvirt.org&#x2F;manpages&#x2F;virsh.html#connect&quot;&gt;https:&#x2F;&#x2F;libvirt.org&#x2F;manpages&#x2F;virsh.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Open the virsh shell:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;$ virsh&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Connect to the hypervisor as unprivileged user:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;# connect qemu:&#x2F;&#x2F;&#x2F;session&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;List all VMs (should see all the VMs available to this user, also those on Gnome Boxes):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;# list --all&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Import a VM:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;# define --file macos.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The new VM should now be visible on Gnome Boxes (and &lt;code&gt;virt-manager&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Delete a VM&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;# undefine --domain macOS-test --keep-nvram&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#references&quot; aria-label=&quot;Anchor link for: references&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
References&lt;&#x2F;h3&gt;
&lt;p&gt;A gazillion of links on stack overflow, Red Hat documentation, &lt;code&gt;man qemu-system-x86_64&lt;&#x2F;code&gt; and whatnot.&lt;&#x2F;p&gt;
&lt;p&gt;Warning, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foxlet&#x2F;macOS-Simple-KVM&#x2F;pull&#x2F;186&quot;&gt;registering an AppleID might get yourself banned by Tim Apple&lt;&#x2F;a&gt;, remember to change the MAC address and UUID of the machine before attempting to login&#x2F;register an Apple account.&lt;&#x2F;p&gt;
&lt;p&gt;Packages needed for libvirt and company:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;gnome-boxes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;dmeventd gnome-boxes libdevmapper-event1.02.1 libgtk-vnc-2.0-0 libgvnc-1.0-0 liblvm2cmd2.03 libosinfo-1.0-0 libosinfo-bin libphodav-2.0-0 libphodav-2.0-common libreadline5 libspice-client-glib-2.0-8 libspice-client-gtk-3.0-5 libusbredirhost1 libvirt-daemon libvirt-daemon-driver-storage-rbd libvirt-glib-1.0-0 libvirt0 lvm2 osinfo-db spice-client-glib-usb-acl-helper thin-provisioning-tools&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;virt-viewer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;libgovirt-common libgovirt2 virt-viewer&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Example usage: &lt;code&gt;virt-viewer -c qemu:&#x2F;&#x2F;&#x2F;session --domain-name debian-11-testing-bullseye&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;virt-manager&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;gir1.2-gtk-vnc-2.0 gir1.2-libosinfo-1.0 gir1.2-libvirt-glib-1.0 gir1.2-spiceclientglib-2.0 gir1.2-spiceclientgtk-3.0 python3-libvirt python3-libxml2 virt-manager virtinst&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Installing a Matrix server</title>
        <published>2020-04-15T00:00:00+00:00</published>
        <updated>2020-04-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/install-matrix/" type="text/html"/>
        <id>https://apiraino.github.io/install-matrix/</id>
        <content type="html">&lt;p&gt;In my (impossible) mission to manage my digital life without relying on third-party SaaS, another important step is a chat system. Can my usecase be accommodated with something else than Slack? Let&#x27;s quickly overview the options for self-hosting, then what I&#x27;ve installed and how does it look like.&lt;&#x2F;p&gt;
&lt;p&gt;Briefly, the options and how I feel about them as of March 2020:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&quot;&gt;matrix.org&lt;&#x2F;a&gt;: I saw a &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;35c3-9400-matrix_the_current_status_and_year_to_date&quot;&gt;CCC talk&lt;&#x2F;a&gt; and made a note to try it. I was attracted by the global federation idea behind it. Connect your instance with other instances and bridge with third-party systems.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RocketChat&quot;&gt;Rocket.chat&lt;&#x2F;a&gt;: a server written in JS using Meteor, a framework my frontend friends say it&#x27;s past its times. Will keep an eye on it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mattermost.com&quot;&gt;Mattermost&lt;&#x2F;a&gt;: another promising alternative, but also heard a couple of lukewarm comments about usability. I might try it, though.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m probably forgetting others worth a mention ...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As usual, this is my subjective experience (right or wrong), these are my unfiltered thoughts (right or wrong) and this is not a blog post trending on twitter :-P this is just me taking down notes.&lt;&#x2F;p&gt;
&lt;p&gt;As the title suggests, I decided to try matrix, the name was cool (lol) and it seems to have the most buzz across Nerdlands.&lt;&#x2F;p&gt;
&lt;p&gt;Being essentially an open protocol, one of the important foundation of Matrix is &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;docs&#x2F;spec&quot;&gt;the API documentation&lt;&#x2F;a&gt; and notably a &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;docs&#x2F;spec&#x2F;client_server&#x2F;r0.6.0&quot;&gt;simple and clean client API&lt;&#x2F;a&gt; to interact with your (or someone else&#x27;s) server. I could hack a simple bot in a very short time using their Python async API, some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vranki&#x2F;hemppa&quot;&gt;examples here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The reference implementation of a server running on the Matrix protocol is a Python3 web backend called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;matrix-org&#x2F;synapse&quot;&gt;Synapse&lt;&#x2F;a&gt;. Installing Synapse is very easy. There&#x27;s a handy Docker container for a quick install. Although I usually prefer installing non-dockerized services, now I just want the convenience to throw that and play with it, so I&#x27;ll go for the fastest path with a SQLite database.&lt;&#x2F;p&gt;
&lt;p&gt;I had to figure out a little bit the proxy pass-through configuration, the Synapse server needs two open ports. I think the 8448 is for the login and for federation (that is, users from other Matrix instances willing to join your instance).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apache&quot; class=&quot;language-apache &quot;&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&amp;lt;VirtualHost *:443&amp;gt;
    SSLEngine on
    ProxyPass &amp;#x2F; http:&amp;#x2F;&amp;#x2F;127.0.0.1:8008&amp;#x2F; nocanon
    ProxyPassReverse &amp;#x2F; http:&amp;#x2F;&amp;#x2F;127.0.0.1:8008&amp;#x2F;
&amp;lt;&amp;#x2F;VirtualHost&amp;gt;

&amp;lt;VirtualHost *:8448&amp;gt;
    SSLEngine on
    ProxyPass &amp;#x2F;_matrix http:&amp;#x2F;&amp;#x2F;127.0.0.1:8008&amp;#x2F;_matrix nocanon
    ProxyPassReverse &amp;#x2F;_matrix http:&amp;#x2F;&amp;#x2F;127.0.0.1:8008&amp;#x2F;_matrix
&amp;lt;&amp;#x2F;VirtualHost&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other small details to take care of, like manually enable the possibility for users to signup (which I find awkward because how else do I create the admin user?) and it&#x27;s basically done. I spin up the docker image and we&#x27;re online. I must say Synapse made a very good first impression, my first evaluation is always a sort of &amp;quot;grandma&#x27;s test&amp;quot; and see in how much time I can walk the happy path provided by the documentation.
As usual, after starting the service, first check the open ports: Synapse opens to the world the TCP&#x2F;8008, the python3 server (Twisted). Let&#x27;s close it immediately:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;iptables -I DOCKER-USER -p tcp --dport 8008 -j DROP&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Configuration and DB path:&lt;&#x2F;p&gt;
&lt;p&gt;SQLite DB: &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;synapse-data&#x2F;_data&#x2F;homeserver.db&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Config file: &lt;code&gt;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;synapse-data&#x2F;_data&#x2F;homeserver.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-matrix-clients&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-matrix-clients&quot; aria-label=&quot;Anchor link for: the-matrix-clients&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
The Matrix clients&lt;&#x2F;h3&gt;
&lt;p&gt;A brief overview of the clients available (as of March 2020). Easy: &lt;a href=&quot;https:&#x2F;&#x2F;riot.im&quot;&gt;Riot.im&lt;&#x2F;a&gt;, the rest looks like a lot of work in progress stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Your can either use it from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vector-im&#x2F;riot-web&quot;&gt;browser or download an Electron App&lt;&#x2F;a&gt;. The Android client to be used is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vector-im&#x2F;riotX-android&quot;&gt;RiotX&lt;&#x2F;a&gt;. I&#x27;d say that both clients work fine. Sometimes I receive complaints that the client is not receiving updates, maybe a push notifications issue? No idea, I&#x27;m not going to dive into the code and investigate.&lt;&#x2F;p&gt;
&lt;p&gt;The user interface is pretty basic but it&#x27;s ok. I find interesting that I can edit the previous message simply by pressing arrow up.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;figcaption&gt;Edit an old message&lt;&#x2F;figcaption&gt;
    &lt;img data-gifffer=&quot;&#x2F;images&#x2F;riot-edit-msgs.gif&quot; &#x2F;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I like end-to-end encrypted rooms, just be careful: losing the client key will cut you out from reading the messages and that&#x27;s by design.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;caption&gt;The localization could use a bit of love, though&lt;&#x2F;caption&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;riotim-e2e.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I then invited some friends of mine (already resigned to be my guinea pigs).&lt;&#x2F;p&gt;
&lt;p&gt;There are a lot of fine settings, which is interesting. For example you can notify the server when you&#x27;re writing, if you&#x27;re reading a message, for mentions, for messages from bots and so on and so forth. The customization is at least on par (if not more customizable) with other platforms like Zulip or Slack. I have disabled the typing notification because each keystroke sends 4 requests (!) to the server. Seriously, wtf?!&lt;&#x2F;p&gt;
&lt;p&gt;Would a WebSocket work for this?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;2020-04-16 10:38:41,258 - synapse.access.http.8008 - 302 - INFO - OPTIONS-37149 - 11.22.33.44 - 8008 - {None} Processed request: 0.001sec&amp;#x2F;0.001sec (0.000sec, 0.000sec) (0.000sec&amp;#x2F;0.000sec&amp;#x2F;0) 2B 200 &amp;quot;OPTIONS &amp;#x2F;_matrix&amp;#x2F;client&amp;#x2F;r0&amp;#x2F;rooms&amp;#x2F;!xxx&amp;#x2F;typing&amp;#x2F;%40user%3Achat.domain.com HTTP&amp;#x2F;1.1&amp;quot;
2020-04-16 10:38:41,309 - synapse.access.http.8008 - 302 - INFO - GET-37148 - 11.22.33.44 - 8008 - {@user:chat.domain.com} Processed request: 16.861sec&amp;#x2F;0.002sec (0.007sec, 0.000sec) (0.000sec&amp;#x2F;0.000sec&amp;#x2F;0) 694B 200 &amp;quot;GET &amp;#x2F;_matrix&amp;#x2F;client&amp;#x2F;r0&amp;#x2F;sync?filter=0&amp;amp;timeout=30000&amp;amp;since=s1234_56789_0123_4567_890_1_2_34_5 HTTP&amp;#x2F;1.1&amp;quot;
2020-04-16 10:38:41,310 - synapse.access.http.8008 - 302 - INFO - PUT-37150 - 11.22.33.44 - 8008 - {@user:chat.domain.com} Processed request: 0.013sec&amp;#x2F;0.001sec (0.002sec, 0.004sec) (0.000sec&amp;#x2F;0.000sec&amp;#x2F;0) 2B 200 &amp;quot;PUT &amp;#x2F;_matrix&amp;#x2F;client&amp;#x2F;r0&amp;#x2F;rooms&amp;#x2F;!xxx%3Achat.domain.com&amp;#x2F;typing&amp;#x2F;%40user%3Achat.domain.com HTTP&amp;#x2F;1.1&amp;quot;
2020-04-16 10:38:41,377 - synapse.access.http.8008 - 302 - INFO - OPTIONS-37151 - 11.22.33.44 - 8008 - {None} Processed request: 0.000sec&amp;#x2F;0.001sec (0.000sec, 0.000sec) (0.000sec&amp;#x2F;0.000sec&amp;#x2F;0) 2B 200 &amp;quot;OPTIONS &amp;#x2F;_matrix&amp;#x2F;client&amp;#x2F;r0&amp;#x2F;sync?filter=0&amp;amp;timeout=30000&amp;amp;since=s1234_56789_0123_4567_890_1_2_34_5 HTTP&amp;#x2F;1.1&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the client is ok, after some time one get used to minimalistic style and the sometimes confusing interface. I am no UX expert at all but:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Why would I want in the first level of a popup menu (i.e. where space is at a premium!) an item to show the message source json?&lt;&#x2F;li&gt;
&lt;li&gt;Why the &amp;quot;react&amp;quot; and the &amp;quot;stickers&amp;quot; icons are the same?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;riotim-web-ux-0.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;ul&gt;
&lt;li&gt;Why the &amp;quot;reply to message&amp;quot; UI covers my messages?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;riotim-web-ux-1.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;ul&gt;
&lt;li&gt;Why the &amp;quot;forward message&amp;quot; cancel icon (&amp;quot;X&amp;quot;) is up there?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;riotim-web-ux-2.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;It&#x27;s really hard getting it right when it comes to UX.&lt;&#x2F;p&gt;
&lt;p&gt;Some features, from and external point of view, look hacked rather baked into the client. Example: here is how I can add and use a Giphy bot to a room.&lt;&#x2F;p&gt;
&lt;figcaption&gt;(You have just downloaded a 4mb GIF)&lt;&#x2F;figcaption&gt;
&lt;img data-gifffer=&quot;&#x2F;images&#x2F;riot-add-giphy-synapse.gif&quot; data-gifffer-alt=&quot;Can&#x27;t even troll my friends&quot; &#x2F;&gt;
&lt;p&gt;Yes, it works (kind of) but the implementation is not refined. Notice how much time it takes to have a feedback from the bot. The experience could be disappointing for a user.&lt;&#x2F;p&gt;
&lt;p&gt;Respect for the people working on this project and trying to make it a sustainable business, I&#x27;m really rooting for them. But I also have to be honest and say that as of today I cannot suggest this platform to my non technical friends&#x2F;clients, unless the constraints are clear from the start (no custom emojis, no gifs, no fun). I don&#x27;t see that friend of mine that has TikTok installed using this.&lt;&#x2F;p&gt;
&lt;p&gt;The great added value I want to explore in the following weeks is the integration with other (non) proprietary platforms. I can have a relay on IRC, Slack, Telegram, Discord etc. because unfortunately I have to have a user account on each of these platforms to stay in touch even for two only two people. A single centralized client for many proprietary platforms all orchestrated by a decentralized platform. The irony is not lost on this.&lt;&#x2F;p&gt;
&lt;p&gt;I tried quickly setting up a bridge towards a Slack account and I failed the grandma&#x27;s test. Apparently I need to install a Docker container (another one?). So I&#x27;ll have a look at that later.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;on-decentralized-platforms&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#on-decentralized-platforms&quot; aria-label=&quot;Anchor link for: on-decentralized-platforms&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
On decentralized platforms&lt;&#x2F;h3&gt;
&lt;p&gt;I noticed that &lt;em&gt;no&lt;&#x2F;em&gt; matrix client except those from riot.im implement end-to-end (e2e) message encryption. Same story for the servers that implement the Matrix protocol. Same &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;sdks&#x2F;&quot;&gt;for the SDK&lt;&#x2F;a&gt;: only the matrix team did accomplish this.&lt;&#x2F;p&gt;
&lt;p&gt;At the CCC, Moxie Marlinspike from Signal gave a &amp;quot;controversial&amp;quot; talk about how a decentralized messaging system cannot work. Like it or not, he has a point: implementing e2e on a decentralized protocol is a huge pain in the ass &lt;em&gt;if&lt;&#x2F;em&gt; you don&#x27;t want to sacrifice usability for your users. If you don&#x27;t want to share your contacts with the server, fine, but then good luck porting your data to another device. You can backup on the messaging platform implicitly (like on Signal) or explicitly (like on Threema). Threema even gives you the option to backup on an offline device, which is a very good approach.&lt;&#x2F;p&gt;
&lt;p&gt;But. My Threema contacts never backup their data when they change device and regularly lose their ThreemaID and cannot recover their account data. They have to pay for another Threema licence (!) or I need to kindly ask the support for help (!!). Because they&#x27;re non-tech people used to have &amp;quot;magically&amp;quot; their contacts and important chats and important nude pics automatically synchronized. You can&#x27;t even have them do a simple thing like clicking a goddamn button and backup their stuff before throwing away the old smartphone.&lt;&#x2F;p&gt;
&lt;p&gt;I hate giving my contacts to Signal, but I see the usecase. My contacts on Signal were mostly phone numbers. You can&#x27;t tell one from the other when they&#x27;re all numbers. At some point I enabled sharing my contact list (which Signal promises to be stored encrypted on their servers) and - bam! - my contacts suddenly became real people with name and surname. Cool, right? The side effect is that when a contact in my list creates an account on Signal we both receive a notification - a &lt;em&gt;completely unsolicited and that I cannot opt-out&lt;&#x2F;em&gt; - stupid notification saying &amp;quot;hey, your friend John Doe in on Signal!&amp;quot;. Well, thanks but I don&#x27;t want this crap.&lt;&#x2F;p&gt;
&lt;p&gt;Centralized platforms have spoiled users and now it is hard to decentralize people&#x27;s &lt;em&gt;minds&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Installing a Jitsi.Meet server</title>
        <published>2020-04-12T00:00:00+00:00</published>
        <updated>2020-04-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/install-jitsi/" type="text/html"/>
        <id>https://apiraino.github.io/install-jitsi/</id>
        <content type="html">&lt;p&gt;With all the latest interest in videoconference tools, I decided to install &lt;a href=&quot;https:&#x2F;&#x2F;meet.jit.si&#x2F;&quot;&gt;Jitsi.Meet&lt;&#x2F;a&gt;, on paper the best FOSS self-hosted alternative to the closed-source products we all know and use.&lt;&#x2F;p&gt;
&lt;p&gt;The installation is absolutely easy for everyone that has the basics of a Linux command line, it takes 5 minutes if an existing web server (either Apache or Nginx) is already in place. My respects to the team for having streamlined the installation of such a complex array of services talking to each other. I&#x27;ll also detail some personal notes (as usual, as a reminder for my future self).&lt;&#x2F;p&gt;
&lt;p&gt;Example tutorial: &lt;a href=&quot;https:&#x2F;&#x2F;www.brring.com&#x2F;2020&#x2F;04&#x2F;04&#x2F;setting-up-a-jitsi-server-in-less-than-15-minutes&quot;&gt;https:&#x2F;&#x2F;www.brring.com&#x2F;2020&#x2F;04&#x2F;04&#x2F;setting-up-a-jitsi-server-in-less-than-15-minutes&lt;&#x2F;a&gt; or a video (!): &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8KR0AhDZF2A&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8KR0AhDZF2A&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No need to repeat everything, here&#x27;s just a summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;install a web server&lt;&#x2F;li&gt;
&lt;li&gt;install the jitsi.Meet packages and automatically pull the (a lot of) dependencies&lt;&#x2F;li&gt;
&lt;li&gt;install a Let&#x27;s Encrypt certificate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;At the end of the procedure the server is ready to be used on the domain name specified.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;now-for-some-notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#now-for-some-notes&quot; aria-label=&quot;Anchor link for: now-for-some-notes&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Now for some notes&lt;&#x2F;h3&gt;
&lt;p&gt;Jitsi is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jitsi&#x2F;jitsi-meet&#x2F;blob&#x2F;master&#x2F;doc&#x2F;manual-install.md#network-description&quot;&gt;a hydra&lt;&#x2F;a&gt; and each head talk to each other through a TCP port. Your firewall must be configured to open the following ports:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;iptables -A INPUT -p tcp --dport 5222 -j ACCEPT
iptables -A INPUT -p tcp --dport 5269 -j ACCEPT
iptables -A INPUT -p tcp --dport 5280 -j ACCEPT
iptables -A INPUT -p tcp --dport 5347 -j ACCEPT
iptables -A INPUT -p tcp --dport 4443 -j ACCEPT
iptables -A INPUT -p udp --dport 10000:20000 -j ACCEPT
# ... plus 80+443 for the webserver
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After installing the packages, the installation asks if you want to install a SSL certificate or &amp;quot;I want to use my own certificate&amp;quot;. Since I have already Let&#x27;s Encrypt &lt;code&gt;certbot&lt;&#x2F;code&gt; in place I can say no, because otherwise a lot of necessary packages will be installed. Also a lot of stuff that I don&#x27;t want of a webserver (gcc, for example... 🤦‍♂️).&lt;&#x2F;p&gt;
&lt;p&gt;Jitsi pulls also a number of dependencies I don&#x27;t understand, like the &lt;code&gt;x11-common&lt;&#x2F;code&gt; and a couple of X11 libraries, &lt;code&gt;libcups&lt;&#x2F;code&gt; and &lt;code&gt;libavahi-*&lt;&#x2F;code&gt;. Those cannot be removed.&lt;&#x2F;p&gt;
&lt;p&gt;Plus on Ubuntu 18.04.4 LTS the &lt;code&gt;openjdk-8-jre-headless&lt;&#x2F;code&gt; is installed. This can be replaced with the &lt;code&gt;openjdk-11-jre-headless&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The installation files are in these directories:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jitsi-meet&amp;#x2F;
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jitsi-meet-prosody&amp;#x2F;
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jitsi-meet-web-config&amp;#x2F;
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jitsi-videobridge&amp;#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Logs are here:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;var&amp;#x2F;log&amp;#x2F;jitsi&amp;#x2F;jvb.log
&amp;#x2F;var&amp;#x2F;log&amp;#x2F;jitsi&amp;#x2F;jicofo.log
&amp;#x2F;var&amp;#x2F;log&amp;#x2F;prosody&amp;#x2F;prosody.log
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The service can be started and stopped with:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;systemctl restart jitsi-videobridge2.service&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Java startup command visible from &lt;code&gt;top&lt;&#x2F;code&gt; or &lt;code&gt;ps&lt;&#x2F;code&gt; shows a whopping 112 java jars needed to run Jitsi. Let&#x27;s have a look:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;java -Xmx3072m
-XX +HeapDumpOnOutOfMemoryError
-XX HeapDumpPath=&amp;#x2F;tmp
-Dnet.java.sip.communicator.SC_HOME_DIR_LOCATION=&amp;#x2F;etc&amp;#x2F;jitsi
-Dnet.java.sip.communicator.SC_HOME_DIR_NAME=jicofo
-Dnet.java.sip.communicator.SC_LOG_DIR_LOCATION=&amp;#x2F;var&amp;#x2F;log&amp;#x2F;jitsi
-Djava.util.logging.config.file=&amp;#x2F;etc&amp;#x2F;jitsi&amp;#x2F;jicofo&amp;#x2F;logging.properties
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now all the jars:&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;Click to expand the list&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code&gt;-cp
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;jicofo.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;agafua-syslog-0.4.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;annotations-15.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;aopalliance-repackaged-2.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;bccontrib-1.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;bcpkix-jdk15on-1.54.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;bcprov-jdk15on-1.54.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;cglib-nodep-2.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;commons-codec-1.6.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;commons-lang3-3.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;commons-logging-1.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;concurrentlinkedhashmap-lru-1.0_jdk5.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;core-2.0.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;dnsjava-2.1.7.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;dom4j-1.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;fmj-1.0-SNAPSHOT.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;guava-15.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;hk2-api-2.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;hk2-locator-2.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;hk2-utils-2.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;httpclient-4.4.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;httpcore-4.4.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;ice4j-3.0-10-g982e782.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jackson-annotations-2.10.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jackson-core-2.10.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jackson-databind-2.10.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jackson-module-jaxb-annotations-2.10.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jain-sip-ri-ossonly-1.2.279-jitsi-oss1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.activation-api-1.2.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.annotation-api-1.3.5.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.inject-2.6.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.validation-api-2.0.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.ws.rs-api-2.1.6.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jakarta.xml.bind-api-2.3.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;java-dogstatsd-client-2.5.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;java-sdp-nist-bridge-1.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;javassist-3.22.0-CR2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;javax.servlet-api-3.1.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jbosh-0.9.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jcip-annotations-1.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jcl-core-2.8.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-client-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-common-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-container-jetty-http-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-container-servlet-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-container-servlet-core-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-entity-filtering-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-hk2-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-media-jaxb-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-media-json-jackson-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jersey-server-2.30.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-client-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-continuation-9.4.17.v20190418.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-http-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-io-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-proxy-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-security-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-server-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-servlet-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-util-9.4.15.v20190215.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-webapp-7.0.1.v20091125.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jetty-xml-7.0.1.v20091125.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jicoco-1.1-22-gbec9167.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-android-osgi-1.0-SNAPSHOT.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-configuration-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-credentialsstorage-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-dnsservice-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-netaddr-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-protocol-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-protocol-jabber-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-protocol-media-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-util-2.13.cb5485e.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-utils-1.0-33-g2ed4090.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jitsi-xmpp-extensions-1.0-6-g009420d.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jna-4.1.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jnsapi-0.0.3-jitsi-smack4.2-3.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;json-simple-1.1.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jxmpp-core-0.6.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jxmpp-jid-0.6.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;jxmpp-util-cache-0.6.2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;libidn-1.15.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;libjitsi-1.0-0-gb3296cf.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;object-cloner-0.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;objenesis-2.6.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;orange-extensions-1.3.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;org.apache.felix.framework-4.4.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;org.apache.felix.main-4.4.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;org.osgi.core-4.3.1.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;osgi-resource-locator-1.0.3.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;reflections-0.9.11.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;sdes4j-1.1.3.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;sdp-api-1.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;slf4j-api-1.7.26.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;slf4j-jdk14-1.7.26.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-bosh-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-core-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-debug-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-experimental-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-extensions-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-im-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-java7-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-legacy-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-resolver-javax-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-sasl-javax-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;smack-tcp-4.2.4-47d17fc.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;tinder-1.3.0.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;weupnp-0.1.4.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;xml-apis-1.0.b2.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;xmlpull-1.1.3.4a.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;xpp3-1.1.4c.jar
&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;jicofo&amp;#x2F;lib&amp;#x2F;zrtp4j-light-4.1.0-jitsi-1-SNAPSHOT.jar
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;And finally the configuration for the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jitsi&#x2F;jicofo&quot;&gt;Jitsi Conference Focus&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;org.jitsi.jicofo.Main
--host=localhost
--domain=meet.yourdomain.com
--port=5347
--secret=xxxxx
--user_name=xxxxx
--user_domain=auth.meet.yourdomain.com
--user_password=xxxxx
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;optimizations&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#optimizations&quot; aria-label=&quot;Anchor link for: optimizations&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Optimizations&lt;&#x2F;h3&gt;
&lt;pre&gt;&lt;code&gt;net.core.rmem_max=10485760
net.core.netdev_max_backlog=100000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;source: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jitsi&#x2F;docker-jitsi-meet&#x2F;pull&#x2F;440#issue-402324914&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ok-so-how-is-it&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-so-how-is-it&quot; aria-label=&quot;Anchor link for: ok-so-how-is-it&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Ok, so how is it?&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve just briefly tested with a short call and it was not bad. The video quality is amazing (also your own video stream in local, when you see yourself) not a lot stable and often the quality indicator signaled a poor connection. But the quality never dropped to a freezing video stream, it just downgraded to standard quality from high quality. A first test with the mobile client didn&#x27;t work. I will do more tests in the following days.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Ipse Dixit no. 4</title>
        <published>2020-04-10T00:00:00+00:00</published>
        <updated>2020-04-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ipse-dixit-4/" type="text/html"/>
        <id>https://apiraino.github.io/ipse-dixit-4/</id>
        <content type="html">&lt;p&gt;Heroism on command, senseless violence and all the loathsome nonsense that goes by the name of patriotism – how passionately I hate them.&lt;&#x2F;p&gt;
&lt;p&gt;-- Albert Einstein&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Moccoli: dark theme simulation for CSS testing</title>
        <published>2020-02-10T00:00:00+00:00</published>
        <updated>2020-02-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/dark-mode/" type="text/html"/>
        <id>https://apiraino.github.io/dark-mode/</id>
        <content type="html">&lt;p&gt;Yesterday I&#x27;ve spent more time than I really wanted to implement a trivial fix on a Firefox extension: implementing a &amp;quot;dark theme&amp;quot; in CSS.&lt;&#x2F;p&gt;
&lt;p&gt;Turns out it is quite simple and as usual the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;@media&#x2F;prefers-color-scheme&quot;&gt;documentation on MDN&lt;&#x2F;a&gt; is topnotch.&lt;&#x2F;p&gt;
&lt;p&gt;On a basic level, this is all it&#x27;s needed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;body {
    &amp;#x2F;* This will apply if no preference is set *&amp;#x2F;
    background-color: red;
}

.myclass {
    &amp;#x2F;* This will apply if no preference is set *&amp;#x2F;
    color: yellow;
}

&amp;#x2F;* This will apply if the operating system is set to DARK theme *&amp;#x2F;
@media (prefers-color-scheme: dark) {
    body { background-color: black; }
    .myclass { color: white; }
}

&amp;#x2F;* This will apply if the operating system is set to LIGHT theme *&amp;#x2F;
@media (prefers-color-scheme: light) {
    body { background-color: white; }
    .myclass { color: black; }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem that took me some time was figuring out how to simulate a dark theme so Firefox could &amp;quot;pick up&amp;quot; this info.&lt;&#x2F;p&gt;
&lt;p&gt;Again, Stack Overflow to the rescue &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;56757527&quot;&gt;suggesting this obscure config item&lt;&#x2F;a&gt; to be set in &lt;code&gt;about:config&lt;&#x2F;code&gt;: &lt;code&gt;ui.systemUsesDarkTheme: &amp;lt;int&amp;gt;&lt;&#x2F;code&gt;. Switching from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt; would let me see how the CSS is applied.&lt;&#x2F;p&gt;
&lt;p&gt;Apparently Chrome is (as of today) a bit more friendly than that, having a tick somewhere in the web developer tools.&lt;&#x2F;p&gt;
&lt;p&gt;By the way, I hate all this stuff.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Back from 36c3</title>
        <published>2020-01-30T00:00:00+00:00</published>
        <updated>2020-01-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/36c3/" type="text/html"/>
        <id>https://apiraino.github.io/36c3/</id>
        <content type="html">&lt;p&gt;I still have in my stash a list of the most interesting events I&#x27;ve experienced at the 36C3, &lt;a href=&quot;https:&#x2F;&#x2F;events.ccc.de&#x2F;congress&#x2F;2019&quot;&gt;the Chaos Communication Congress at its 36th year&lt;&#x2F;a&gt;. For my future reference, I&#x27;m listing them here.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Things started immediately funny. The train to the location was cancelled, so we had to figure out another train to get there. I helped a 92 (yes, ninety-two) years old lady figuring out the train to take to the congress location as she was confused by the train cancellation (clearly she wasnt&#x27;t attending the congress). Helped her finding a seat in the crowded train we took as replacement. I wish I will be that lively at her age.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learned about &lt;a href=&quot;https:&#x2F;&#x2F;delta.chat&#x2F;de&quot;&gt;delta.chat&lt;&#x2F;a&gt;, recently rewritten in Rust. It was interesting listening to one of the maintainers, about their userbase in countries where internet bandwidth is at a premium.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learned about how bad regulations and a poor development process can lead to &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10961-boeing_737max_automated_crashes&quot;&gt;Boeing airplanes to crash&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learned about the ongoing organizational process during the &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10933-what_the_world_can_learn_from_hongkong&quot;&gt;Hong Kong protests&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Quantum computing is cool, but &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-11039-quantum_computing_are_we_there_yet&quot;&gt;not near any practical use&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Interesting speculations about the CIA providing &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10642-harry_potter_and_the_not-so-smart_proxy_war&quot;&gt;manned weapons to Syrian militants against Russian army&lt;&#x2F;a&gt;, the &amp;quot;Protego&amp;quot; documents in the Vault 7 Wikileaks of 2 years ago. Also, a frightening glimpse on how war technology has evolved.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Hacking the &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10567-hacking_sony_playstation_blu-ray_drives&quot;&gt;PS4 Blu-ray drive&lt;&#x2F;a&gt; or - in other words - how to responsibly release a security vulnerability, get some money from Sony and not have your ass sued. And perhaps have Sony obtain a partial public security disclosure.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Java Tomcat (!) webservices are still king &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10689-on_the_insecure_nature_of_turbine_control_systems_in_power_generation&quot;&gt;in industrial complexes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Interesting demonstration on how to use the &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-10564-hacking_with_a_tpm&quot;&gt;TPM cryptographic chip inside our computers&lt;&#x2F;a&gt;. This goes straight in my TODO list!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A funny and thought-provoking form of art vandalism &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-11178-art_against_facebook&quot;&gt;to boycott Facebook events&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learned about &lt;a href=&quot;https:&#x2F;&#x2F;puredata.info&#x2F;&quot;&gt;Pure Data&lt;&#x2F;a&gt;, a really interesting programming language to create music sequencers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Also, an interesting talk by Moxie Marlinspike from Signal &lt;a href=&quot;https:&#x2F;&#x2F;peertube.co.uk&#x2F;videos&#x2F;watch&#x2F;12be5396-2a25-4ec8-a92a-674b1cb6b270&quot;&gt;on how a decentralized messaging system is not working&lt;&#x2F;a&gt; (and then be grilled with questions). This talk was removed from the CCC Mediatek on request of the speaker.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And I&#x27;ve only scratched the surface of the Congress.&lt;&#x2F;p&gt;
&lt;p&gt;In a sense, the 36C3 goes on after you leave: here&#x27;s the huge list of talks &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;c&#x2F;36c3?sort=view_count&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After the Congress, I&#x27;ve also discovered a nice surprise that I will document separately.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, yes, and managed to get a bad cold, I&#x27;d spent New Year&#x27;s Eve at home with a hot tea :-(&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Build wlroots + Sway + accessories</title>
        <published>2020-01-28T00:00:00+00:00</published>
        <updated>2020-01-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/sway-from-sources/" type="text/html"/>
        <id>https://apiraino.github.io/sway-from-sources/</id>
        <content type="html">&lt;p&gt;Like I mentioned &lt;a href=&quot;&#x2F;2020&#x2F;01&#x2F;13&#x2F;wayland.html#part_3&quot;&gt;in my previous article&lt;&#x2F;a&gt; installing some Sway accessories can lead to frustration because package maintainers are behind the tarball releases. This is perfectly fine when these projects move fast, but it can lead to bogus issue reports and being told to &amp;quot;just update to the latest version&amp;quot;, when the latest version is not yet available for your Linux distribution.&lt;&#x2F;p&gt;
&lt;p&gt;So I decided to build from scratch everything starting from &lt;code&gt;wlroots&lt;&#x2F;code&gt; (the compositor) up to Sway and friends in order to be free to update without having to wait for a packaged release.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;blurb-about-failed-attempts-blah-blah-my-life-sucks-blah-blah&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#blurb-about-failed-attempts-blah-blah-my-life-sucks-blah-blah&quot; aria-label=&quot;Anchor link for: blurb-about-failed-attempts-blah-blah-my-life-sucks-blah-blah&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Blurb about failed attempts blah blah my life sucks blah blah&lt;&#x2F;h3&gt;
&lt;p&gt;First I tried the &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&quot;&gt;build service from openSUSE&lt;&#x2F;a&gt;; after a signup process that smells like year 2003, I tried to find a project that targeted Debian packages so I could copy and paste stuff. I could not figure out the documentation to write a &lt;code&gt;.spec&lt;&#x2F;code&gt; file so I gave up out of frustration. But I&#x27;ll be back.&lt;&#x2F;p&gt;
&lt;p&gt;Next I tried writing my &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;apiraino&#x2F;262dc499ceeed7003bf83b6ecd9c9591&quot;&gt;Docker container&lt;&#x2F;a&gt; but I couldn&#x27;t get from the tarballs to a .deb package.&lt;&#x2F;p&gt;
&lt;p&gt;Then I&#x27;ve found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tsaarni&#x2F;docker-deb-builder&quot;&gt;this neat project&lt;&#x2F;a&gt;, a script that runs a Docker container that builds .deb packages without installing on the host all the tooling. There are other projects doing the same thing, example &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;resnullius&#x2F;deb-build-pkg&quot;&gt;this one&lt;&#x2F;a&gt; (didn&#x27;t test it, though). But how the hell one build a Debian package? I&#x27;m too lazy to read the fine material and HOWTOs. I want to hack on something already done by someone else.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I saw the light, a friend of mine pointed me to &lt;a href=&quot;https:&#x2F;&#x2F;salsa.debian.org&#x2F;swaywm-team&quot;&gt;https:&#x2F;&#x2F;salsa.debian.org&#x2F;swaywm-team&lt;&#x2F;a&gt;, experimental repositories to build Sway packages for Debian unstable. Let&#x27;s go!&lt;&#x2F;p&gt;
&lt;p&gt;The workflow now looks like:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;git checkout from github the &amp;lt;application&amp;gt; sources&lt;&#x2F;li&gt;
&lt;li&gt;git checkout from salsa.debian.org the whole &lt;code&gt;.&#x2F;debian&lt;&#x2F;code&gt; directory for &amp;lt;application&amp;gt;, save it into the sources directory&lt;&#x2F;li&gt;
&lt;li&gt;run the Docker container&lt;&#x2F;li&gt;
&lt;li&gt;pray&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Part of point (4) is related to the fact that the &lt;code&gt;.&#x2F;debian&lt;&#x2F;code&gt; directory might need some tweaks when compiling a different version than the sources on salsa.debian.org (more on that later).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;20200324-update-docker-it-for-ubuntu&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#20200324-update-docker-it-for-ubuntu&quot; aria-label=&quot;Anchor link for: 20200324-update-docker-it-for-ubuntu&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
20200324 UPDATE: Docker it for Ubuntu&lt;&#x2F;h3&gt;
&lt;p&gt;Just discovered this repo that allows building directly for Ubuntu in an easier way:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;luispabon&#x2F;sway-ubuntu-build&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;luispabon&#x2F;sway-ubuntu-build&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;$ git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;luispabon&amp;#x2F;sway-ubuntu-build &amp;amp;&amp;amp; cd sway-ubuntu-build
$ git submodule update --init --recursive mako&amp;#x2F;
$ make mako-build-deb
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;building-accessory-packages&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-accessory-packages&quot; aria-label=&quot;Anchor link for: building-accessory-packages&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Building accessory packages&lt;&#x2F;h3&gt;
&lt;p&gt;For every Sway accessory package run the container with:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;build -i docker-deb-builder:19.10 -o &amp;lt;output-package-dir&amp;gt; &amp;lt;src-dir&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For Waybar need I needed to hack the &lt;code&gt;debian&#x2F;control&lt;&#x2F;code&gt; file and force an older version of &lt;code&gt;libfmt-dev&lt;&#x2F;code&gt; for Ubuntu 19.10:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;-libfmt-dev (&amp;gt;=5.3.0),
+libfmt-dev (&amp;gt;=5.2.1),
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Cloudef&#x2F;bemenu&quot;&gt;bemenu&lt;&#x2F;a&gt; I had to modify the PREFIX install dir in the GNUmakefile, which by default points to &lt;code&gt;&#x2F;usr&#x2F;local&lt;&#x2F;code&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;a&#x2F;409818&quot;&gt;this is not allowed when building Debian packages&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;packaging-sway-and-wlroots-library&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#packaging-sway-and-wlroots-library&quot; aria-label=&quot;Anchor link for: packaging-sway-and-wlroots-library&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Packaging sway and wlroots library&lt;&#x2F;h3&gt;
&lt;p&gt;First make the packages for wlroots and ensure the final results is similar to this (assuming a tagged release for v0.10.0):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;libwlroots-dev_0.10.0-1_amd64.deb&lt;&#x2F;li&gt;
&lt;li&gt;libwlroots-examples_0.10.0-1_amd64.deb&lt;&#x2F;li&gt;
&lt;li&gt;libwlroots5_0.10.0-1_amd64.deb&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Compiling Sway it&#x27;s even more fun, we need to hack some files to get our package build to succeed. This can be probably fixed in some way.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debian&#x2F;changelog&lt;&#x2F;code&gt;: add these lines to get a package name with the right version (in my case v1.4)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;sway (1.4-1) experimental; urgency=medium

  * Hacking my way to a 1.4 packaged version
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;meson_options.txt&lt;&#x2F;code&gt;: exclude &lt;code&gt;fish&lt;&#x2F;code&gt; and &lt;code&gt;zsh&lt;&#x2F;code&gt; completion files (for some reason they break the build)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;-option(&amp;#x27;zsh-completions&amp;#x27;, type: &amp;#x27;boolean&amp;#x27;, value: true, description: &amp;#x27;Install zsh shell completions.&amp;#x27;)
+option(&amp;#x27;zsh-completions&amp;#x27;, type: &amp;#x27;boolean&amp;#x27;, value: false, description: &amp;#x27;Install zsh shell completions.&amp;#x27;)
-option(&amp;#x27;fish-completions&amp;#x27;, type: &amp;#x27;boolean&amp;#x27;, value: true, description: &amp;#x27;Install fish shell completions.&amp;#x27;)
+option(&amp;#x27;fish-completions&amp;#x27;, type: &amp;#x27;boolean&amp;#x27;, value: false, description: &amp;#x27;Install fish shell completions.&amp;#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debian&#x2F;sway.install&lt;&#x2F;code&gt;: remove the completions files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;$ diff debian&amp;#x2F;sway.install debian&amp;#x2F;sway.install.orig
3a4
&amp;gt; usr&amp;#x2F;share&amp;#x2F;fish&amp;#x2F;vendor_completions.d&amp;#x2F;sway*
8c9
&amp;lt;
---
&amp;gt; usr&amp;#x2F;share&amp;#x2F;zsh&amp;#x2F;vendor-completions&amp;#x2F;_sway*
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now start the Docker container and get inside it, we need to update the container with updated wlroots packages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --rm -it \
    -v &amp;#x2F;home&amp;#x2F;$USER&amp;#x2F;sway-1.4.0&amp;#x2F;sway:&amp;#x2F;source-ro:ro \
    -v &amp;#x2F;home&amp;#x2F;$USER&amp;#x2F;docker-deb-builder&amp;#x2F;output:&amp;#x2F;output \
    -v &amp;#x2F;home&amp;#x2F;$USER&amp;#x2F;docker-deb-builder&amp;#x2F;build-helper.sh:&amp;#x2F;build-helper.sh:ro \
    -e USER=1000 -e GROUP=1000 \
    --rm docker-deb-builder:19.10
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we will install the three previously created &lt;code&gt;wlroots&lt;&#x2F;code&gt; packages. They will need a lot of dependencies, yeah install them all, we&#x27;re in a container, who cares:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# this command will fail ...
root:~&amp;#x2F;# dpkg -i &amp;#x2F;output&amp;#x2F;libwlroots*

# ... but it will give us a list of needed packages
# that we install now
root:~&amp;#x2F;# apt install -f -y

# try again, it will work
root:~&amp;#x2F;# dpkg -i &amp;#x2F;output&amp;#x2F;libwlroots*

# now we have vandalized this Ubuntu instance.
# we can compile sway:
root:~&amp;#x2F;# .&amp;#x2F;build-helper.sh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and if it&#x27;s your lucky day you will have something like this in your output directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;user@localhost:~&amp;#x2F;docker-deb-builder$ la output&amp;#x2F;
total 5556
-rw-r--r-- 1 user user  209676 Jan 28 23:33 libwlroots5_0.10.0-1_amd64.deb
-rw-r--r-- 1 user user   47568 Jan 28 23:33 libwlroots-dev_0.10.0-1_amd64.deb
-rw-r--r-- 1 user user   67700 Jan 28 23:33 libwlroots-examples_0.10.0-1_amd64.deb
-rw-r--r-- 1 user user  236800 Jan 29 14:20 sway_1.4-1_amd64.deb
-rw-r--r-- 1 user user 4820980 Jan 29 14:20 sway-backgrounds_1.4-1_all.deb
-rw-r--r-- 1 user user   13600 Jan 28 18:08 swaybg_1.0-2_amd64.deb
-rw-r--r-- 1 user user  278680 Jan 28 23:14 waybar_0.9.0-1_amd64.deb
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll notice that I have packaged:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;wlroots 0.1.0&lt;&#x2F;li&gt;
&lt;li&gt;sway 1.4&lt;&#x2F;li&gt;
&lt;li&gt;swaybg 1.0.2&lt;&#x2F;li&gt;
&lt;li&gt;waybar 0.9.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Install them all in your Ubuntu host and you&#x27;re done.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #6: lnav</title>
        <published>2020-01-23T00:00:00+00:00</published>
        <updated>2020-01-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-6-lnav/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-6-lnav/</id>
        <content type="html">&lt;p&gt;Sometimes I find myself analyzing logs: the usual workflow is grepping my way through the file, often more files at once, sometimes both gzipped and uncompressed because I need to also look at old rotated logs. Then pipe and filter the results with &lt;code&gt;sed&lt;&#x2F;code&gt;, &lt;code&gt;less&lt;&#x2F;code&gt;, &lt;code&gt;sort&lt;&#x2F;code&gt;, &lt;code&gt;uniq&lt;&#x2F;code&gt; or &lt;code&gt;cut&lt;&#x2F;code&gt; whatever bash coreutils is needed to group stuff. Sometimes these bash oneliners get ugly. I hate Bash. I never bothered to learn &lt;code&gt;awk&lt;&#x2F;code&gt; because I hate it, too. Lots of hate, this workflow can be improved :-)&lt;&#x2F;p&gt;
&lt;p&gt;There are many command-line tools and online services (like Logentries) trying to solve this problem. I think I&#x27;ve found the sweet spot by using &lt;a href=&quot;https:&#x2F;&#x2F;lnav.org&#x2F;features&quot;&gt;lnav&lt;&#x2F;a&gt;. It&#x27;s one of those tools that takes time to learn, but it pays off. Also, I love tools that make me feel I&#x27;m using only 10% of. I&#x27;m &lt;em&gt;really thankful&lt;&#x2F;em&gt; to the authors for having written such a tool.&lt;&#x2F;p&gt;
&lt;p&gt;A great feature I&#x27;m learning to use is to replace the old way of analyzing logs using a SQL syntax. &lt;code&gt;lnav&lt;&#x2F;code&gt; automatically creates a virtual SQlite table; the schema is based on the configuration file used to parse the logs. You can then use plain SQL queries (!) to tear logs apart and filter whatever you want.&lt;&#x2F;p&gt;
&lt;p&gt;Another powerful feature of &lt;code&gt;lnav&lt;&#x2F;code&gt; is its extensibility. Do you have a custom log file format? You can easily write a JSON file to teach &lt;code&gt;lnav&lt;&#x2F;code&gt; how to parse it in great detail. I was too lazy to write a script to generate that JSON so I&#x27;ve used this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PaulWay&#x2F;lnav-formats&#x2F;blob&#x2F;master&#x2F;make_format.pl&quot;&gt;old perl script&lt;&#x2F;a&gt; (btw, I don&#x27;t like Perl, too).&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how: &lt;a href=&quot;https:&#x2F;&#x2F;lnav.readthedocs.io&#x2F;en&#x2F;latest&#x2F;formats.html#defining-a-new-format&quot;&gt;https:&#x2F;&#x2F;lnav.readthedocs.io&#x2F;en&#x2F;latest&#x2F;formats.html#defining-a-new-format&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Obviously, searching the web for &amp;quot;lnav log formats&amp;quot; shows that people had fun creating &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hagfelsh&#x2F;lnav_formats&quot;&gt;a lot of custom formats&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;lnav.readthedocs.io&#x2F;en&#x2F;latest&#x2F;formats.html#defining-a-new-format&quot;&gt;documentation is really detailed&lt;&#x2F;a&gt;, I always appreciate when a project is well documented.&lt;&#x2F;p&gt;
&lt;p&gt;Some usage examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;filter out stuff, add more filters one after another&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;figure&gt;
    &lt;figcaption&gt;It&#x27;s a GIF. Click it. Notice how you can autocomplete regexps with tabs&lt;&#x2F;figcaption&gt;
    &lt;img data-gifffer=&quot;&#x2F;images&#x2F;filter-out.gif&quot; data-gifffer-alt=&quot;It&#x27;s pronounced with a hard &#x27;G&#x27;&quot; &#x2F;&gt;
&lt;&#x2F;figure&gt;
&lt;ul&gt;
&lt;li&gt;Run in headless mode, execute a SQL query and exit&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ lnav -n \
    -c &amp;quot;;SELECT c_ip, count(*), sum(sc_bytes) AS total FROM access_log \
        GROUP BY c_ip ORDER BY total DESC LIMIT 10&amp;quot;
    cloud-http-access.log

    c_ip      count(*) total
198.27.81.94          2   984
60.191.38.77          1   507
62.210.10.77          1   451
195.154.63.222        1   451
52.28.236.88          1   308
66.133.109.36         1   308
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Load live and rotated log files at the same time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ lnav -r &amp;#x2F;var&amp;#x2F;www&amp;#x2F;logs&amp;#x2F;https-access.log

# will load:
    &amp;#x2F;var&amp;#x2F;www&amp;#x2F;logs&amp;#x2F;https-access.log
    &amp;#x2F;var&amp;#x2F;www&amp;#x2F;logs&amp;#x2F;https-access.log.1.gz
    &amp;#x2F;var&amp;#x2F;www&amp;#x2F;logs&amp;#x2F;https-access.log.2.gz
    &amp;#x2F;var&amp;#x2F;www&amp;#x2F;logs&amp;#x2F;https-access.log.3.gz
    ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One funny situation in which &lt;code&gt;lnav&lt;&#x2F;code&gt; helped me is calculating how much time I&#x27;ve spent on a project. I had to look at the git history because I forgot to note down the time spent on the project. No, I&#x27;m too lazy to use time-tracking applications :-)&lt;&#x2F;p&gt;
&lt;p&gt;So, what I did is extracting my commits with a custom &lt;code&gt;git log&lt;&#x2F;code&gt; command (thanks Stack Overflow):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log \
    --pretty=format:&amp;#x27;%C(yellow)%h%x09%Creset%C(cyan)%C(bold)%ad%Creset  %C(green)%Creset %s&amp;#x27; \
    --date=short \
    --reverse \
    --author=me
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the result is something like this (I don&#x27;t have colours on my shell, but you probably do ^_^):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;9bda78ba2       2019-08-02   Lorem ipsum dolor sit amet
54fbd2cc5       2019-08-02   consectetur adipiscing elit, sed do
3e515d1ed       2019-08-02   eiusmod tempor incididunt ut labore
7f0e86e5b       2019-08-03   et dolore magna aliqua. Ut enim ad minim veniam
ef65b99c1       2019-08-05   quis nostrud exercitation ullamco
d55f249d8       2019-08-05   laboris nisi ut aliquip ex ea commodo
5c3bb1010       2019-08-06   consequat. Duis aute irure dolor in reprehenderit
3a2118cec       2019-08-06   in voluptate velit esse cillum dolore
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then simply passed this to &lt;code&gt;lnav&lt;&#x2F;code&gt;, pressed &lt;code&gt;i&lt;&#x2F;code&gt; to see an histogram grouped by date, then pressed &lt;code&gt;z&#x2F;Z&lt;&#x2F;code&gt; to zoom in&#x2F;out to get to see the actual days. Example of the output:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;lnav_group_by.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;It took me two days to write this invoice, but I&#x27;ve learned a lot in the process :-D&lt;&#x2F;p&gt;
&lt;p&gt;One final note: as of January 2020 the latest v0.8.5 release does not work under Wayland. I had to checkout the v0.8.6 alpha branch and compile it.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>2020: new year resolution</title>
        <published>2020-01-20T00:00:00+00:00</published>
        <updated>2020-01-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/new-year-resolution/" type="text/html"/>
        <id>https://apiraino.github.io/new-year-resolution/</id>
        <content type="html">&lt;p&gt;I wrote &lt;a href=&quot;&#x2F;2019&#x2F;11&#x2F;04&#x2F;call-for-2020-roadmap.html&quot;&gt;my wishlist for Rust&lt;&#x2F;a&gt;, so I can write one for me, too.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Rust 2020: more code, less talk&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Drop X11&#x2F;i3 and switch to Wayland&#x2F;SwayWM&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Any reimbursement I will receive (up to 50 eur) will go directly either to the FSFE, the EFF, Wikimedia or similar organization working on raising awareness on privacy, censorship issues and free&#x2F;libre software. Or to a FOSS project.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I will not write a &amp;quot;smiley emoji&amp;quot; if I don&#x27;t mean it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This should be doable.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Wayland: worth a try?</title>
        <published>2020-01-13T00:00:00+00:00</published>
        <updated>2020-01-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/wayland/" type="text/html"/>
        <id>https://apiraino.github.io/wayland/</id>
        <content type="html">&lt;p&gt;After watching a talk about the &lt;a href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;36c3-87-x11-and-wayland-a-tale-of-two-implementations&quot;&gt;Hikari window manager&lt;&#x2F;a&gt;, I was slightly horrified by how Wayland have been released since 10 years and still X11 is everywhere. So I decided to try it and see why.&lt;&#x2F;p&gt;
&lt;p&gt;The summary is: if you use Gnome (maybe also KDE through KWin?), Wayland may be usable for the average user. On the other hand, if you use a more niche window manager, it will be more fun :-)&lt;&#x2F;p&gt;
&lt;p&gt;An important limitation about Wayland: screen sharing applications (conferencing and WebRTC apps webapps) seems to not work well at this time (and this is &lt;a href=&quot;https:&#x2F;&#x2F;www.swalladge.net&#x2F;archives&#x2F;2019&#x2F;10&#x2F;14&#x2F;are-we-wayland-yet#not-so-great&quot;&gt;a dealbreaker&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;anthony.som.codes&#x2F;blog&#x2F;2020-01-28-screen-sharing-on-linux&#x2F;&quot;&gt;for many&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;As of July 2020 there seems to be Pipewire being able solve the issue, &lt;a href=&quot;https:&#x2F;&#x2F;superuser.com&#x2F;a&#x2F;1572441&quot;&gt;at least on Fedora 32&lt;&#x2F;a&gt;. Or there are ugly workarounds using &lt;a href=&quot;https:&#x2F;&#x2F;superuser.com&#x2F;a&#x2F;1560749&quot;&gt;wf-recorder&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This said, a lot of X11 applications will work under Wayland because of some magic provided by &lt;a href=&quot;https:&#x2F;&#x2F;wayland.freedesktop.org&#x2F;xserver.html&quot;&gt;Xwayland&lt;&#x2F;a&gt;, an X11 client that forwards all Wayland events to X11 seamlessly; in the end this means that you can stay on a mixed X11&#x2F;Wayland desktop and migrate at your own pace (or - more likely - at the pace of development of applications you need to support Wayland).&lt;&#x2F;p&gt;
&lt;p&gt;So, on a recent Ubuntu 19.x, I simply had to logout and login again using Gnome&#x2F;Wayland. Done. Enjoy Wayland and find what&#x27;s not working.&lt;&#x2F;p&gt;
&lt;p&gt;If you use another window manager, read on, here be dragons.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installing-sway&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#installing-sway&quot; aria-label=&quot;Anchor link for: installing-sway&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Installing Sway&lt;&#x2F;h3&gt;
&lt;p&gt;Under X I use &lt;a href=&quot;https:&#x2F;&#x2F;i3wm.org&quot;&gt;i3 window manager&lt;&#x2F;a&gt;, so the obvious choice was to install the &lt;a href=&quot;https:&#x2F;&#x2F;swaywm.org&#x2F;&quot;&gt;Sway window manager&lt;&#x2F;a&gt; which provides almost full compatibility with i3 config files (in my case just small adjustments). I&#x27;ve immediately noticed an annoying name clash with a Microsoft product, so search results are always a bit dirty. I am confident that the window manager will outlive the Microsoft product, so I&#x27;ll just wait :-)&lt;&#x2F;p&gt;
&lt;p&gt;Important gotcha about Sway: it won&#x27;t work with the nVIDIA proprietary drivers but will work with Nouveau, see the &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21628494&quot;&gt;Hacker news discussion&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&#x2F;wiki#nvidia-users&quot;&gt;Wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sway is a project run by a fistful of heroes, they wrote their own Wayland compositor (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;wlroots&#x2F;graphs&#x2F;contributors&quot;&gt;wlroots&lt;&#x2F;a&gt;) and other &amp;quot;utilities&amp;quot; like a wallpaper manager and all kind of ancillary stuff that you don&#x27;t even see, but it&#x27;s there and need constant maintenance.&lt;&#x2F;p&gt;
&lt;p&gt;Sway has some rough edges but the project is incredibly active (I&#x27;ll get to this in a bit) and the maintainers are quick to give feedback. These guys definitively need to be supported (I did).&lt;&#x2F;p&gt;
&lt;p&gt;So, the basic Sway configuration works fine, the fun starts when you need to customize and add features.&lt;&#x2F;p&gt;
&lt;p&gt;Some sparse tips:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To see if an application is running under XWayland, use &lt;code&gt;xeyes&lt;&#x2F;code&gt; and hover over the application. If the eyes follow your cursor, that&#x27;s a X11 application running through Xwayland.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add these env variables for toolkits and applications to make them run on Wayland:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GTK: &lt;code&gt;GDK_BACKEND=wayland&lt;&#x2F;code&gt; (but &lt;a href=&quot;https:&#x2F;&#x2F;mastransky.wordpress.com&#x2F;2020&#x2F;03&#x2F;16&#x2F;wayland-x11-how-to-run-firefox-in-mixed-environment&quot;&gt;not on Firefox&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Qt: &lt;code&gt;QT_QPA_PLATFORM=wayland-egl&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Clutter: &lt;code&gt;CLUTTER_BACKEND=wayland&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;SDL: &lt;code&gt;SDL_VIDEODRIVER=wayland&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Setting these variables &lt;em&gt;seems&lt;&#x2F;em&gt; to make Firefox and Thunderbird less stable and prone to crashes (TODO: investigate).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Check if we are running Wayland&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ echo $XDG_SESSION_TYPE
wayland
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getting-to-the-edge&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-to-the-edge&quot; aria-label=&quot;Anchor link for: getting-to-the-edge&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Getting to the edge&lt;&#x2F;h3&gt;
&lt;p&gt;Sway is a project run by a small number of volunteers, the main focus is the Arch Linux distribution (btw); this means that all the tools and components are packaged for other distributions (Debian, Ubuntu, etc.) by other volunteers. Given the pace of development of these tools, it&#x27;s easy to run into issues because you have installed an &amp;quot;old&amp;quot; version of something (&amp;quot;old&amp;quot; being a couple of months before).&lt;&#x2F;p&gt;
&lt;p&gt;This is why I&#x27;ve decided to prepare a workflow to compile myself everything from the latest git stable tags. It&#x27;s a work in progress and since I don&#x27;t want to pollute my workstation with a lot of development packages, I&#x27;m experimenting with a &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;apiraino&#x2F;262dc499ceeed7003bf83b6ecd9c9591&quot;&gt;Docker container&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;openbuildservice.org&quot;&gt;OpenSUSE packaging service&lt;&#x2F;a&gt; (there are already Sway build there that I can probably use as guidance). I will update this article when I&#x27;ll have figured something.&lt;&#x2F;p&gt;
&lt;p&gt;If you are reading this and have suggestions, please let me know ;-)&lt;&#x2F;p&gt;
&lt;p&gt;UPDATE: I kind of found my way through a Docker container solution. &lt;a href=&quot;&#x2F;2020&#x2F;01&#x2F;28&#x2F;sway-from-sources.html&quot;&gt;Read here&lt;&#x2F;a&gt; for more info. Using the build service from openSUSE is still not understood.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;replacements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#replacements&quot; aria-label=&quot;Anchor link for: replacements&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Replacements&lt;&#x2F;h3&gt;
&lt;p&gt;Besides rewriting parts of my &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;apiraino&#x2F;dotfiles&#x2F;tree&#x2F;master&#x2F;i3&quot;&gt;i3 scripts&lt;&#x2F;a&gt; to adjust them for Wayland, I&#x27;d like to replace my current X11 applications and utilities with &amp;quot;native&amp;quot; ones to see how far I can go. Here&#x27;s a list I will keep updated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xclip&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bugaevc&#x2F;wl-clipboard&quot;&gt;wl-clipboard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dmenu&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nyyManni&#x2F;dmenu-wayland&quot;&gt;dmenu-wayland&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mpv&lt;&#x2F;code&gt;: works fine&lt;&#x2F;li&gt;
&lt;li&gt;Firefox&#x2F;Thunderbird: the porting to Wayland is in progress, there are some rough edges. Can be used under Xwayland. Or pure Wayland setting &lt;code&gt;MOZ_DBUS_REMOTE=1&lt;&#x2F;code&gt; and &lt;code&gt;MOZ_ENABLE_WAYLAND=1&lt;&#x2F;code&gt;. There is a &lt;code&gt;firefox-wayland&lt;&#x2F;code&gt; package but reports do not indicate to work very well. &lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.mozilla.org&#x2F;show_bug.cgi?id=635134&quot;&gt;Tracking issue&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dmenu&lt;&#x2F;code&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nyyManni&#x2F;dmenu-wayland&quot;&gt;dmenu-wl&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;py3status&lt;&#x2F;code&gt; (a better status bar for i3): &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Alexays&#x2F;Waybar&quot;&gt;swaybar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Initiatives&#x2F;Wayland&#x2F;Applications&quot;&gt;Gnome application Wayland support&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blueman-amanager&lt;&#x2F;code&gt;: supports Wayland&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nm-applet&lt;&#x2F;code&gt;: supports Wayland (but broken: workaround is to force X11 backend, e.g. &lt;code&gt;GDK_BACKEND=X11 nm-applet --indicator&lt;&#x2F;code&gt;)&lt;br&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt;: fixed in v1.8.24&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gnome-terminal&lt;&#x2F;code&gt;: supports Wayland&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gnome-screenshot&lt;&#x2F;code&gt;: broken&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.password-store.org&#x2F;&quot;&gt;password-store&lt;&#x2F;a&gt; uses &lt;code&gt;xclip&lt;&#x2F;code&gt; to copy passwords in the clipboard. Wayland support has been merged but not yet released (as of January 2020). Need to check out the &lt;a href=&quot;https:&#x2F;&#x2F;git.zx2c4.com&#x2F;password-store&quot;&gt;master branch&lt;&#x2F;a&gt;. Install with &lt;code&gt;PREFIX=~&#x2F;.local make install&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;open-issues&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-issues&quot; aria-label=&quot;Anchor link for: open-issues&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Open issues&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;Cannot copy and paste anymore to and from Emacs: the issue is with the &lt;code&gt;xclip.el&lt;&#x2F;code&gt; package, it does not use correctly wl-clipboard. Opened a &lt;a href=&quot;https:&#x2F;&#x2F;debbugs.gnu.org&#x2F;cgi&#x2F;bugreport.cgi?bug=39103&quot;&gt;bug report&lt;&#x2F;a&gt;.&lt;&#x2F;del&gt; SOLVED by updating to &lt;code&gt;wl-clipboard&lt;&#x2F;code&gt; 2.0&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;del&gt;&lt;code&gt;wl-clipboard&lt;&#x2F;code&gt; shows weird visual artifacts, (also reflects when using in Emacs with &lt;code&gt;xclip.el&lt;&#x2F;code&gt;, appends &lt;code&gt;^M&lt;&#x2F;code&gt; whitespaces).&lt;&#x2F;del&gt; SOLVED by updating to &lt;code&gt;wl-clipboard&lt;&#x2F;code&gt; 2.0&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Firefox: sporadic UI blocks&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;code&gt;dunst&lt;&#x2F;code&gt; problem&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;screen lock (on lid close) sometimes doesn&#x27;t work (screen is not locked before sleep mode)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes the WiFi network is disconnected&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sway sporadic crashes (esp. when reloading the configuration) and I am taken to the login.&lt;&#x2F;p&gt;
&lt;p&gt;TODO: investigate these errors (if related):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Jan 16 08:33:02 localhost xdg-desktop-por[2998]: Failed to get application states: GDBus.Error:org.freedesktop.portal.Error.Failed: Could not get window list: Cannot invoke method; proxy is for the well-known name org.gnome.Shell without an owner, and proxy was constructed with the G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START flag

Jan 31 13:21:25 localhost xdg-desktop-por[2225]: Failed to get application states: GDBus.Error:org.freedesktop.portal.Error.Failed: Could not get window list: Cannot invoke method; proxy is for the well-known name org.gnome.Shell without an owner, and proxy was constructed with the G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START flag
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nm-applet&lt;&#x2F;code&gt; crashes when getting connection information, &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;GNOME&#x2F;network-manager-applet&#x2F;issues&#x2F;64&quot;&gt;issue&lt;&#x2F;a&gt;.&lt;br&gt;&lt;strong&gt;UPDATE&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;GNOME&#x2F;network-manager-applet&#x2F;blob&#x2F;58946f0f5c1f84ae4136e6d417870572bfd45cd5&#x2F;NEWS&quot;&gt;fixed in v1.8.24&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gnome-terminal&lt;&#x2F;code&gt; cannot open web links (from the &amp;quot;Open Link&amp;quot; shortcut), sometimes crashes when I try too hard :-)&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Jan 24 13:17:47 localhost gnome-terminal-server[27398]: Error: no DISPLAY environment variable specified
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;DBus notifications daemon (&lt;code&gt;dunst&lt;&#x2F;code&gt;) block Thunderbird for some seconds until all mailbox have been checked. Possibly other applications, too.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Feb 20 10:37:21 valkyrie systemd[1672]: Starting Dunst notification daemon...
Feb 20 10:37:21 valkyrie dunst[5577]: CRITICAL: Cannot open X11 display.
Feb 20 10:37:21 valkyrie systemd[1672]: dunst.service: Main process exited, code=exited, status=1&amp;#x2F;FAILURE
Feb 20 10:37:21 valkyrie systemd[1672]: dunst.service: Failed with result &amp;#x27;exit-code&amp;#x27;.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Solution: replace &lt;code&gt;dunst&lt;&#x2F;code&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emersion&#x2F;mako&quot;&gt;mako&lt;&#x2F;a&gt;, see this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dunst-project&#x2F;dunst&#x2F;issues&#x2F;264#issuecomment-435626530&quot;&gt;issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Tried to manually run &lt;code&gt;dunst -verbosity debug&lt;&#x2F;code&gt; and notifications seem to work.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Polkit manager does not start or is broken. This is reflected in subtle errors on running stuff that require root permissions and just breaks, example Installing Virtualbox extension pack:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-4.1.8-75467.vbox-extpack
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Workaround: install with &lt;code&gt;sudo&lt;&#x2F;code&gt;. Need to find a way to start Polkit. Traces &lt;a href=&quot;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;ticket&#x2F;8473#comment:7&quot;&gt;here&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&#x2F;wiki#im-not-using-logind-but-still-want-dbuspolkitpower-management-to-work&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&#x2F;issues&#x2F;4492#issuecomment-530710387&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;resources&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#resources&quot; aria-label=&quot;Anchor link for: resources&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Resources&lt;&#x2F;h3&gt;
&lt;p&gt;https:&#x2F;&#x2F;forum.manjaro.org&#x2F;t&#x2F;tale-of-the-young-boy-who-migrates-from-i3-to-sway&#x2F;59618&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;swaywm&#x2F;sway&#x2F;wiki#configuration&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;gist.github.com&#x2F;toger5&#x2F;3a509d9a9d7ebba1e02205b00449ccff&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;swaywm&#x2F;comments&#x2F;eg0efb&#x2F;what_components_do_i_need_to_assemble_a_complete&#x2F;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Rust 2020: Discoverability</title>
        <published>2019-11-04T00:00:00+00:00</published>
        <updated>2019-11-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/call-for-2020-roadmap/" type="text/html"/>
        <id>https://apiraino.github.io/call-for-2020-roadmap/</id>
        <content type="html">&lt;p&gt;Here we come with the &amp;quot;Request for Comment&amp;quot; about Rust for the next 2020 year. I&#x27;m sure 2020 will be a great year, also because it&#x27;s easy and fast to write :) My wishlist will be short and to the point.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back to what I wished for &lt;a href=&quot;&#x2F;call-for-2019-roadmap&quot;&gt;2019&lt;&#x2F;a&gt; I&#x27;d like first to see what has changed, from my point of view:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We now (almost) have async&#x2F;await&lt;&#x2F;li&gt;
&lt;li&gt;I didn&#x27;t see significant steps towards building a common ground, a &amp;quot;foundation&amp;quot; for Rust to manage community funding and developing initiatives. We can do better on this, in my opinion.&lt;&#x2F;li&gt;
&lt;li&gt;We have a couple of &amp;quot;big names&amp;quot; showing official interest in the Rust language. This is great and will lead to interesting developments and could help spinning the wheel faster. But it will also complicate things. Big names want to be assured that the Rust backbone is strong and firmly managed. Are we ready for this?&lt;&#x2F;li&gt;
&lt;li&gt;I have landed in 2019 my first Rust job, it&#x27;s a great achievement for me and for the community (like I wrote: &amp;quot;every developer that is being paid to do Rust development is a win for the ecosystem.&amp;quot;) and I am extremely grateful to the people mentoring and helping me in this journey.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, what would be my wishlist for 2020?&lt;&#x2F;p&gt;
&lt;p&gt;I can only reiterate how important these points are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Release crates with decent documentation and examples&lt;&#x2F;strong&gt;: if you want people to enjoy using your crate, discoverability is at least equally important as the code itself. The &lt;code&gt;README&lt;&#x2F;code&gt; file is the frontline of your crate. Make it shine, make it clear, have people understand at a glance what it&#x27;s about. Don&#x27;t give for granted that everyone knows what you know. There&#x27;s no reason to be dismissive towards your audience; be humble and upfront on what the crate does, its current status and your plans. If it&#x27;s an experiment, be upfront about that.&lt;&#x2F;p&gt;
&lt;p&gt;Would you buy a book with no table of contents or a brief summary on the story on the cover?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t like a crate? Open a PR. Open an issue. Add or improve documentation. Add or improve the examples.&lt;&#x2F;strong&gt; If every crate user contributed a small documentation&#x2F;example PR, the whole Rust ecosystem would be so much better and discoverable than it is now.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are many people working hard to give us some wonderful tooling, many of them working in the shadow because they have not a &amp;quot;stage-persona&amp;quot; on social media. Do something for them, acknowledge their work, help and improve where you can. Do we want a really inclusive community? Lets&#x27; don&#x27;t forget about them and acknowledge their work. Even a simple &amp;quot;thank you&amp;quot; is important.&lt;&#x2F;p&gt;
&lt;p&gt;I read this list again and I see that a single point still stands: the Rust language and its ecosystem are already so rich that I wouldn&#x27;t know what else to ask besides being a bit more polished and stable. Therefore I turn the question to: ask yourself what &lt;strong&gt;you&lt;&#x2F;strong&gt; can do for the Rust community and its ecosystem, rather what Rust can do for you.&lt;&#x2F;p&gt;
&lt;p&gt;Because asking is nice, but asking after you&#x27;ve concretely done something is even better.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>XML parsing in Rust</title>
        <published>2019-10-25T00:00:00+00:00</published>
        <updated>2019-10-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/xml-parsing/" type="text/html"/>
        <id>https://apiraino.github.io/xml-parsing/</id>
        <content type="html">&lt;p&gt;Did I think that XML was dead? Well, I was wrong: it isn&#x27;t. XML is here to stay with us forever. Let&#x27;s see how I parsed some XML with Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The library that seems the right tool for the job is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RReverser&#x2F;serde-xml-rs&quot;&gt;serde-xml-rs&lt;&#x2F;a&gt;. Like the name suggests, it will parse an XML file and leverage Serde for the serialization.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say we have this file (examples from the crate&#x27;s documentation).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;Project name=&amp;quot;my_project&amp;quot;&amp;gt;
    &amp;lt;Item name=&amp;quot;hello&amp;quot; source=&amp;quot;world.rs&amp;quot; &amp;#x2F;&amp;gt;
&amp;lt;&amp;#x2F;Project&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s parse it using an XML library that leverages serde into our own Struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Debug, Deserialize)]
struct Project {
    pub name: String,
    #[serde(rename = &amp;quot;Item&amp;quot;, default)]
    pub items: Vec&amp;lt;Item&amp;gt;,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basic usage, load the whole XML file in memory and parse it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let s = &amp;quot;project.xml&amp;quot;;
let f = File::open(s).expect(&amp;amp;format!(&amp;quot;Cannot open file {}&amp;quot;, s));
let r = BufReader::new(f);
let prj: Project = serde_xml_rs::de::from_reader(r).unwrap();
println!(&amp;quot;{:?}&amp;quot;, prj);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: like noted in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;io&#x2F;struct.BufReader.html&quot;&gt;Rust documentation&lt;&#x2F;a&gt;, in this specific case using a buffered reader (&lt;code&gt;std::io::BufReader&lt;&#x2F;code&gt;) does not offer significant advantages.&lt;&#x2F;p&gt;
&lt;p&gt;The output will be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo run
....
Project { name: &amp;quot;my_project&amp;quot;, items: [Item { name: &amp;quot;hello&amp;quot;, source: &amp;quot;world.rs&amp;quot; }] }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my case I had a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.12.33&#x2F;hyper&#x2F;struct.Body.html&quot;&gt;chunked body response&lt;&#x2F;a&gt; received from a Hyper Future so I need to jump through more hoops (I suspect I can improve on this).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use serde_xml_rs::from_reader;

&amp;#x2F;&amp;#x2F; Hyper::Chunk -&amp;gt; Bytes -&amp;gt; &amp;amp;str
let b = body.into_bytes();
let xml_str = str::from_utf8(&amp;amp;b).unwrap();

&amp;#x2F;&amp;#x2F; deserialize the slice into a Project
let project: Project = serde_xml_rs::from_str(xml_str).unwrap();
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, parsing with serde sometimes is boring. When the parsing fails error messages are not always useful.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s add &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;path-to-error&quot;&gt;Serde path to error&lt;&#x2F;a&gt; to the recipe: a crate that tries to point you where exactly the parsing fails.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;...

&amp;#x2F;&amp;#x2F; create an instance of the deserializer suitable for serde_path_to_error
let jd = &amp;amp;mut serde_xml_rs::de::Deserializer::new(r);
let result: Result&amp;lt;Project, _&amp;gt; = serde_path_to_error::deserialize(jd);
if let Err(err) = result {
    let path = err.path().to_string();
    panic!(&amp;quot;Could not deserialize at: {}&amp;quot;, path);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So the final result would look like something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let s = &amp;quot;project.xml&amp;quot;;
let f = File::open(s).expect(&amp;amp;format!(&amp;quot;Cannot open file {}&amp;quot;, s));
let r = BufReader::new(f);
let jd = &amp;amp;mut serde_xml_rs::de::Deserializer::new_from_reader(r);
let result: Result&amp;lt;Project, _&amp;gt; = serde_path_to_error::deserialize(jd);
assert_eq!(result.is_ok());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Warning: &lt;code&gt;serde_xml&lt;&#x2F;code&gt; has some limitations. For example one thing that bit me is that it does not parse &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RReverser&#x2F;serde-xml-rs&#x2F;issues&#x2F;64&quot;&gt;XML tags with namespaces&lt;&#x2F;a&gt;. That could be a serious limitation in some contexts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;closing-thoughts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closing-thoughts&quot; aria-label=&quot;Anchor link for: closing-thoughts&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Closing thoughts&lt;&#x2F;h3&gt;
&lt;p&gt;Parsing XML is ugly because XML tried (and failed) to conquer the world. So it has been filled with all kind of extensions and shit.&lt;&#x2F;p&gt;
&lt;p&gt;I wouldn&#x27;t say that Rust is the ideal tool for parsing XML, other languages (and libraries) can run circles around this tool I&#x27;ve tried, but what I gain here is an implicit and strict type-checking of the XML parsed.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, after playing a bit with all this, I just dumped everything and used the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;rss&#x2F;1.8.0&#x2F;rss&quot;&gt;rss&lt;&#x2F;a&gt; crate, since all I had to do was parsing a RSS feed (lol).&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Rust Generics</title>
        <published>2019-10-21T00:00:00+00:00</published>
        <updated>2019-10-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/generics/" type="text/html"/>
        <id>https://apiraino.github.io/generics/</id>
        <content type="html">&lt;p&gt;Today I&#x27;ve learned a little about refactoring code using Generics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;don-t-fix-what-ain-t-broken&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#don-t-fix-what-ain-t-broken&quot; aria-label=&quot;Anchor link for: don-t-fix-what-ain-t-broken&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
(Don&#x27;t) fix what ain&#x27;t broken&lt;&#x2F;h3&gt;
&lt;p&gt;I had &lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;2019&#x2F;08&#x2F;13&#x2F;rust-getting-into-iterators.html&quot;&gt;some code&lt;&#x2F;a&gt; that worked well. Let&#x27;s recap step by step the main points.&lt;&#x2F;p&gt;
&lt;p&gt;I have a Trait with a &lt;code&gt;extract_data()&lt;&#x2F;code&gt; method. This method does nothing :-) I also have two structs for different kind of data:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;trait CommonBehaviourTrait {
    fn extract_data(&amp;amp;self) {
        debug!(&amp;quot;Default empty implementation&amp;quot;);
    }
}

struct AgencyStruct {
    location: String
}

struct MemberStruct {
    name: String
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m implementing the &lt;code&gt;extract_data()&lt;&#x2F;code&gt; method for both structs. The actual work done depends on the struct. We see that the &lt;code&gt;mapper()&lt;&#x2F;code&gt; function comes from different modules. While the name of the function is the same, the implementation might be different.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl CommonBehaviourTrait for Vec&amp;lt;AgencyStruct&amp;gt; {
    fn extract_data(&amp;amp;self) {
        agency_utils::mapper(self);
    }
}

impl CommonBehaviourTrait for Vec&amp;lt;MemberStruct&amp;gt; {
    fn extract_data(&amp;amp;self) {
        member_utils::mapper(self);
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see what &lt;code&gt;mapper()&lt;&#x2F;code&gt; does for &lt;code&gt;AgencyStruct&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn mapper&amp;lt;&amp;#x27;a, I&amp;gt;(src: I) -&amp;gt; impl Iterator&amp;lt;Item = CommonStruct&amp;gt; + &amp;#x27;a
where
    I: IntoIterator&amp;lt;Item = &amp;amp;&amp;#x27;a AgencyStruct&amp;gt;,
    &amp;lt;I as std::iter::IntoIterator&amp;gt;::IntoIter: &amp;#x27;a,
{
    src.into_iter().map(|list_item| {
        let res = CommonStruct::try_from(list_item)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which reads as: this function take an object &lt;code&gt;I&lt;&#x2F;code&gt;, an iterator (&lt;code&gt;IntoIter&lt;&#x2F;code&gt;, i.e. a trait that implements the &lt;code&gt;Iterator&lt;&#x2F;code&gt; itself) of &lt;code&gt;AgencyStruct&lt;&#x2F;code&gt; with an attached lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;. The lifetime is valid for all items inside the iteration plus the iterator itself. The body of the function iterates &lt;code&gt;src&lt;&#x2F;code&gt; and remap the content to &lt;code&gt;CommonStruct&lt;&#x2F;code&gt; (a data structure that remaps different things to the same content). The function returns another iterator, this time of our &lt;code&gt;CommonStruct&lt;&#x2F;code&gt; type. The same lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is attached to the returning value.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;try_from&lt;&#x2F;code&gt; invoked there takes the reference to &lt;code&gt;AgencyStruct&lt;&#x2F;code&gt; and returns a new instance of &lt;code&gt;CommonStruct&lt;&#x2F;code&gt; (or an &lt;code&gt;ItemCreationError&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl TryFrom&amp;lt;&amp;amp;AgencyStruct&amp;gt; for CommonStruct {
    type Error = ItemCreationError;

    fn try_from(src: &amp;amp;Agencystruct) -&amp;gt; Result&amp;lt;Self, Self::Error&amp;gt; {
        CommonStruct {
            data: src.location
        }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I was so proud of this code (written with heavy guidance on how to use iterators and the &lt;code&gt;where&lt;&#x2F;code&gt; clause), but a friend of mine decided to break my application with an innocent remark: &amp;quot;why don&#x27;t we make a generic implementation?&amp;quot;. And he is right, there is a lot of boilerplate here!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, let&#x27;s try a refactor.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;generics-at-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#generics-at-work&quot; aria-label=&quot;Anchor link for: generics-at-work&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Generics at work&lt;&#x2F;h3&gt;
&lt;p&gt;First thing, we want to replace the specific type &lt;code&gt;AgencyStruct&#x2F;MemberStruct&lt;&#x2F;code&gt; stuff with a generic type &lt;code&gt;T&lt;&#x2F;code&gt;, to be able to pass anything to the function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt; pub trait CommonBehaviourTrait {
    fn extract_data(self)
    where
        Self: std::marker::Sized,
    {
         debug!(&amp;quot;Default implementation of CommonBehaviourTrait&amp;quot;);
     }
}

impl&amp;lt;T&amp;gt; CommonBehaviourTrait for Vec&amp;lt;T&amp;gt;
where
    T: TryInto&amp;lt;CommonStruct, Error = ItemCreationError&amp;gt; + Sized,
{
    fn extract_data(self) {
         let expimp_data = mapper(self);
     }
 }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this I could remove all the specific implementations of the Trait. Notable changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Changing &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; to &lt;code&gt;self&lt;&#x2F;code&gt; means that now the compiler needs to know that the object passed is &lt;code&gt;Sized&lt;&#x2F;code&gt;: a reference has a known compile-time size, but a copy of an object doens&#x27;t.&lt;&#x2F;li&gt;
&lt;li&gt;The new &lt;code&gt;TryInto&lt;&#x2F;code&gt; says: &amp;quot;&lt;code&gt;T&lt;&#x2F;code&gt; must be anything that can be turned into a &lt;code&gt;CommonStruct&lt;&#x2F;code&gt; (or returns an &lt;code&gt;ItemCreationError&lt;&#x2F;code&gt;) and that you know the size at compile-time (&lt;code&gt;Sized&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;mapper()&lt;&#x2F;code&gt; function is then refactored as follows. Let&#x27;s the diff for clarity:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;+pub fn mapper&amp;lt;I, T&amp;gt;(src: I) -&amp;gt; impl Iterator&amp;lt;Item = CommonStruct&amp;gt;
 where
-    I: IntoIterator&amp;lt;Item = &amp;amp;&amp;#x27;a MyStuff&amp;gt;,
-    &amp;lt;I as std::iter::IntoIterator&amp;gt;::IntoIter: &amp;#x27;a,
+    I: IntoIterator&amp;lt;Item = T&amp;gt;,
+    T: TryInto&amp;lt;CommonStruct, Error = ItemCreationError&amp;gt; + Sized,
 {
     src.into_iter().map(|course| {
-        let res = CommonStruct::try_from(course);
+        let res = course.try_into();
         match res {
             ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;ve removed the lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; from &lt;code&gt;src&lt;&#x2F;code&gt;, now we are not passing a reference anymore&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;I&lt;&#x2F;code&gt; is now a &lt;code&gt;T&lt;&#x2F;code&gt; generic parameter&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;T&lt;&#x2F;code&gt; generic parameter is defined as we described a moment ago (an object that implements a TryInto etc. etc.).&lt;&#x2F;li&gt;
&lt;li&gt;Since &lt;code&gt;src&lt;&#x2F;code&gt; iterator implements &lt;code&gt;TryInto&lt;&#x2F;code&gt;, now we can also call its items with &lt;code&gt;.try_into()&lt;&#x2F;code&gt; (not sure if this was needed).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;closing-notes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#closing-notes&quot; aria-label=&quot;Anchor link for: closing-notes&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Closing notes&lt;&#x2F;h3&gt;
&lt;p&gt;This is how the &lt;code&gt;TryFrom&lt;&#x2F;code&gt; I was using before is defined.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.TryFrom.html&quot;&gt;Rust book&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;convert.rs.html#482&quot;&gt;source&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub trait TryFrom&amp;lt;T&amp;gt;: Sized {
    &amp;#x2F;&amp;#x2F;&amp;#x2F; The type returned in the event of a conversion error.
    type Error;

    &amp;#x2F;&amp;#x2F;&amp;#x2F; Performs the conversion.
    fn try_from(value: T) -&amp;gt; Result&amp;lt;Self, Self::Error&amp;gt;;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how the &lt;code&gt;TryInto&lt;&#x2F;code&gt; is defined.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.TryInto.html&quot;&gt;Rust book&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;convert.rs.html#557-564&quot;&gt;sources&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;impl&amp;lt;SpecificType, CommonStruct&amp;gt; TryInto&amp;lt;CommonStruct&amp;gt; for Specifictype&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl&amp;lt;T, U&amp;gt; TryInto&amp;lt;U&amp;gt; for T where U: TryFrom&amp;lt;T&amp;gt;
{
    type Error = U::Error;

    fn try_into(self) -&amp;gt; Result&amp;lt;U, U::Error&amp;gt; {
        U::try_from(self)
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a tricky part in &lt;code&gt;TryInto&lt;&#x2F;code&gt; that got us lose some time; we were confused by the ordering of &lt;code&gt;U&lt;&#x2F;code&gt; and &lt;code&gt;T&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another comment that I received looking at the refactored code is: you could have done that more easily with a macro, instead of getting crazy with that &lt;code&gt;where&lt;&#x2F;code&gt; clauses.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;tglman&quot;&gt;@tglman&lt;&#x2F;a&gt; for causing all this trouble :-) and patiently teach me something really cool!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The mandatory article about customizing i3</title>
        <published>2019-09-17T00:00:00+00:00</published>
        <updated>2019-09-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/customizing-i3/" type="text/html"/>
        <id>https://apiraino.github.io/customizing-i3/</id>
        <content type="html">&lt;p&gt;A couple of bookmarks I&#x27;m leaving here for websites used to customize i3.&lt;&#x2F;p&gt;
&lt;p&gt;My dotfiles are &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;apiraino&#x2F;dotfiles&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;i3-gaps&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#i3-gaps&quot; aria-label=&quot;Anchor link for: i3-gaps&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
i3-gaps&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thomashunter.name&#x2F;i3-configurator&quot;&gt;thomashunter.name&#x2F;i3-configurator&lt;&#x2F;a&gt; (generate i3 color schemes)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;paletton.com&quot;&gt;paletton.com&lt;&#x2F;a&gt; (generate color palette)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;terminal.sexy&quot;&gt;terminal.sexy&lt;&#x2F;a&gt; (generate i3 color schemes, but using &lt;code&gt;.xinitrc&lt;&#x2F;code&gt; which makes it more portable)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LukeSmithxyz&#x2F;voidrice&quot;&gt;github.com&#x2F;LukeSmithxyz&#x2F;voidrice&lt;&#x2F;a&gt; (a guy)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wal&quot; aria-label=&quot;Anchor link for: wal&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Wal&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dylanaraps&#x2F;pywal&quot;&gt;github.com&#x2F;dylanaraps&#x2F;pywal&lt;&#x2F;a&gt; (Generate and change color-schemes on the fly. not used after all)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;compton&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#compton&quot; aria-label=&quot;Anchor link for: compton&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Compton&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;customizing-i3&#x2F;arcolinux.com&#x2F;all-information-regarding-compton-and-compton-configurator&quot;&gt;arcolinux.com&#x2F;all-information-regarding-compton-and-compton-configurator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yshui&#x2F;compton&quot;&gt;github.com&#x2F;yshui&#x2F;compton&lt;&#x2F;a&gt; (compositor manager when using i3 to have transparencies)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;compton&quot;&gt;wiki.archlinux.org&#x2F;index.php&#x2F;compton&lt;&#x2F;a&gt; (the obviously mandatory Arch wiki article)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;simple-terminal&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#simple-terminal&quot; aria-label=&quot;Anchor link for: simple-terminal&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
simple terminal&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LukeSmithxyz&#x2F;st&quot;&gt;github.com&#x2F;LukeSmithxyz&#x2F;st&lt;&#x2F;a&gt; (a minimal but unusable for me terminal)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;themes&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#themes&quot; aria-label=&quot;Anchor link for: themes&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Themes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;unixporn&#x2F;comments&#x2F;d5gmxc&#x2F;i3gaps_rainy_city&quot;&gt;www.reddit.com&#x2F;r&#x2F;unixporn&#x2F;comments&#x2F;d5gmxc&#x2F;i3gaps_rainy_city&lt;&#x2F;a&gt; (awesome i3-gaps theme)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #5: i3 window manager</title>
        <published>2019-09-09T00:00:00+00:00</published>
        <updated>2019-09-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-5/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-5/</id>
        <content type="html">&lt;p&gt;If there a piece of software that screams &lt;strong&gt;NEEERRRRRD&lt;&#x2F;strong&gt; is definitively the &lt;a href=&quot;https:&#x2F;&#x2F;i3wm.org&quot;&gt;i3 window manager&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Months ago I was using a vanilla Ubuntu with Gnome. Nothing to really complain about that, but I wanted something more snappy and that could solve the problem of having layers of overlapping windows, sometimes forcing me to &amp;quot;long sessions&amp;quot; of alt-tabbing to find the lost shell, which is very distracting when you&#x27;re deeply concentrated.&lt;&#x2F;p&gt;
&lt;p&gt;A friend of mine was proudly showing me his i3 setup, telling me all the advantages of a tiling window manager. Then I saw this weird window manager consistently  in hackerspaces, hackatons and all things starting with &amp;quot;hack-&amp;quot; so I had to try it because there could be a serious boost in productivity.&lt;&#x2F;p&gt;
&lt;p&gt;After many months of test, I can finally say that I find myself at home with &lt;code&gt;i3&lt;&#x2F;code&gt;. It&#x27;s &lt;em&gt;fast&lt;&#x2F;em&gt;, stable, well documented, flexible to an extent I couldn&#x27;t believe possible, features are added very carefully. The reason is: if &lt;code&gt;i3&lt;&#x2F;code&gt; doesn&#x27;t do it, write a script and a keybinding. Moreover, there is a big community of aficionados that wrote scripts for everything, therefore you have a good start on how to solve the most common needs (ex. volume up and down).&lt;&#x2F;p&gt;
&lt;p&gt;It has a very cool logo.&lt;&#x2F;p&gt;
&lt;p&gt;It loads in a snap, the config file makes sense and it&#x27;s very simple yet dense of information; I can apply configuration changes in the blink of an eye, I can have for all practical purposes an infinite amount of keyboard shortcuts and recently I&#x27;ve finally learned how to restore windows in their workspaces. So at startup I always load automatically my setup without manually placing windows.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;i3&lt;&#x2F;code&gt; you can effectively detach the mouse and disable the touchpad, they&#x27;re really not needed :-) although I&#x27;m not that hardcore (so I still use it, but it&#x27;s my choice).&lt;&#x2F;p&gt;
&lt;p&gt;A concession that &lt;code&gt;i3&lt;&#x2F;code&gt; graciously grant to the user is the possibility to have floating windows (ahh evil!) when it makes sense: example for applications that simply start and stay minimized in the tray-icon (for example I have the NextCloud sync agent, it would be a waste of desktop real estate).&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;i3&lt;&#x2F;code&gt; also means giving up to some comforts, which I am not yet ready, therefore I still have half-Gnome under the seat for some utilities that are not easily replaced by a non-Gnome one, example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I like Gnome Shell&lt;&#x2F;li&gt;
&lt;li&gt;The bluetooth agent (&lt;code&gt;blueman-applet&lt;&#x2F;code&gt;), limited but does the job&lt;&#x2F;li&gt;
&lt;li&gt;The network manager applet (&lt;code&gt;nm-applet&lt;&#x2F;code&gt;), small, complete and it simply works&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes I use &lt;code&gt;gnome-text-editor&lt;&#x2F;code&gt; :^)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The second disadvantage of using a tiling window manager is that applications born to be used with floating windows feels sometimes a little uncomfortable (es. Gimp); also, sometimes I see weird things when stupid websites opening popups for a PayPal payment.&lt;&#x2F;p&gt;
&lt;p&gt;The natural complement of &lt;code&gt;i3&lt;&#x2F;code&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ultrabug&#x2F;py3status&quot;&gt;py3status&lt;&#x2F;a&gt;, a python tool to manage the status bar (because &lt;code&gt;i3&lt;&#x2F;code&gt; itself is a little too barebone at that). Like &lt;code&gt;i3&lt;&#x2F;code&gt; itself it&#x27;s completely programmable through plugins, it&#x27;s well documented, has a great API and comes with a ton of scripts from the community. Using &lt;code&gt;i3&lt;&#x2F;code&gt; with &lt;code&gt;py3status&lt;&#x2F;code&gt; is like heaven for those that want to customize things to the detail. And it&#x27;s incredibly fun, it&#x27;s like playing with Lego!&lt;&#x2F;p&gt;
&lt;p&gt;Another tool that I find very useful is &lt;a href=&quot;https:&#x2F;&#x2F;tools.suckless.org&#x2F;dmenu&#x2F;&quot;&gt;dmenu&lt;&#x2F;a&gt;, a tool to directly start applications (think of using Spotlight on OSX). It replaces the application start menu of a usual window manager.&lt;&#x2F;p&gt;
&lt;p&gt;Mandatory screenshot of my boring desktop: minimal, clean and with a touch of gory, desperate sadness.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;desktop.png&quot;&gt;
    &lt;figcaption&gt;That gradient&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;You&#x27;ll find around much nicer dekstops that are really beautiful. And they&#x27;re so different one from the another that you wonder if you are looking at the same window manager. That&#x27;s the power of &lt;code&gt;i3&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>No, Github, I don&#x27;t want to explore your repositories</title>
        <published>2019-09-08T00:00:00+00:00</published>
        <updated>2019-09-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/github-no-explore-repo/" type="text/html"/>
        <id>https://apiraino.github.io/github-no-explore-repo/</id>
        <content type="html">&lt;p&gt;I always keep a pinned tab on my Github account, on the activity feed page. This page is basically a three colums layout (the classic 25%-50%-25%) and it has some serious waste of space.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t like how Github decide how to use the space here without leaving me the option to customize.&lt;&#x2F;p&gt;
&lt;p&gt;As a starter, the &amp;quot;Explore repositories&amp;quot; column on the right: not only the recommendations provided are badly pulled together (typical suggestion engines trap: just because I&#x27;ve bought a bra on your website, it doesn&#x27;t mean that from now on I&#x27;m interested in all sorts of bras) but the column also wastes an entire +1000px using only a fistful of them! Looks like that space is only waiting for some GIFs or ads :^)&lt;&#x2F;p&gt;
&lt;p&gt;In addition, the left column with &amp;quot;my repositories&amp;quot; is not interesting either. I don&#x27;t understand the sorting criteria (the most used?). Another 25% space wasted for nothing.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;github-space-wasted.png&quot;&gt;
    &lt;figcaption&gt;Unused space for GIFs&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Worse, if you shrink the page size, the left column moves to the top (while the suggestions are removed) and forces me to scroll to get useful content.&lt;&#x2F;p&gt;
&lt;p&gt;To fix all this, since it&#x27;s a simple HTML matter, I&#x27;ve installed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;violentmonkey&#x2F;violentmonkey&quot;&gt;ViolentMonkey&lt;&#x2F;a&gt;, a spin-off of the famous GreaseMonkey extension, that allows to run arbitrary code on your browser. With two lines of JavaScript I can hide the columns I don&#x27;t need.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;apiraino&#x2F;f7ac1852c230b6de9b76171520d29dc4&quot;&gt;https:&#x2F;&#x2F;gist.github.com&#x2F;apiraino&#x2F;f7ac1852c230b6de9b76171520d29dc4&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now I have a view over the activities feed without distractions.&lt;&#x2F;p&gt;
&lt;p&gt;If I shrink the page too much, Github changes CSS and goes mobile and &amp;quot;my repositories&amp;quot; appears again, so this script would need a bit more work to manage another CSS, but for now it&#x27;s ok.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>In depth with Hyper: implementing a Service</title>
        <published>2019-08-28T00:00:00+00:00</published>
        <updated>2019-08-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/hyper-service/" type="text/html"/>
        <id>https://apiraino.github.io/hyper-service/</id>
        <content type="html">&lt;p&gt;Follow-up to the previous &lt;a href=&quot;&#x2F;2019&#x2F;07&#x2F;18&#x2F;hyper.html&quot;&gt;Hyper article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Quick recap: Hyper is a high-performance HTTP async server + client that sits on the Tokio runtime and Future crate. These articles refer to Hyper &lt;code&gt;v0.12.33&lt;&#x2F;code&gt;. Despite the early release numbers, the framework seems to work well. Just expect the API to be unstable even between patch releases (!) (f.e. there was API breakage between &lt;code&gt;0.12.15&lt;&#x2F;code&gt; and &lt;code&gt;0.12.16&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementing-a-service&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementing-a-service&quot; aria-label=&quot;Anchor link for: implementing-a-service&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Implementing a &lt;code&gt;Service&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;What is a Service? It&#x27;s the basic router that handles all requests. You don&#x27;t need to know a lot about it because in general you can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.12.33&#x2F;hyper&#x2F;service&#x2F;fn.service_fn.html&quot;&gt;service_fn&lt;&#x2F;a&gt; and it will does all the job for you, see &lt;a href=&quot;&#x2F;2019&#x2F;07&#x2F;18&#x2F;hyper.html&quot;&gt;previous article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here a succint overview (from the sources) of what a &lt;code&gt;Service&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub trait Service {
    &amp;#x2F;&amp;#x2F;&amp;#x2F; The `Payload` body of the `http::Request`.
    type ReqBody: Payload;

    &amp;#x2F;&amp;#x2F;&amp;#x2F; The `Payload` body of the `http::Response`.
    type ResBody: Payload;

    &amp;#x2F;&amp;#x2F;&amp;#x2F; The error type that can occur within this `Service`.
    type Error: Into&amp;lt;Box&amp;lt;dyn StdError + Send + Sync&amp;gt;&amp;gt;;

    &amp;#x2F;&amp;#x2F;&amp;#x2F; The `Future` returned by this `Service`.
    type Future: Future&amp;lt;Item=Response&amp;lt;Self::ResBody&amp;gt;, Error=Self::Error&amp;gt;;

    &amp;#x2F;&amp;#x2F;&amp;#x2F; Returns `Ready` when the service is able to process requests.
    fn poll_ready(&amp;amp;mut self) -&amp;gt; Poll&amp;lt;(), Self::Error&amp;gt; {
        Ok(Async::Ready(()))
    }

    &amp;#x2F;&amp;#x2F;&amp;#x2F; Calls this `Service` with a request, returning a `Future` of the response.
    fn call(&amp;amp;mut self, req: Request&amp;lt;Self::ReqBody&amp;gt;) -&amp;gt; Self::Future;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But what if we want to implement our own &lt;code&gt;Service&lt;&#x2F;code&gt;? And why would we want to do this?&lt;&#x2F;p&gt;
&lt;p&gt;I think (not 100% sure, though) the answer is if you want to factor in your router additional features.&lt;&#x2F;p&gt;
&lt;p&gt;For example, some endpoints need to do some work on a database. I need a connection to a database. One can simply open a connection on every request and close it once the job is done, but that would be extremely expensive.&lt;&#x2F;p&gt;
&lt;p&gt;How about we add a pool of database connections? Each request would pick one connection from the pool, do their job and return the connection to the pool once the job is done.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-a-handle-from-a-database&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-a-handle-from-a-database&quot; aria-label=&quot;Anchor link for: getting-a-handle-from-a-database&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Getting a handle from a database&lt;&#x2F;h3&gt;
&lt;p&gt;The only good crate I know for doing database connection pooling is &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;r2d2&quot;&gt;r2d2&lt;&#x2F;a&gt;. Let&#x27;s see how we initialize the pool. Luckily this seems to be boilerplate I&#x27;ve everywhere so we&#x27;ll just copy and paste and it&#x27;ll just work.&lt;&#x2F;p&gt;
&lt;p&gt;I use Postgres so all the Diesel Traits are declined for this DB, but you can choose MySQL or SQLite3 and this code will change very little (I love Diesel). Not sure it makes sense to have a pool of Sqlite3 connections, though :-p&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use diesel::pg::PgConnection;
use diesel::r2d2::{ConnectionManager, Pool, PooledConnection};

&amp;#x2F;&amp;#x2F; This is our pooled connection
struct Conn(pub PooledConnection&amp;lt;ConnectionManager&amp;lt;PgConnection&amp;gt;&amp;gt;);

&amp;#x2F;&amp;#x2F; This is a shortcut for the Postgres pool
type PostgresPool = Pool&amp;lt;ConnectionManager&amp;lt;PgConnection&amp;gt;&amp;gt;;

&amp;#x2F;&amp;#x2F; implementing Deref will ensure we retrieve the actual DB driver
&amp;#x2F;&amp;#x2F; inside the Connection
&amp;#x2F;&amp;#x2F; see: https:&amp;#x2F;&amp;#x2F;doc.rust-lang.org&amp;#x2F;std&amp;#x2F;ops&amp;#x2F;trait.Deref.html
impl Deref for Conn {
    type Target = PgConnection;

    &amp;#x2F;&amp;#x2F; I don&amp;#x27;t understand if inlining give an actual advantage
    #[inline(always)]
    fn deref(&amp;amp;self) -&amp;gt; &amp;amp;Self::Target {
        &amp;amp;self.0
    }
}

pub struct MyBackendService {
    &amp;#x2F;&amp;#x2F; our DB connections pool
    pub db_pool: PostgresPool,
}

impl MyBackendService {

    &amp;#x2F;&amp;#x2F; This is a helper function to retrieve a connection from the pool
    pub fn get_conn(&amp;amp;self) -&amp;gt; Option&amp;lt;Conn&amp;gt; {
        match self.db_pool.get() {
            Ok(conn) =&amp;gt; {
                Some(Conn(conn))
            }
            Err(err) =&amp;gt; {
                None
            }
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s follow the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.12.33&#x2F;hyper&#x2F;service&#x2F;trait.Service.html&quot;&gt;documentation&lt;&#x2F;a&gt; and implement our Service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use hyper;
use hyper::service::Service;

&amp;#x2F;&amp;#x2F; another shortcut to manage these long Rust type declaration...
&amp;#x2F;&amp;#x2F; basically it says: a pointer to a Future which can return either a Response or an error
&amp;#x2F;&amp;#x2F; oh, and this Future is thread safe (Send)
type BoxFut = Box&amp;lt;dyn Future&amp;lt;Item = hyper::Response&amp;lt;Body&amp;gt;, Error = hyper::Error&amp;gt; + Send&amp;gt;;

impl Service for MyBackendService {
    type ReqBody = Body;
    type ResBody = Body;
    type Error = hyper::Error;
    type Future = BoxFut;

    &amp;#x2F;&amp;#x2F; Minimal request responder
    fn call(&amp;amp;mut self, request: hyper::Request&amp;lt;Self::ReqBody&amp;gt;) -&amp;gt; Self::Future {
        Box::new(
            future::ok(
                Response::builder()
                    .status(StatusCode::OK)
                    .body(Body::empty()
                ).unwrap(),
         ))
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice we need to use the &lt;code&gt;Send&lt;&#x2F;code&gt; Trait? Here are the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;send-and-sync.html&quot;&gt;docs here&lt;&#x2F;a&gt;. I don&#x27;t know how ot use it but the compiler told me so :-)&lt;&#x2F;p&gt;
&lt;p&gt;Well, now we have our service that always return a 200 to any request.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s build everything and run it. We need to adapt the code seen in the previous article:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;    let addr = ([127, 0, 0, 1], 3000).into();

    &amp;#x2F;&amp;#x2F; implement a service from a simple function
    &amp;#x2F;&amp;#x2F; let server = Server::bind(&amp;amp;addr)
    &amp;#x2F;&amp;#x2F;     .serve(|| service_fn(my_function_tralala))
    &amp;#x2F;&amp;#x2F;     .map_err(|e| eprintln!(&amp;quot;server error: {}&amp;quot;, e));

    &amp;#x2F;&amp;#x2F; reimplement using a Service
    let server = Server::bind(&amp;amp;addr)
        .serve(move || {
            let db_url = &amp;quot;postgres:&amp;#x2F;&amp;#x2F;usr:pwd@127.0.0.1&amp;#x2F;db_name&amp;quot;;
            let manager = ConnectionManager::&amp;lt;PgConnection&amp;gt;::new(db_url);
            let pool = Pool::new(manager).expect(&amp;quot;cannot create db pool&amp;quot;);
            futures::future::ok::&amp;lt;MyBackendService, hyper::Error&amp;gt;(MyBackendservice { db_pool: pool })
        })
        .map_err(|e| eprintln!(&amp;quot;server error: {}&amp;quot;, e));

    &amp;#x2F;&amp;#x2F; runs on tokio runtime
    hyper::rt::run(server);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s see how an endpoint using a DB connection would look like. Again, refer to the previous article on how routing works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl Service for MyBackendService {
    ...

    fn call(&amp;amp;mut self, request: hyper::Request&amp;lt;Self::ReqBody&amp;gt;) -&amp;gt; Self::Future {

        (&amp;amp;Method::GET, &amp;quot;&amp;#x2F;test&amp;quot;) =&amp;gt; {
            let db_conn = db_pool.get_conn().expect(&amp;quot;Failed to get DB handle&amp;quot;);
            let fut = future_that_does_a_query(&amp;amp;db_conn);
            Box::new(
                future::ok(
                    Response::builder()
                        .status(StatusCode::OK)
                        .body(Body::empty()
                    ).unwrap(),
             ))
        }

    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now when this endpoint is called the client will immediatly receive a 200 OK and our microserver has all the time to do its things. Which translates to: &amp;quot;ok, I got your task request and I&#x27;ll do it eventually, now move along and don&#x27;t stand in the queue. Next one, please!&amp;quot;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;level-up-async-db-connections&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#level-up-async-db-connections&quot; aria-label=&quot;Anchor link for: level-up-async-db-connections&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Level up: async DB connections&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, now we should have saved a lot of resources by using a connection pool.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s go to the next problem. &lt;code&gt;r2d2&lt;&#x2F;code&gt; provides a &lt;em&gt;synchronous&lt;&#x2F;em&gt; pool of connections but our microserver is &lt;em&gt;asynchronous&lt;&#x2F;em&gt;. What that means is that if we have to perform a &amp;quot;blocking&amp;quot; operation (HTTP request, DB query, read a file, anything that must stop the code waiting for something), the whole Future will be blocked until I didn&#x27;t finish reading that 100mb file!&lt;&#x2F;p&gt;
&lt;p&gt;This is where things get hairy (and not everything is really clear to me).&lt;&#x2F;p&gt;
&lt;p&gt;I searched for an &lt;em&gt;asynchronous&lt;&#x2F;em&gt; DB pool, not much choice out there at this time. I tried using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bb8&quot;&gt;bb8&lt;&#x2F;a&gt; but I wasn&#x27;t even able to compile it on a new project. I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;khuey&#x2F;bb8&#x2F;issues&#x2F;32&quot;&gt;opened an issue&lt;&#x2F;a&gt; full of questions and parked the crate for the moment.&lt;&#x2F;p&gt;
&lt;p&gt;So how can we implement a non-blocking database handling?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s jump to the &lt;a href=&quot;&#x2F;2019&#x2F;08&#x2F;29&#x2F;hyper-threadpool.html&quot;&gt;next article to find out&lt;&#x2F;a&gt;  (not ready yet, so you&#x27;ll get a 404 ^_^)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Returning from ETHBerlinZwei</title>
        <published>2019-08-26T00:00:00+00:00</published>
        <updated>2019-08-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ethberlin-zwei/" type="text/html"/>
        <id>https://apiraino.github.io/ethberlin-zwei/</id>
        <content type="html">&lt;h3 id=&quot;an-impostor-trolling-at-a-web-3-0-hackaton&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-impostor-trolling-at-a-web-3-0-hackaton&quot; aria-label=&quot;Anchor link for: an-impostor-trolling-at-a-web-3-0-hackaton&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
An impostor trolling at a &amp;quot;Web 3.0&amp;quot; hackaton&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ethberlinzwei.com&quot;&gt;ETHBerlinZwei&lt;&#x2F;a&gt; was a hackaton where different teams (from many countries) had 48h to implement something on the topic blockchain (which has the unquestionable benefit of attracting a good deal of investiments sometimes without a solid business model).&lt;&#x2F;p&gt;
&lt;p&gt;Well, I know nothing about blockchains and I&#x27;m behind schedule on a project, so I decided to apply to the hackaton and do some serious coding on my stuff. Two days with unlimited food, drinks, sleeping area and music. Where do I have to sign? :-) As a further bonus it&#x27;s always nice to be among hackers, there&#x27;s always fun stuff to learn (plus I had some friends there).&lt;&#x2F;p&gt;
&lt;p&gt;To my great surprise, my application was accepted (lol).&lt;&#x2F;p&gt;
&lt;p&gt;So the first night, while I getting &amp;quot;in the zone&amp;quot;, I received this message:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;joinus.png&quot;&gt;
    &lt;figcaption&gt;There are priorities in life&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Ok, the hackaton can wait. I closed the laptop and spent the evening with my friends :-)&lt;&#x2F;p&gt;
&lt;p&gt;The following morning I was invited to a brunch. There I&#x27;ve met some people that were anxious to explain their ideas and products revolving around the blockchain tooling. I&#x27;ve asked a lot of questions and learned the basics. Products mentioned were a card to convert bitcoins to and from real currency; a permissionless &#x2F; decentralied network to grant access to encrypted files; an advanced &lt;a href=&quot;https:&#x2F;&#x2F;alacris.io&quot;&gt;terminal for financial institutions&lt;&#x2F;a&gt; to manage any kind of transactions.&lt;&#x2F;p&gt;
&lt;p&gt;I asked about business models, the problems that the blockchain &amp;quot;stack&amp;quot; would like to solve. I&#x27;ve been given examples such as online gambling, real-estate market (transactions), video games micro-transactions, banking &#x2F; financial use-cases. In one word: transactions. Things moving fast from A to B and being distributed to multiple nodes.&lt;&#x2F;p&gt;
&lt;p&gt;That week I had attended also some meetups and talked with people developing the backbone of these transactions systems. Very interesting indeed, although sometimes I was under the impression of being in front of a solution looking for a problem to solve.&lt;&#x2F;p&gt;
&lt;p&gt;So far: not one line of code was written :-)&lt;&#x2F;p&gt;
&lt;p&gt;Around lunch I went back to the hackaton to finally get some shit done. I kept on hitting the keyboard furiously until the following morning, occasionally eating a bite and happily overdosing on caffeine. I took a quick nap before the award ceremony.&lt;&#x2F;p&gt;
&lt;p&gt;Which I didn&#x27;t attend because I was tired, so I went home to have a shower. I&#x27;ve heard that the submissions were generally not impressive, mostly because the teams had not enough time to work on their projects.&lt;&#x2F;p&gt;
&lt;p&gt;I am happy because I&#x27;ve accomplished a good deal of code for my project. I&#x27;ve also learned some stuff about &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&quot;&gt;Hyper&lt;&#x2F;a&gt; (an async client&#x2F;server library in Rust) which I&#x27;ll probably detail at a later stage.&lt;&#x2F;p&gt;
&lt;p&gt;The organization was simply amazing. During the night, volunteers filled the fridges with beverages and on the tables there were always something to eat. During the day meals were good. Having done some work in conferences I incredibly appreciate the invisible work that these people do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;At your next conference, don&#x27;t forget to stop and thank a random person that is working there.&lt;&#x2F;strong&gt; You&#x27;ll make that person happy.&lt;&#x2F;p&gt;
&lt;p&gt;I only have a small complaint: the policy about photos was not respected by many attendees. At any given time there were people taking pictures and filming without asking permission. Whatever.&lt;&#x2F;p&gt;
&lt;p&gt;Now my head hurts and I have to recover from the withdrawal of caffeine, so I&#x27;ll stop it here.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Link Cleaner +</title>
        <published>2019-08-20T00:00:00+00:00</published>
        <updated>2019-08-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/link-cleaner-plus/" type="text/html"/>
        <id>https://apiraino.github.io/link-cleaner-plus/</id>
        <content type="html">&lt;p&gt;Here it is, published: &lt;a href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;link-cleaner-plus&quot;&gt;Link Cleaner +&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Source code here: &lt;a href=&quot;hhttps:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;link_cleane&quot;&gt;Link Cleaner + on Github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a funny (and I hope useful) project I had forked and, with the help of another friend, moved a bit forward.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-link-cleaner&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-link-cleaner&quot; aria-label=&quot;Anchor link for: what-is-link-cleaner&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What is &amp;quot;Link Cleaner +&amp;quot;?&lt;&#x2F;h3&gt;
&lt;p&gt;A Firefox extension that &amp;quot;cleans URLs before opening a link, removes trackers, rewrites redirects pages such as of Amazon, Facebook, Steam, Reddit and AMP URLs&amp;quot;. As part of keeping a healthy internet browsing habit, I had discovered months ago this interesting extension (the original &lt;a href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;link-cleaner&quot;&gt;Link Cleaner&lt;&#x2F;a&gt;). The GitHub page of the project, unfortunately, is riddled with issues, features requests and pull requests left unattended. So after a while we decided to fork the project and try to pick where the project left.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a work in progress, but it was important to get out a first version and then iterate.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, let&#x27;s a look at it works (and how I&#x27;d like to see it improved).&lt;&#x2F;p&gt;
&lt;p&gt;The workflow of a browser extension is pretty much the same for Chrome and Firefox (luckily, since Firefox 57+ and WebExtensions came to the world) both APIs are pretty much the same, therefore much of the code can be shared and easily compile for both platforms.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;step-1-clean-query-params&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-1-clean-query-params&quot; aria-label=&quot;Anchor link for: step-1-clean-query-params&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Step 1: clean query params&lt;&#x2F;h3&gt;
&lt;p&gt;We first intercept the action of opening a URL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;#x2F;&amp;#x2F; Filter out utm_* query parameters
var clean_utm_req = build_query_param_remover(f_match_utm);
browser.webRequest.onBeforeRequest.addListener(
    clean_utm_req,
    {
        urls: [&amp;quot;&amp;lt;all_urls&amp;gt;&amp;quot;],
        types:[&amp;quot;main_frame&amp;quot;]
    },
    [&amp;quot;blocking&amp;quot;]
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function (shortened for clarity) cleans query params from a URL and return a clean new URL.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;#x2F;&amp;#x2F; Clean URL query params
function link_cleaner(orig_url, shouldRemove) {
    var url = new URL(orig_url);
    var ret_val = {&amp;#x27;redirectUrl&amp;#x27;: &amp;#x27;&amp;#x27;};

    if (url.search.length &amp;gt; 0) {
        var params = url.searchParams;
        var new_params = new URLSearchParams(params);
        var needs_redirect = false;
        for (let p of params.keys()) {
            if (shouldRemove(p)) {
                needs_redirect = true;
                new_params.delete(p);
            }
        }

        &amp;#x2F;&amp;#x2F; Original URL has been cleaned of nefarious query params
        &amp;#x2F;&amp;#x2F; A redirect URL has been created
        if (needs_redirect) {
            url.search = new_params.toString();
            ret_val = {redirectUrl: url.href};
        }

        &amp;#x2F;&amp;#x2F; Clean AMP url (if enabled)
        if (settings[&amp;#x27;clean_amp_links&amp;#x27;] === true) {
            var cleaned_url = clean_amp(url);
            if (cleaned_url.href !== url.href) {
                ret_val = {redirectUrl: cleaned_url.href};
            }
        }
    }
    return ret_val;
};
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function is generic enough to be applied to all URLs, example: clean all &lt;code&gt;utm_*&lt;&#x2F;code&gt; query params:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;https:&amp;#x2F;&amp;#x2F;www.domain.com&amp;#x2F;page?utm_source=mytracker
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First we create an anonymous function with a regexp to match, then we invoke a generic query param cleaner (&lt;code&gt;build_query_param_remover&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;var f_match_utm = p =&amp;gt; p.startsWith(&amp;quot;utm_&amp;quot;);

&amp;#x2F;&amp;#x2F; a generic entrypoint to invoke the real link cleaner
function build_query_param_remover(shouldRemove) {
    return function(requestDetails) {
        return link_cleaner(requestDetails.url, shouldRemove);
    };
}

var clean_utm_req = build_query_param_remover(f_match_utm);

&amp;#x2F;&amp;#x2F; This is the browser listener we sniff everytime a HTTP request is about to be performed
browser.webRequest.onBeforeRequest.addListener(
    clean_utm_req,
    {
        &amp;#x2F;&amp;#x2F; apply this rule to any URL
        urls: [&amp;quot;&amp;lt;all_urls&amp;gt;&amp;quot;],
        types:[&amp;quot;main_frame&amp;quot;]
    },
    [&amp;quot;blocking&amp;quot;]
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;step-2-clean-urls&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#step-2-clean-urls&quot; aria-label=&quot;Anchor link for: step-2-clean-urls&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Step 2: clean URLs&lt;&#x2F;h3&gt;
&lt;p&gt;When we want to sanitize the URL itself, we need custom rules for any URL we want to manage. Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# from this
https:&amp;#x2F;&amp;#x2F;www.amazon.co.uk&amp;#x2F;Crazepony-UK-Camera-Vacuum-Plastic-Crazepony&amp;#x2F;dp&amp;#x2F;B06XPCXCSH?SubscriptionId=AKIAILSHYYTFIVPWUY6Q&amp;amp;...

# into this:
https:&amp;#x2F;&amp;#x2F;www.amazon.co.uk&amp;#x2F;dp&amp;#x2F;B06XPCXCSH
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(code shortened for clarity)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;function clean_amazon(url) {
    var new_url = document.createElement(&amp;#x27;a&amp;#x27;);
    let slash_d_index = url.indexOf(&amp;quot;&amp;#x2F;d&amp;quot;);
    let slash_ref_index = url.indexOf(&amp;quot;&amp;#x2F;ref=&amp;quot;, slash_d_index + 2);
    if (slash_ref_index &amp;gt; 0 &amp;amp;&amp;amp; url.length &amp;gt; slash_ref_index + 1) {
        new_url.href = url.substring(0, slash_ref_index + 1);
    } else {
        url = new URL(url);
        if (url.search.length &amp;gt; 0) {
            url.search = &amp;quot;&amp;quot;;
            new_url.href = url.href;
        }
    }

    &amp;#x2F;&amp;#x2F; scrap SEO friendly text
    var dp_idx = new_url.pathname.indexOf(&amp;#x27;&amp;#x2F;dp&amp;#x27;);
    if (dp_idx &amp;gt; 0) {
        new_url.pathname = new_url.pathname.substring(dp_idx, new_url.pathname.length);
    }
    return { redirectUrl: new_url.href };
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;further-thoughts-and-a-wishlist&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#further-thoughts-and-a-wishlist&quot; aria-label=&quot;Anchor link for: further-thoughts-and-a-wishlist&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Further thoughts and a wishlist&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you squint enough at the code, you&#x27;ll see that for &lt;strong&gt;every HTTP request the browser does, we run a lot of regexps work&lt;&#x2F;strong&gt;. If you&#x27;re worried about the performance hit, then you are in good company: I&#x27;m worried, too.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Regexps are bad. I&#x27;d like to run some benchmarks to see if and how much they affect the browser performances. As a side thought, many privacy focusing extensions basically run a lot of regexps against blacklists.&lt;&#x2F;p&gt;
&lt;p&gt;Some of these extensions are noticeably slowing the browsing experience. A possible solution to explore could be using some WASM code to optimize hot code paths. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gorhill&#x2F;uBlock&#x2F;tree&#x2F;master&#x2F;src&#x2F;lib&#x2F;lz4&quot;&gt;uBlock&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;EFForg&#x2F;https-everywhere&quot;&gt;HTTPS Everywhere&lt;&#x2F;a&gt; already do that (I didn&#x27;t check the code, therefore I cannot comment on the results).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Manually adding rules is a time-consuming effort known to be problematic and frustrating (both for users and developers). Without trying to build a complicated tool (such as: a backoffice for end-users to add regexps to the ruleset), one can think of something to (at least) submit their wishes in form of Gihub issues or pull requests. Example: describing a workflow that would lead to an effective pull requests.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Step 1: Identify the URL you would like to see cleaned&lt;&#x2F;li&gt;
&lt;li&gt;Step 2: go to &lt;a href=&quot;https:&#x2F;&#x2F;regex101.com&quot;&gt;Regex 101&lt;&#x2F;a&gt; and write your rule&lt;&#x2F;li&gt;
&lt;li&gt;Step 3: open a PR submitting your suggestion and a test case&lt;&#x2F;li&gt;
&lt;li&gt;Step 4: the CI automatic build would tell if that breaks anything&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Such solution would not cover 100% of users, but hopefully we can drive the more technically-inclined to a faster path to merging their suggestion.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Tests are also essential to keep performances under scrutiny.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Integration tests in Rust and CI</title>
        <published>2019-08-17T00:00:00+00:00</published>
        <updated>2019-08-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rust-integration-tests-and-ci/" type="text/html"/>
        <id>https://apiraino.github.io/rust-integration-tests-and-ci/</id>
        <content type="html">&lt;p&gt;I&#x27;m writing a small service in Rust, let&#x27;s summarize how it works:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A client calls my server on &lt;code&gt;https:&#x2F;&#x2F;www.rustserver.com&#x2F;endpoint&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The client receives immediately a &lt;code&gt;200 OK&lt;&#x2F;code&gt; to acknowledge the request&lt;&#x2F;li&gt;
&lt;li&gt;The server calls external services on &lt;code&gt;https:&#x2F;&#x2F;ext1.domain.com&lt;&#x2F;code&gt;, &lt;code&gt;https:&#x2F;&#x2F;ext2.domain.com&lt;&#x2F;code&gt;, &lt;code&gt;https:&#x2F;&#x2F;ext3.domain.com&lt;&#x2F;code&gt;, etc.&lt;&#x2F;li&gt;
&lt;li&gt;The server retrieves all the responses, do some parsing and store them somewhere&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;While it&#x27;s important to have unit tests for step (4), I&#x27;d also like to have integration tests and trigger the whole workflow from start to finish.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-tool-i-need&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-tool-i-need&quot; aria-label=&quot;Anchor link for: the-tool-i-need&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;The tool I need&lt;&#x2F;h3&gt;
&lt;p&gt;In Python I was used to have a mocking library that allows me to define such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import mock

@mock.patch(&amp;#x27;mybackend.application.api.call_external_server&amp;#x27;)
def test_1(self, server_mock):

    # the test client calls my endpoint
    resp = self.call_my_server(email=self.email, token=self.tk)
    self.assertEqual(resp.status, 200)

    # verify that the external server call has been really happened
    self.assertEqual(1, len(server_mock.mock_calls))

    # other tests to check what happened after the external call was completed
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, how do we put this workflow under integration tests on Rust? I looked for a mocking library but couldn&#x27;t find one to be easy enough to use. The crate &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lipanski&#x2F;mockito&quot;&gt;mockito&lt;&#x2F;a&gt; gets close to what I&#x27;d like a mocking library to be but it can only mock an HTTP request that it&#x27;s directly called from the test.&lt;&#x2F;p&gt;
&lt;p&gt;The alternate approach is to roll up your sleeve and find a creative solution: for example start a proxy server that intercepts all outbound HTTP request and returns a static JSON.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;adding-the-man-in-the-middle&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-the-man-in-the-middle&quot; aria-label=&quot;Anchor link for: adding-the-man-in-the-middle&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt; Adding the man in the middle&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mitmproxy&#x2F;mitmproxy&quot;&gt;mitm&lt;&#x2F;a&gt; is my proxy of choice when I need to inspect traffic, easy enough to get things done quickly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mitm&lt;&#x2F;code&gt; can be quickly scripted to have all sorts of funny things happening! In my case I just want the request to be intercepted and a static JSON response returned. This can be accomplished with 10 lines of python:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from mitmproxy import http
from mitmproxy import ctx

def response(flow: http.HTTPFlow) -&amp;gt; None:

    if &amp;#x27;&amp;#x2F;oauth2&amp;#x2F;v1&amp;#x2F;access_token&amp;#x27; in flow.request.pretty_url:
        ctk.log.info(&amp;#x27;Gotcha!&amp;#x27;)
        with open(&amp;#x27;static_response.json&amp;#x27;, &amp;#x27;r&amp;#x27;) as fp:
            flow.response = http.HTTPResponse.make(
                201,
                fp.read().encode(&amp;#x27;UTF-8&amp;#x27;),
                headers={&amp;quot;Content-Type&amp;quot;: &amp;quot;application&amp;#x2F;json&amp;quot;}
            )
        return

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run it and then try to call the remote endpoint:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ mitmproxy --scripts my_script.py
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;mitm.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;adding-a-proxy-in-a-rust-http-client&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#adding-a-proxy-in-a-rust-http-client&quot; aria-label=&quot;Anchor link for: adding-a-proxy-in-a-rust-http-client&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Adding a proxy in a Rust http client&lt;&#x2F;h3&gt;
&lt;p&gt;Ok we have the proxy. How do we tell the Rust client to use the proxy? And since this is only needed in tests we need a flag to enable the proxied call.&lt;&#x2F;p&gt;
&lt;p&gt;My solution, while not the cleanest, is to have a compilation flag to compile the client with or without the proxy (I use &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&quot;&gt;hyper&lt;&#x2F;a&gt; as http client and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tafia&#x2F;hyper-proxy&quot;&gt;hyper_proxy&lt;&#x2F;a&gt; to add a proxy).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s add a feature flag:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;# Cargo.toml
...
[features]
proxy_requests = []
default = []
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add the proxied connection flag to the client:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use hyper::{client::HttpConnector, Body, Client};
use hyper_proxy::ProxyConnector;
use hyper_tls::HttpsConnector;

pub struct MyClient {
    #[cfg(feature = &amp;quot;proxy_requests&amp;quot;)]
    pub client: Client&amp;lt;ProxyConnector&amp;lt;HttpConnector&amp;gt;, Body&amp;gt;,
    #[cfg(not(feature = &amp;quot;proxy_requests&amp;quot;))]
    pub client: Client&amp;lt;HttpsConnector&amp;lt;HttpConnector&amp;gt;, Body&amp;gt;,
}

impl MyClient {
    pub fn new() -&amp;gt; Self {
        let http_connector = HttpConnector::new(4);
        let https_connector = HttpsConnector::new(4).expect(&amp;quot;TLS initialization failed&amp;quot;);
        let proxy = {
            let proxy_uri =
                format!(&amp;quot;{}:{}&amp;quot;,
                    get_env!(&amp;quot;PROXY_HOST&amp;quot;),
                    get_env!(&amp;quot;PROXY_PORT&amp;quot;)
                ).parse().unwrap();
            let proxy = Proxy::new(Intercept::All, proxy_uri);

            &amp;#x2F;&amp;#x2F; My proxy is on plain HTTP
            let proxy_connector = ProxyConnector::from_proxy_unsecured(http_connector, proxy);
            proxy_connector
        };

        &amp;#x2F;&amp;#x2F; When running tests and CI builds, run with &amp;quot;cargo run --features=proxy_requests&amp;quot;
        #[cfg(feature = &amp;quot;proxy_requests&amp;quot;)]
        let client = Client::builder().build::&amp;lt;_, hyper::Body&amp;gt;(proxy);

        &amp;#x2F;&amp;#x2F; In real life, server is run with &amp;quot;cargo run&amp;quot;
        #[cfg(not(feature = &amp;quot;proxy_requests&amp;quot;))]
        let client = Client::builder().build::&amp;lt;_, hyper::Body&amp;gt;(https_connector);

        MyClient { client }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s write an integration test. This integration test is completely unaware of what&#x27;s happening behind, it will always succeed. But it&#x27;s useful to trigger the internal workflow.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[cfg(feature = &amp;quot;proxy_requests&amp;quot;)]
#[test]
fn test_workflow() {
    let c = utils::TestClient::new();
    let url = c.add_to_url(&amp;quot;&amp;#x2F;test&amp;quot;).expect(&amp;quot;Could not generate Url&amp;quot;);
    let mut response = c.client.get(url).send().expect(&amp;quot;Could not GET &amp;#x2F;test&amp;quot;);
    let resp = response.text().unwrap();
    assert!(response.status().is_success(), format!(&amp;quot;{} - {:?}&amp;quot;, response.status(), resp));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Like mentioned in the code comments, I run tests with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo run --features=proxy_requests
$ cargo test --features=proxy_requests
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now all connections all intercepted by our man in the middle. In production I run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo run
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;setup-the-ci&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup-the-ci&quot; aria-label=&quot;Anchor link for: setup-the-ci&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iv&quot;&gt;&lt;&#x2F;a&gt;Setup the CI&lt;&#x2F;h3&gt;
&lt;p&gt;Now the last part: let&#x27;s automate this and update our CI builds!&lt;&#x2F;p&gt;
&lt;p&gt;I use CircleCI for this project, so I&#x27;ve updated the configuration file with the following items (see the comments):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;jobs:
  rust-tests:
    docker:
      - image: circleci&amp;#x2F;rust:latest
    steps:
      - ... some steps ...
      - download-and-install-mitm
      - run:
          name: Run mitm
          background: true
          command: |
            # I&amp;#x27;m running the headless version of &amp;quot;mitmproxy&amp;quot;
            mitmdump --scripts my_script.py
      - run:
          name: Run server
          environment:
            DEPLOY_MODE: test
            RUST_BACKTRACE: 1
          background: true
          command: |
            # Run the backend with maximum debug logging
            # Enable proxied requests
            # use &amp;quot;nohup&amp;quot; to log the output to a file
            RUST_LOG=my_backend=debug nohup cargo run --features=proxy_requests
      - run:
          name: Run tests
          environment:
            DEPLOY_MODE: test
            RUST_BACKTRACE: 1
            RUST_TEST_THREADS: 1
            RUST_TEST_NOCAPTURE: 1
          command: |
            # enable the integration tests under feature flag
            cargo test --features=proxy_requests --all
      - run:
          name: Post-mortem checks
          command: |
            sh .&amp;#x2F;scripts&amp;#x2F;post-mortem.sh
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One more problem to solve. Like mentioned before, the integration test has no way to know or report a failure, it will always succeed.&lt;&#x2F;p&gt;
&lt;p&gt;The only trace I have if something breaks is inspecting the server logging (notice the &amp;quot;nohup&amp;quot; when running the Rust server). In future I&#x27;d like to integrate a serious logging facility in Rust that allows me to write a proper log file and log to syslog.&lt;&#x2F;p&gt;
&lt;p&gt;In the meanwhile I&#x27;ll just ... well ... grep through the logged stdout for a &amp;quot;BACKTRACE&amp;quot; or other markers :-)&lt;&#x2F;p&gt;
&lt;p&gt;Here is what the &lt;code&gt;post-mortem.sh&lt;&#x2F;code&gt; does:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;RES=$( grep -c BACKTRACE $LOGFILE )
if [ &amp;quot;$RES&amp;quot; -ne &amp;quot;0&amp;quot; ] ; then
    echo &amp;quot;test(s) failed&amp;quot;
    cat $LOGFILE
    exit 1
fi
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Like I said, nothing here is implemented the way I&#x27;d like, but it&#x27;s a start.&lt;&#x2F;p&gt;
&lt;p&gt;Things I&#x27;d like to improve in the future:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ideally find a serious HTTP mocking library and remove the whole proxy crutch&lt;&#x2F;li&gt;
&lt;li&gt;Add a logging facility, I will investigate &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;log4rs&quot;&gt;log4rs&lt;&#x2F;a&gt;, maybe &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;daboross&#x2F;fern&quot;&gt;fern&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;Improve the post-mortem reporting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Getting into Rust Iterators</title>
        <published>2019-08-13T00:00:00+00:00</published>
        <updated>2019-08-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rust-getting-into-iterators/" type="text/html"/>
        <id>https://apiraino.github.io/rust-getting-into-iterators/</id>
        <content type="html">&lt;p&gt;I&#x27;ll summarize what I&#x27;ve learned so far about Iterators.&lt;&#x2F;p&gt;
&lt;p&gt;I had this code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn mapper(src: &amp;amp;Vec&amp;lt;SrcStruct&amp;gt;) -&amp;gt; Vec&amp;lt;DestStruct&amp;gt; {
    let mut objects: Vec&amp;lt;DestStruct&amp;gt; = vec![];
    for course in src {
        let item = Item::from(course);
        let obj: DestStruct = DestStruct::new(item);
        objects.push(obj);
    }
    objects
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This function takes as input an array of &lt;strong&gt;Srcstruct&lt;&#x2F;strong&gt; references and return an array of &lt;strong&gt;DestStruct&lt;&#x2F;strong&gt;. For each item of &lt;strong&gt;SrcStruct&lt;&#x2F;strong&gt; we create a new &lt;strong&gt;Deststruct&lt;&#x2F;strong&gt; and add it to the array. At the end of the iteration the array is returned.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s a pretty straightforwarded approach, which works well in most cases and looks familiar in most languages. Nobody will complain about such implementation.&lt;&#x2F;p&gt;
&lt;p&gt;However what happens when the input array is a HUUUGE amount of data?&lt;&#x2F;p&gt;
&lt;p&gt;Iterators save the day, providing a way to stream data and be treated chunk by chunk. Since my input data is basically a JSON list of records, it look like the perfect use case for iterating them one by one and keep memory usage constant.&lt;&#x2F;p&gt;
&lt;p&gt;The first refactor tries to add Interators:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn mapper&amp;lt;&amp;#x27;a, I&amp;gt;(src: I) -&amp;gt; impl Iterator&amp;lt;Item = DestStruct&amp;gt;
where
    I: IntoIterator&amp;lt;Item = &amp;amp;&amp;#x27;a SrcStruct&amp;gt;,
{
    let objects: Vec&amp;lt;DestStruct&amp;gt; = src
        .into_iter()
        .map(|course| {
            let res = Item::try_from(course);
            let item = match res {
                Ok(item) =&amp;gt; {
                    &amp;#x2F;&amp;#x2F; conversion successful
                    item
                }
                Err(x) =&amp;gt; {
                    &amp;#x2F;&amp;#x2F; conversion failed! Create a placeholder
                    Item::default()
                }
            };
            DestStruct::new(item)
        })
        .collect();
    objects.into_iter()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The final version looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn mapper&amp;lt;&amp;#x27;a, I&amp;gt;(src: I) -&amp;gt; impl Iterator&amp;lt;Item = ApprendoObject&amp;gt; + &amp;#x27;a
where
    I: IntoIterator&amp;lt;Item = &amp;amp;&amp;#x27;a CourseResult&amp;gt;,
    &amp;lt;I as std::iter::IntoIterator&amp;gt;::IntoIter: &amp;#x27;a,
{
    let objects = src.into_iter().map(|course| {
        let res = Item::try_from(course);
        let item = match res {
            Ok(item) =&amp;gt; {
                debug!(&amp;quot;conversion for object successful&amp;quot;);
                item
            }
            Err(x) =&amp;gt; {
                error!(&amp;quot;conversion for object failed: {:?}&amp;quot;, x);
                &amp;#x2F;&amp;#x2F; and skip this object
                let empty_item = Item::default();
                empty_item
            }
        };
        let app_obj: ApprendoObject = ApprendoObject::new(item);
        app_obj
    });
    objects
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;d like to run some benchmarks on these two implementations (although benchmarks are like opinions: everyone has their own); unfortunately I could not figure out easily how to run benchmarks in Rust, so I&#x27;ll leave a &lt;strong&gt;cargo bench&lt;&#x2F;strong&gt; setup for a later stage.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>&lt; noscript&gt;</title>
        <published>2019-07-25T00:00:00+00:00</published>
        <updated>2019-07-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/noscript/" type="text/html"/>
        <id>https://apiraino.github.io/noscript/</id>
        <content type="html">&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;noscript.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;In general terms, that&#x27;s debatable, to say the least.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hyper, the Rust async microframework</title>
        <published>2019-07-18T00:00:00+00:00</published>
        <updated>2019-07-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/hyper/" type="text/html"/>
        <id>https://apiraino.github.io/hyper/</id>
        <content type="html">&lt;h2 id=&quot;introducing-hyper-0-12&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#introducing-hyper-0-12&quot; aria-label=&quot;Anchor link for: introducing-hyper-0-12&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Introducing Hyper 0.12&lt;&#x2F;h2&gt;
&lt;p&gt;I had investigated how Futures work in Rust, the next step was finding a light web framework in Rust to build a microservice so I ended up trying &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&quot;&gt;Hyper&lt;&#x2F;a&gt;. This is the first of a series of tutorials written for myself.&lt;&#x2F;p&gt;
&lt;p&gt;Reading the &amp;quot;label on the tin&amp;quot;, Hyper is a high-performance HTTP async server + client that sits on the Tokio runtime and Future crate.&lt;&#x2F;p&gt;
&lt;p&gt;What a Future is, I&#x27;ve put &lt;a href=&quot;&#x2F;2019&#x2F;07&#x2F;17&#x2F;rust-future-examples.html&quot;&gt;some notes here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What the Tokio runtime is ... I don&#x27;t care! Let&#x27;s say it&#x27;s just an engine that acts like a juggler and handles stuff very quickly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;guides&#x2F;&quot;&gt;The guides&lt;&#x2F;a&gt; for Hyper are clear enough to get started.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, one big disclaimer before we start. Be sure to look at the latest Hyper &lt;code&gt;0.12.x&lt;&#x2F;code&gt; branch. Version &lt;code&gt;0.13.x&lt;&#x2F;code&gt; is in the works and changes a number of things (f.e. uses the async&#x2F;await syntax). Slighly previous versions (like &lt;code&gt;0.12.15&lt;&#x2F;code&gt;) have a different API. Hyper is heavily in flux and breaking changes are not properly advertised. You&#x27;ll find yourself looking at code written for &lt;code&gt;0.11&lt;&#x2F;code&gt; that doesn&#x27;t compile anymore.&lt;&#x2F;p&gt;
&lt;p&gt;But let&#x27;s see how it works. As far as I could understand the basic principle of Hyper is: it creates a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.12.33&#x2F;hyper&#x2F;service&#x2F;trait.Service.html&quot;&gt;Service&lt;&#x2F;a&gt; struct that will handle all requests. I don&#x27;t care now how all that work, just let me get started.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fire-up-a-minimal-server&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#fire-up-a-minimal-server&quot; aria-label=&quot;Anchor link for: fire-up-a-minimal-server&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Fire up a minimal server&lt;&#x2F;h3&gt;
&lt;p&gt;Here we have a server listening for incoming connections and returning a string to each of them as response:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&amp;#x2F;&amp;#x2F; Notice we are using the Future crate re-exported from hyper
&amp;#x2F;&amp;#x2F; use futures::future;
use hyper::rt::Future;

&amp;#x2F;&amp;#x2F; this is a &amp;quot;convenience&amp;quot; function to transform any function into a Service
use hyper::service::service_fn_ok;
use hyper::{Body, Request, Response, Server};

fn main() {
    println!(&amp;quot;Start&amp;quot;);

    let addr = ([127, 0, 0, 1], 3000).into();
    let server = Server::bind(&amp;amp;addr)
        .serve(|| {
            &amp;#x2F;&amp;#x2F; This is the `Service` that will handle the connection.
            &amp;#x2F;&amp;#x2F; `service_fn_ok` is a helper to convert a function that
            &amp;#x2F;&amp;#x2F; returns a Response into a `Service`.
            service_fn_ok(move |_: Request&amp;lt;Body&amp;gt;| Response::new(Body::from(&amp;quot;Hello World!\n&amp;quot;)))
        })
        .map_err(|e| eprintln!(&amp;quot;server error: {}&amp;quot;, e));

    &amp;#x2F;&amp;#x2F; runs on tokio runtime
    println!(&amp;quot;Listening on http:&amp;#x2F;&amp;#x2F;{}&amp;quot;, addr);
    hyper::rt::run(server);

    println!(&amp;quot;Exiting&amp;quot;);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;hyper-spawns-a-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hyper-spawns-a-future&quot; aria-label=&quot;Anchor link for: hyper-spawns-a-future&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Hyper spawns a Future&lt;&#x2F;h3&gt;
&lt;p&gt;The server listens for incoming connections and spawns a Future that sleep for 2 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;Notice how che client connection is closed immediately and the Future is resolved at a later stage.&lt;&#x2F;p&gt;
&lt;p&gt;Do &lt;em&gt;not&lt;&#x2F;em&gt; use &lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt; to add a delay, you&#x27;ll end up blocking the whole Tokio runtime thread!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn svc_wait(t: u64) -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; {
    println!(&amp;quot;[start] waiting...&amp;quot;);
    let when = Instant::now() + Duration::from_millis(t);
    Delay::new(when)
        .map_err(|e| panic!(&amp;quot;timer failed; err={:?}&amp;quot;, e))
        .and_then(|_| {
            println!(&amp;quot;[end] waiting&amp;quot;);
            Ok(())
        })
}

fn main() {
    let addr = ([127, 0, 0, 1], 3000).into();
    let server = Server::bind(&amp;amp;addr)
        .serve(|| {
            service_fn_ok(|req: Request&amp;lt;Body&amp;gt;| {
                &amp;#x2F;&amp;#x2F; received the client connection
                eprintln!(&amp;quot;Received client: {:?}&amp;quot;, req.headers());
                &amp;#x2F;&amp;#x2F; creating the future
                let f = svc_wait(2000);
                &amp;#x2F;&amp;#x2F; the future is run NOW
                hyper::rt::spawn(f);
                &amp;#x2F;&amp;#x2F; the client receives immediately a reply
                eprintln!(&amp;quot;Sending back NOW a response to the client&amp;quot;);
                Response::new(Body::from(&amp;quot;Future triggered&amp;quot;))
            })
        })
        .map_err(|e| eprintln!(&amp;quot;server error: {}&amp;quot;, e));

    &amp;#x2F;&amp;#x2F; runs on tokio runtime
    println!(&amp;quot;Listening on http:&amp;#x2F;&amp;#x2F;{}&amp;quot;, addr);
    hyper::rt::run(server);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Observe the server logging:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# The request to the server will be immediately served, then the connection closed
$ curl localhost:3000
Future triggered

# this is the output you&amp;#x27;ll see on the server
$ cargo run
Listening on http:&amp;#x2F;&amp;#x2F;127.0.0.1:3000
Received client: {&amp;quot;host&amp;quot;: &amp;quot;127.0.0.1:3000&amp;quot;, &amp;quot;user-agent&amp;quot;: &amp;quot;curl&amp;#x2F;7.64.0&amp;quot;, &amp;quot;accept&amp;quot;: &amp;quot;*&amp;#x2F;*&amp;quot;}
[start] waiting...
Sending back NOW a response to the client
... waiting ...
[end] waiting
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A reply is being sent immediately to the client. The future is triggered, starts doing its &amp;quot;work&amp;quot; and finishes way after a reply is sent to the client.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-simple-endpoint-router-spawns-different-futures&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-simple-endpoint-router-spawns-different-futures&quot; aria-label=&quot;Anchor link for: a-simple-endpoint-router-spawns-different-futures&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
A simple endpoint router, spawns different Futures&lt;&#x2F;h3&gt;
&lt;p&gt;We mentioned earlier that the Hyper server runs a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;hyper&#x2F;0.12.33&#x2F;hyper&#x2F;service&#x2F;trait.Service.html&quot;&gt;Service&lt;&#x2F;a&gt; that handles all the requests. This service implements a router that handles a tuple &lt;code&gt;(http_method, path)&lt;&#x2F;code&gt; where &lt;code&gt;http_method&lt;&#x2F;code&gt; can be GET, POST, etc. and &lt;code&gt;path&lt;&#x2F;code&gt; can be (f.e. &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;user&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;user&#x2F;:id&lt;&#x2F;code&gt; and so on).&lt;&#x2F;p&gt;
&lt;p&gt;In the following example, the router handles two endpoints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET &#x2F;wait&lt;&#x2F;code&gt;: triggers the waiting Future seen before&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GET &#x2F;fetch&lt;&#x2F;code&gt;: triggers a request on a remote server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Basically the same as before but with a twist: the request router is itself a Future that resolves when the final Future is resolved.&lt;&#x2F;p&gt;
&lt;p&gt;Full code of this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;rust-future-explorations&#x2F;tree&#x2F;master&#x2F;hyper-router&quot;&gt;here&lt;&#x2F;a&gt;. Here we have the interesting bits:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn fetch_data() -&amp;gt; impl Future&amp;lt;Item = future::FutureResult&amp;lt;RespStruct, String&amp;gt;, Error = ()&amp;gt; {
    let uri: Uri = &amp;quot;http:&amp;#x2F;&amp;#x2F;httpbin.org&amp;#x2F;get&amp;quot;.parse().expect(&amp;quot;Cannot parse URL&amp;quot;);
    Client::new()
        .get(uri)
        &amp;#x2F;&amp;#x2F; Future is polled here
        .and_then(|res| {
            &amp;#x2F;&amp;#x2F; extract the body from the Response
            res.into_body().concat2()
        })
        .map_err(|err| println!(&amp;quot;error: {}&amp;quot;, err))
        .map(|body| {
            &amp;#x2F;&amp;#x2F; here parse the FutureResult, serialize into a validated Struct
            let decoded: RespStruct = serde_json::from_slice(&amp;amp;body).expect(&amp;quot;Couldn&amp;#x27;t deserialize&amp;quot;);
            future::ok(decoded)
        })
}

fn svc_wait(t: u64) -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; {
    &amp;#x2F;&amp;#x2F; code omitted for brevity
}

&amp;#x2F;&amp;#x2F; Just an alias to make it more readable
type BoxFut = Box&amp;lt;dyn Future&amp;lt;Item = Response&amp;lt;Body&amp;gt;, Error = hyper::Error&amp;gt; + Send&amp;gt;;

&amp;#x2F;&amp;#x2F; This is our request router
fn service_router(req: Request&amp;lt;Body&amp;gt;) -&amp;gt; BoxFut {
    let mut response = Response::new(Body::empty());

    &amp;#x2F;&amp;#x2F; routes the request to the appropriate worker
    match (req.method(), req.uri().path()) {

         &amp;#x2F;&amp;#x2F; GET &amp;#x2F;wait
        (&amp;amp;Method::GET, &amp;quot;&amp;#x2F;wait&amp;quot;) =&amp;gt; {
            let r = svc_wait(1500);
            hyper::rt::spawn(r);
            *response.body_mut() = Body::from(format!(&amp;quot;Triggered waiting {}ms&amp;quot;, 1500));
        }

         &amp;#x2F;&amp;#x2F; GET &amp;#x2F;fetch
        (&amp;amp;Method::GET, &amp;quot;&amp;#x2F;fetch&amp;quot;) =&amp;gt; {
            let r = fetch_data().map(|x| {
                println!(&amp;quot;got data: {:?}&amp;quot;, x);
            });
            hyper::rt::spawn(r);
            *response.body_mut() = Body::from(&amp;quot;Sent request to external webservice&amp;quot;);
        }

        &amp;#x2F;&amp;#x2F; ... more routers

    }
    eprintln!(&amp;quot;Returning a response&amp;quot;);
    Box::new(future::ok(response))
}

fn main() {
    let addr = ([127, 0, 0, 1], 3000).into();
    let server = Server::bind(&amp;amp;addr)
        .serve(|| {
            &amp;#x2F;&amp;#x2F; now we spawn a Future with our request router
            service_fn(service_router)
        })
        .map_err(|e| eprintln!(&amp;quot;server error: {}&amp;quot;, e));

    println!(&amp;quot;Listening on http:&amp;#x2F;&amp;#x2F;{}&amp;quot;, addr);
    hyper::rt::run(server);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can call the server on two endpoints:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ curl localhost:3000&amp;#x2F;wait
Triggered waiting 1500ms

$ curl localhost:3000&amp;#x2F;fetch
Sent request to external webservice
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;More examples can be found on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;tree&#x2F;v0.12.33&#x2F;examples&quot;&gt;the Hyper GitHub repo&lt;&#x2F;a&gt; but without a proper context they didnt make too much sense to me (your mileage may vary). Maybe a bit more explaination of they actual do should suffice.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Writing Rust Futures in 2019</title>
        <published>2019-07-17T00:00:00+00:00</published>
        <updated>2019-07-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rust-future-examples/" type="text/html"/>
        <id>https://apiraino.github.io/rust-future-examples/</id>
        <content type="html">&lt;p&gt;Some examples of Futures I wish I&#x27;d found before (or wasn&#x27;t able to find). These examples are almost just copy and paste from various places, so the resources are there, I just needed to figure out the bigger picture.&lt;&#x2F;p&gt;
&lt;p&gt;All examples use the &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&quot;&gt;Tokio runtime&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All examples use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;futures&quot;&gt;futures crate&lt;&#x2F;a&gt; v0.1.2x.&lt;&#x2F;p&gt;
&lt;p&gt;Code is available on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;rust-future-explorations&quot;&gt;Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Update: the part about Hyper has been moved &lt;a href=&quot;&#x2F;2019&#x2F;07&#x2F;18&#x2F;hyper.html&quot;&gt;to its own article&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;brief-prologue-what-is-a-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#brief-prologue-what-is-a-future&quot; aria-label=&quot;Anchor link for: brief-prologue-what-is-a-future&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;Brief prologue: what is a Future&lt;&#x2F;h2&gt;
&lt;p&gt;A Future is simply a plain Rust function which return type is a &lt;code&gt;Future&lt;&#x2F;code&gt;. I won&#x27;t go in detail of what a Future is, others can explain that better than me. The standard return type is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn something() -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt;
    &amp;#x2F;&amp;#x2F; do something...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That reads as: return a &lt;code&gt;Future&lt;&#x2F;code&gt; which contains an &lt;code&gt;Item&lt;&#x2F;code&gt; or an &lt;code&gt;Error&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Item&lt;&#x2F;code&gt; can also be an integer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn something() -&amp;gt; impl Future&amp;lt;Item = i32, Error = ()&amp;gt;
    &amp;#x2F;&amp;#x2F; do something...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or the &lt;code&gt;Error&lt;&#x2F;code&gt; can be something more useful:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn something() -&amp;gt; impl Future&amp;lt;Item = i32, Error = String&amp;gt;
    &amp;#x2F;&amp;#x2F; do something...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or a custom type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;struct MyStruct {
    name: String,
    age: i32
}

fn something() -&amp;gt; impl Future&amp;lt;Item = MyStruct, Error = ()&amp;gt; {
    &amp;#x2F;&amp;#x2F; do something...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s see some basic examples. We&#x27;ll be just scratching the surface of what can be accomplished with Futures.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;your-first-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#your-first-future&quot; aria-label=&quot;Anchor link for: your-first-future&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;first-future&quot;&gt;&lt;&#x2F;a&gt; Your first Future&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn my_fut() -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; {
    println!(&amp;quot;running my_fut&amp;quot;);
    future::ok(())
}

fn main() {
    &amp;#x2F;&amp;#x2F; the Future returns a unit
    tokio::run(my_fut());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Console output is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo run
running my_fut
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-future-that-returns-an-integer&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-future-that-returns-an-integer&quot; aria-label=&quot;Anchor link for: a-future-that-returns-an-integer&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;simple-future&quot;&gt;&lt;&#x2F;a&gt;A Future that returns an integer&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn my_fut() -&amp;gt; impl Future&amp;lt;Item = i32, Error = ()&amp;gt; {
    println!(&amp;quot;running my_fut&amp;quot;);
    future::ok(42)
}

fn main() {

    &amp;#x2F;&amp;#x2F; run the Future, forget about it
    tokio::run(my_fut());

    &amp;#x2F;&amp;#x2F; run the future, inspect the return value
    let f = my_fut().map(|x| {
        println!(&amp;quot;future resolved: {}&amp;quot;, x);
        ()
    });
    tokio::run(f);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Console output is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo run
running my_fut
future resolved: 42
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-future-that-sleeps-for-1-second&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-future-that-sleeps-for-1-second&quot; aria-label=&quot;Anchor link for: a-future-that-sleeps-for-1-second&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;sleeping-future&quot;&gt;&lt;&#x2F;a&gt;A Future that sleeps for 1 second&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn svc_wait(t: u64) -&amp;gt; impl Future&amp;lt;Item = (), Error = ()&amp;gt; {
    println!(&amp;quot;[start] waiting...&amp;quot;);
    let when = Instant::now() + Duration::from_millis(t);
    Delay::new(when)
        .map_err(|e| panic!(&amp;quot;timer failed; err={:?}&amp;quot;, e))
        .and_then(|_| {
            println!(&amp;quot;[end] waiting&amp;quot;);
            Ok(())
        })
}

fn main() {
    &amp;#x2F;&amp;#x2F; Future returns a ()
    let f = svc_wait(1000).map(|_| {
        println!(&amp;quot;future finished&amp;quot;);
        ()
    });
    tokio::run(f);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The console output will be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;[start] waiting...
... 1 sec ...
[end] waiting
future finished
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s important to note that if you want to simulate a long-lasting async task you should &lt;em&gt;not&lt;&#x2F;em&gt; use &lt;code&gt;std::thread::sleep&lt;&#x2F;code&gt;, you&#x27;ll end up blocking the whole Tokio runtime thread!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;todo-manually-implementing-a-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#todo-manually-implementing-a-future&quot; aria-label=&quot;Anchor link for: todo-manually-implementing-a-future&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;future-poll&quot;&gt;&lt;&#x2F;a&gt;(TODO) Manually implementing a Future&lt;&#x2F;h2&gt;
&lt;p&gt;Futures are cool because you &amp;quot;fire&amp;amp;forget&amp;quot; them. But what if we want to track their progress?&lt;&#x2F;p&gt;
&lt;p&gt;We need to manually implement the &lt;code&gt;.poll()&lt;&#x2F;code&gt; to be able to observe the various stages.&lt;&#x2F;p&gt;
&lt;p&gt;I still have to figure out how this stuff work.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s some code pasted from elsewhere.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl Future for Magazine {
    &amp;#x2F;&amp;#x2F; here we return a single byte
    type Item = u8;
    type Error = io::Error;

    &amp;#x2F;&amp;#x2F; this method is getting called from the runtime. Everytime we can read
    &amp;#x2F;&amp;#x2F; a byte into the buffer, we return `Async::Ready`
    fn poll(&amp;amp;mut self) -&amp;gt; Poll&amp;lt;Self::Item, Self::Error&amp;gt; {
        let mut buffer = [0;1];
        match self.0.poll_read(&amp;amp;mut buf) {
            Ok(Async::Ready(_num_bytes_read)) =&amp;gt; Ok(Async::Ready(buffer[0])),
            Ok(Async::NotReady) =&amp;gt; Ok(Async::NotReady),
            Err(e) =&amp;gt; Err(e)
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;struct AwakeFuture {
    name: String,
    count: i32,
}

impl AwakeFuture {
    fn new(name: String) -&amp;gt; AwakeFuture {
        AwakeFuture { name, count: 0 }
    }
}

impl Future for AwakeFuture {
    type Item = i32;
    type Error = ();

    fn poll(&amp;amp;mut self) -&amp;gt; Poll&amp;lt;Self::Item, Self::Error&amp;gt; {
        match self.count {
            3 =&amp;gt; {
                eprintln!(
                    &amp;quot;[{}] Future {} has finished counting&amp;quot;,
                    self.count, self.name
                );
                Ok(Async::Ready(self.count))
            }
            _ =&amp;gt; {
                eprintln!(&amp;quot;[{}] Future {} is not yet ready ...&amp;quot;, self.count, self.name);
                &amp;#x2F;&amp;#x2F; FIXME: I&amp;#x27;m afraid this won&amp;#x27;t ever work
                self.count += 1;
                Ok(Async::NotReady)
            }
        }
    }
}

fn main() {
    let awake_future = AwakeFuture::new(String::from(&amp;quot;awake-future&amp;quot;));
    tokio::run(awake_future.map(|x| {
        eprint!(&amp;quot;x={:?}&amp;quot;, x);
        ()
    }));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;one-more-thing-running-more-futures-together&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#one-more-thing-running-more-futures-together&quot; aria-label=&quot;Anchor link for: one-more-thing-running-more-futures-together&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;future-poll&quot;&gt;&lt;&#x2F;a&gt;One more thing: running more Futures together&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chicagohaskell&#x2F;async-futures-talk&#x2F;blob&#x2F;master&#x2F;rustlb&#x2F;examples&#x2F;multi-http&#x2F;src&#x2F;main.rs&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;chicagohaskell&#x2F;async-futures-talk&#x2F;blob&#x2F;master&#x2F;rustlb&#x2F;examples&#x2F;multi-http&#x2F;src&#x2F;main.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;credits&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#credits&quot; aria-label=&quot;Anchor link for: credits&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Credits&lt;&#x2F;h1&gt;
&lt;p&gt;Thanks to my friends of &lt;a href=&quot;https:&#x2F;&#x2F;rustrome.github.io&quot;&gt;Rust Rome&lt;&#x2F;a&gt; for the incredbile support and for answering all my questions.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gruberb&quot;&gt;Bastian Gruber&lt;&#x2F;a&gt; for his wonderful tutorials: namely &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;gruberb&#x2F;explained-rust-futures-for-web-development-a10&quot;&gt;this&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;gruberb&#x2F;explained-rust-futures-for-web-development-a10&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And don&#x27;t forget &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hyperium&#x2F;hyper&#x2F;blob&#x2F;master&#x2F;examples&quot;&gt;the Hyper examples&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>First steps in async Rust</title>
        <published>2019-07-16T00:00:00+00:00</published>
        <updated>2019-07-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rust-async/" type="text/html"/>
        <id>https://apiraino.github.io/rust-async/</id>
        <content type="html">&lt;h3 id=&quot;the-target&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-target&quot; aria-label=&quot;Anchor link for: the-target&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;The target&lt;&#x2F;h3&gt;
&lt;p&gt;Learning how to write a simple web service in Rust that performs HTTP requests.&lt;&#x2F;p&gt;
&lt;p&gt;These requests should be asynchronous because we don&#x27;t know when the external service will answer. Take into account also service timeouts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tooling&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tooling&quot; aria-label=&quot;Anchor link for: tooling&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;Tooling&lt;&#x2F;h3&gt;
&lt;p&gt;Still not sure what to use, let&#x27;s try to quickly from the bottom up:&lt;&#x2F;p&gt;
&lt;p&gt;The operating system kernel has threads. When you launch a thread, then you must poll it and when it finishes you get the results.&lt;&#x2F;p&gt;
&lt;p&gt;On top of the OS I need a &amp;quot;runtime&amp;quot;, a layer that manages the &lt;code&gt;.poll()&lt;&#x2F;code&gt; method. The &lt;code&gt;poll&lt;&#x2F;code&gt; returns either an &amp;quot;OK&amp;quot; or &amp;quot;NOT YET DONE&amp;quot; kind of response. The runtime puts to sleep this &amp;quot;thing&amp;quot; that polls the thread for some time, than asks again.&lt;&#x2F;p&gt;
&lt;p&gt;Tipically I have a pool of these threads.&lt;&#x2F;p&gt;
&lt;p&gt;An async function in Rust is abstracted as a &lt;code&gt;Future&lt;&#x2F;code&gt;, i.e. something that is launched and will eventually resolve to a result. A Future is polled until is resolves and returns some result (or an error). Future have been recently &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;07&#x2F;04&#x2F;Rust-1.36.0.html#the-future-is-here&quot;&gt;stabilized in Rust stable&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d like to use the soon-to-be (as of July 2019) stabilized async&#x2F;await syntax. Draft of the syntax &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;62149&quot;&gt;is been published here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-runtime&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-runtime&quot; aria-label=&quot;Anchor link for: the-runtime&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
The runtime&lt;&#x2F;h4&gt;
&lt;p&gt;I ought to choose a runtime. There are two possibilities:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;rust-async&#x2F;tokio.rs&quot;&gt;tokio&lt;&#x2F;a&gt;: tried to use it before we had Future and await&#x2F;async available and it was impossible to grasp. Looking at the versioning, the project seems to have stalled &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;c5eqj1&#x2F;tokio_master_branch_switching_to_stdfuture&quot;&gt;until recently&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustasync&#x2F;runtime&quot;&gt;Runtime&lt;&#x2F;a&gt;: the name of the project is confusing, the aim seems to add a thin layer to abstract the runtime and let the user choose between two runtimes: tokio and the &amp;quot;native&amp;quot; (Romio+Juliex) one. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SergioBenitez&#x2F;Rocket&#x2F;pull&#x2F;1008#issuecomment-507158310&quot;&gt;Reading this comment&lt;&#x2F;a&gt; on the future async dor Rocket, &amp;quot;Runtime&amp;quot; does not looks like a sensible choice. Runtime build on two components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;withoutboats&#x2F;romio&quot;&gt;Romio&lt;&#x2F;a&gt;, the reactor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;withoutboats&#x2F;juliex&quot;&gt;Juliex&lt;&#x2F;a&gt;, the executor&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;don&#x27;t understand the current state of Runtime and if I should use it.&lt;&#x2F;p&gt;
&lt;p&gt;[Q] &lt;strong&gt;Why do I, as the developer, should be concerned about choosing a runtime?&lt;&#x2F;strong&gt; : only if I&#x27;m not using a web framework that abstracts the choice for me.&lt;&#x2F;p&gt;
&lt;p&gt;[Q] &lt;strong&gt;Do I really have to manually &lt;code&gt;impl Future&lt;&#x2F;code&gt; for my async methods and manage the states?&lt;&#x2F;strong&gt;: Maybe not. I can probably add a placeholder crate (https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;futures-await) to use today the syntax that will be stabilized tomorrow (hopefully available in Rust stable 1.38&#x2F;9). But the syntax differs from that of the Runtime crate. And the crate seems to be abandoned.&lt;&#x2F;p&gt;
&lt;p&gt;[Q] &lt;strong&gt;How does this crate fits into the picture: https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;futures-rs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[Q] &lt;strong&gt;reqwest&#x2F;hyper async clients: how do they fit into the picture?&lt;&#x2F;strong&gt;: An async client is needed to emit thread-unblocking http requests, that don&#x27;t block the thread. If I run an async server (ex. Hyper), then I &lt;em&gt;must&lt;&#x2F;em&gt; use also an async client, too.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frameworks&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#frameworks&quot; aria-label=&quot;Anchor link for: frameworks&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Frameworks&lt;&#x2F;h3&gt;
&lt;p&gt;A nice to have, but I think I need something more basic, just something listening and allow some administration of the tasks. Not a user facing component.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustasync&#x2F;tide&quot;&gt;Tide&lt;&#x2F;a&gt;: this is Flask-like light framework that uses Runtime. Develope by the async WG.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;seanmonstar.com&#x2F;post&#x2F;176530511587&#x2F;warp&quot;&gt;warp&lt;&#x2F;a&gt;, which relies on hyper and tokio. Developed by Sean McArthur.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tower-rs&#x2F;tower&quot;&gt;tower-web&lt;&#x2F;a&gt;, a (seemingly) very early work-in-progress framework. Relies on futures 0.1 and tokio 0.1. Developed by Carl Leche.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;special-mentions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#special-mentions&quot; aria-label=&quot;Anchor link for: special-mentions&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Special mentions&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&quot;&gt;actix-web&lt;&#x2F;a&gt;: a full-fledged web framework. Looks to be very fast not easy to grasp (especially the middleware part is confusing).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&quot;&gt;rocket&lt;&#x2F;a&gt;, I already use it, it&#x27;s synchronous but I believe works to make it async has started, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SergioBenitez&#x2F;Rocket&#x2F;pull&#x2F;1008#issuecomment-507049080&quot;&gt;see this PR&lt;&#x2F;a&gt; (porting to hyper 0.12).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;references&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#references&quot; aria-label=&quot;Anchor link for: references&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iv&quot;&gt;&lt;&#x2F;a&gt;References&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;07&#x2F;04&#x2F;Rust-1.36.0.html&quot;&gt;Future Trait stabilized in 1.36&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;gruberb&#x2F;explained-how-does-async-work-in-rust-46f8&quot;&gt;Explained: How does async work in Rust?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;gruberb&#x2F;explained-rust-futures-for-web-development-a10&quot;&gt;Futures in Rust for Web Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;areweasyncyet.rs&quot;&gt;https:&#x2F;&#x2F;areweasyncyet.rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;ttps:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;cawahp&#x2F;asyncawait_status_report_2&quot;&gt;Async-await status report #2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;discordapp.com&#x2F;channels&#x2F;442252698964721669&#x2F;474974025454452766&#x2F;598878779695300609&quot;&gt;Discussion on Discord&lt;&#x2F;a&gt; (spoiler: no useful info gathered)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chicagohaskell&#x2F;async-futures-talk&#x2F;blob&#x2F;master&#x2F;rustlb&#x2F;examples&#x2F;multi-http&#x2F;src&#x2F;main.rs&quot;&gt;How to run a set of Futures in any order&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1.28&#x2F;futures&#x2F;stream&#x2F;futures_unordered&#x2F;struct.FuturesUnordered.html&quot;&gt;caveats on polling&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #4: Stack Overflow</title>
        <published>2019-07-14T00:00:00+00:00</published>
        <updated>2019-07-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-4/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-4/</id>
        <content type="html">&lt;p&gt;A website without I could not possibly be productive.&lt;&#x2F;p&gt;
&lt;p&gt;Its success tells a lot about the huge amount of tiny and fragmented knowledge is necessary to have when working in the information technology. As an average multilanguage developer &#x2F; sysadmin, I&#x27;m impressed by the amount of &lt;em&gt;new&lt;&#x2F;em&gt; knowledge I need to acquire every month to get forward with my work.&lt;&#x2F;p&gt;
&lt;p&gt;Results from Stack Overflow often get in the way sooner than official documentation. For example I had investigated a warning when installing a DNS client, the answer on S.O. allowed me to understand that it was actually an error. When I prefer to see directly the documentation I avoid copy-pasting full errors.&lt;&#x2F;p&gt;
&lt;p&gt;I use the official documentation when answers on S.O. seem to be too &amp;quot;magic&amp;quot; to be blindly trusted or when I need a wider view over a topic.&lt;&#x2F;p&gt;
&lt;p&gt;For many uses, I wrote my personal S.O-like &amp;quot;reference&amp;quot;. I couldn&#x27;t find a way to get them closer to me than this (maybe print a cheatsheet and hang it to the wall?).&lt;&#x2F;p&gt;
&lt;p&gt;At the beginning of my career, I distinctly remember the spike in productivity when I&#x27;ve learned how to use a search engine (at that time only google). Today the difference is made by Stack Overflow.&lt;&#x2F;p&gt;
&lt;p&gt;Any amount of donation one can send to the website is not enough to really give back to the community that make it possible.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s hope that they won&#x27;t become victim of their own success: many successful and appreciated tools made some wrong decisions and alienated the userbase.&lt;&#x2F;p&gt;
&lt;p&gt;Software developers are aften very picky on themes like advertisement, monetization, personal data usage and too many frills on a tool they&#x27;re using for work.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>RustLab 19 takeaways</title>
        <published>2019-06-30T00:00:00+00:00</published>
        <updated>2019-06-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rustlab19/" type="text/html"/>
        <id>https://apiraino.github.io/rustlab19/</id>
        <content type="html">&lt;p&gt;And here I am back from the &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.rustlab.it&quot;&gt;Italian RustLab 2019&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Really happy to have participated, also extremely honoured I was on the stage of the second most important Rust Italian event &lt;em&gt;*EVER*&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I brought &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;open-taffeta&quot;&gt;my pet project in Rust&lt;&#x2F;a&gt; and tried to describe in simple words what is like bootstrapping your first serious Rust project - after you&#x27;re getting bored of small tools and exercism. A project that some people will have expectations.&lt;&#x2F;p&gt;
&lt;p&gt;Due to some last second rescheduling I opened the conference, so besides the stage fright - I could really see there were a lot of people (~180 is the official number) and then I could relax and enjoy the conference and the workshops. As usual, I&#x27;ll quickly draft a list of things&#x2F;people I don&#x27;t want to forget:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;workshops&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#workshops&quot; aria-label=&quot;Anchor link for: workshops&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Workshops&lt;&#x2F;h3&gt;
&lt;p&gt;Workshops are hard to prepare; you need to have a deep knowledge on the topic even if the workshop is entry-level because even simple questions can be tricky. And then there is always someone expert on the domain that makes a difficult question.&lt;&#x2F;p&gt;
&lt;p&gt;This was a conference where I spent the most time in workshops!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Writing web services with Rust by Emanuele Tagliaferri, Enrico Risa: very good pace, interesting subject. A little sad that we had to wrap the workshop in a hurry while we having the most fun. Actix is an advanced tool that promises crazy fast performances and an extremely small memory footprint. It&#x27;s hard to learn, some of the code you need to write looks really bad; I need another project to put it at work. I may have it. Let&#x27;s see.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Writing modern command-line applications in Rust by David Peter: very interesting subject for me, live-coding session too fast, many could not keep up (I could barely). Many interesting tricks and insights on the Rust programming language. Very clean code, love it!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Getting started with WebAssembly by Ryan Levick: very good pace and great introduction. In my opinion the technology is not ready yet for &amp;quot;general-purpose&amp;quot; use cases. There are still some friction points to keep in mind that won&#x27;t make the experience as pleasant as I would like for frontend development. Great tool, though, to optimize critical parts of a web application.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A workshop always teaches you something about the language. Sometimes a lot.&lt;&#x2F;p&gt;
&lt;p&gt;In general I&#x27;ve learned a lot about these technologies and now I know what I&#x27;d like to try and what to leave aside.&lt;&#x2F;p&gt;
&lt;p&gt;I truly love the passion of people preparing a workshop, working for the community.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;people&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#people&quot; aria-label=&quot;Anchor link for: people&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
People&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve met in person some of the people from the Italian Rust Slack channel, it was great to put a face on those nicknames.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve met again the &amp;quot;usual&amp;quot; Rust conf attendees you always meet :-) that are becoming friends!&lt;&#x2F;p&gt;
&lt;p&gt;Also new people! I&#x27;ve met for the first time Gargi Sharma (she held the talk about &amp;quot;Syscalls for Rustaceans&amp;quot;) and Neville Dipale (&amp;quot;Adopting Rust by gracefully oxidising web applications&amp;quot;), very interesting to listen to their experiences.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve also met one of the main core developer of the Postgres database, the most humble person you will encounter. Did you know that the second most contributor of the codebase is &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.2ndquadrant.com&quot;&gt;a small Italian company&lt;&#x2F;a&gt;?
His insights were really interesting. We talked also on how big cloud playes use opensource products and sometimes they do not give back. Some do, but some don&#x27;t.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;organization&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#organization&quot; aria-label=&quot;Anchor link for: organization&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Organization&lt;&#x2F;h3&gt;
&lt;p&gt;Overall a really good organization, great efforts from &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.develer.com&quot;&gt;Develer&lt;&#x2F;a&gt; to push new technologies in Italy. The catering was stellar :-) My greatest appreciation to the small fistful of people that organized the event.&lt;&#x2F;p&gt;
&lt;p&gt;Organizing a Rust conference in Italy is still task for a hero. Delivering a conference with 180 attendees (according to their stats) is an astounding result. I hope the community will be enriched from this experience and move on and will grow further.&lt;&#x2F;p&gt;
&lt;p&gt;We need to spin this wheel together!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>title: Weekly Rust therapy</title>
        <published>2019-06-21T00:00:00+00:00</published>
        <updated>2019-06-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/therapy/" type="text/html"/>
        <id>https://apiraino.github.io/therapy/</id>
        <content type="html">&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo-clean-all-projects.sh

Space used: 17G total
Cleaning ...
Space used now: 2,4G total
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Dear Scammer, ...</title>
        <published>2019-06-15T00:00:00+00:00</published>
        <updated>2019-06-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/dear-scammer/" type="text/html"/>
        <id>https://apiraino.github.io/dear-scammer/</id>
        <content type="html">&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-1.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Hello, good day to you.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-2.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I&#x27;ll take that as a compliment. Proud to be a &lt;strong&gt;BIG&lt;&#x2F;strong&gt; pervert to your eyes. Or is it just you? Perhaps you need to expand you horizons a little bit? Try to have a wider eye on different things.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-3.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I&#x27;m afraid that friends and colleagues would find all that boring. There&#x27;s one thing you might not be aware of: there are more &lt;em&gt;perverts&lt;&#x2F;em&gt; (as you call us) than you think.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-4.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Unfortunately I don&#x27;t agree on these terms. Cryptocurrencies are a great opportunity to try to decentralize payments. Using them for unlawful activities such as extortion and blackmailing is just doing harm to them. Because of emails like yours, people will tend to think that BTC = illegal activities.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;re doing cryptocurrencies a bad service and you may not fully realize the extend of that in the long term.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-5.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;I already know I have a remote backup: I did it myself on my NextCloud instance.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;scam-email-teil-6.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Judging by the volume of scam emails I receive, I can hardly believe your promise to not bother me again.&lt;&#x2F;p&gt;
&lt;p&gt;By the way, I&#x27;d nitpick on your wording: &lt;em&gt;hacker&lt;&#x2F;em&gt; is indeed a honorable title, but in this case you simply qualify as a &lt;em&gt;scammer&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Best regards,&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>It&#x27;s all the &#x27;00s again</title>
        <published>2019-06-07T00:00:00+00:00</published>
        <updated>2019-06-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/popups/" type="text/html"/>
        <id>https://apiraino.github.io/popups/</id>
        <content type="html">&lt;p&gt;From now on, I will immediately close a tab when landing on a website that attacks me immediately with a pop-up (join us, subscribe, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;Seriously: are we really back to the web 1.0???&lt;&#x2F;p&gt;
&lt;p&gt;If yes, ok, but here&#x27;s the deal: I want the same snappy Internet I used to have back then.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Lifetimes and strings in Rust</title>
        <published>2019-06-04T00:00:00+00:00</published>
        <updated>2019-06-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/lifetimes/" type="text/html"/>
        <id>https://apiraino.github.io/lifetimes/</id>
        <content type="html">&lt;p&gt;Today I&#x27;ve finally cleared a couple of basic concepts about &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; (string slice) and &lt;code&gt;String&lt;&#x2F;code&gt; (string) in Rust. Let&#x27;s very briefly recap.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see the following code snippet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn get_str&amp;lt;&amp;#x27;a&amp;gt;() -&amp;gt; &amp;amp;&amp;#x27;a str {
    let s = String::from(&amp;quot;ok&amp;quot;);
    &amp;amp;s.to_owned()
}

fn main() {
    println!(&amp;quot;{}&amp;quot;, get_str());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This won&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;error[E0515]: cannot return reference to temporary value
 --&amp;gt; src&amp;#x2F;main.rs:3:5
  |
3 |     &amp;amp;s.to_owned()
  |     ^------------
  |     ||
  |     |temporary value created here
  |     returns a reference to data owned by the current function
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and here is why. When we run the application we need to consider how the stack memory works:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;we are in the &lt;code&gt;main&lt;&#x2F;code&gt; body&lt;&#x2F;li&gt;
&lt;li&gt;we invoke &lt;code&gt;get_str()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The function &lt;code&gt;get_str()&lt;&#x2F;code&gt; is allocated on the stack&lt;&#x2F;li&gt;
&lt;li&gt;When we return from &lt;code&gt;get_str()&lt;&#x2F;code&gt; the stack will be freed and everything allocated inside will be destroyed&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Rust will block you and here&#x27;s why it won&#x27;t even compile! It&#x27;s warning you (&amp;quot;a reference to data owned by the current function&amp;quot;) that it won&#x27;t allow you to return a pointer (&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;) to a deallocated memory location.&lt;&#x2F;p&gt;
&lt;p&gt;Inside &lt;code&gt;get_str()&lt;&#x2F;code&gt; we are allocating a new chunk of memory on the stack. This memory location cannot be referenced outside of &lt;code&gt;get_str()&lt;&#x2F;code&gt;, once we return.&lt;&#x2F;p&gt;
&lt;p&gt;The only solution to this is to fix as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn get_str() -&amp;gt; String {
    let s = String::from(&amp;quot;ok&amp;quot;);
    s
}

fn main() {
    println!(&amp;quot;{}&amp;quot;, get_str());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, as a rule of thumb it&#x27;s always better to use &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; when passing strings around, if the content is meant to be read-only, it&#x27;s equivalent to doing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;char *ptr = malloc(10);
ptr[0] = &amp;#x27;\0&amp;#x27;;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But be careful when you&#x27;re returning a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; allocated inside a function. That won&#x27;t be allowed.&lt;&#x2F;p&gt;
&lt;p&gt;Unless you bind that &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; to a parameter lifetime: you explicit the fact that the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; the function receives, will outlive the function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn get_str&amp;lt;&amp;#x27;a&amp;gt;(mut s: &amp;amp;&amp;#x27;a str) -&amp;gt; &amp;amp;&amp;#x27;a str {
    println!(&amp;quot;{}&amp;quot;, s);
    s = &amp;quot;new value&amp;quot;;
    &amp;amp;s
}

fn main() {
    println!(&amp;quot;{}&amp;quot;, get_str(&amp;quot;old value&amp;quot;));
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will print:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;$ .&amp;#x2F;target&amp;#x2F;debug&amp;#x2F;test
old value
new value
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; is allocated outside the function and even though it&#x27;s modified inside it, we&#x27;re allowed to return the pointer; or simply use the &lt;code&gt;String&lt;&#x2F;code&gt; object (like said before).&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Locally replicate a Travis CI build</title>
        <published>2019-06-04T00:00:00+00:00</published>
        <updated>2019-06-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/travis-ci/" type="text/html"/>
        <id>https://apiraino.github.io/travis-ci/</id>
        <content type="html">&lt;p&gt;Lately I wanted to investigate why a Travis CI build failed.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of debugging through a lot of small trial-and-error commits, I&#x27;ve done some tests locally using Docker.&lt;&#x2F;p&gt;
&lt;p&gt;Here I am basically summarizing this &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;49019950&quot;&gt;Stack Overflow answer&lt;&#x2F;a&gt; with a few updates.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!&amp;#x2F;bin&amp;#x2F;bash

# How to reproduce locally a Travis CI build
# source: https:&amp;#x2F;&amp;#x2F;stackoverflow.com&amp;#x2F;a&amp;#x2F;49019950

RANDOM=$$
RAND=$( echo $RANDOM )
BUILDID=&amp;quot;build-$RAND&amp;quot;
# check latest instance available on
# https:&amp;#x2F;&amp;#x2F;hub.docker.com&amp;#x2F;r&amp;#x2F;travisci&amp;#x2F;ci-garnet&amp;#x2F;tags&amp;#x2F;

# Trusty
# INSTANCE=&amp;quot;travisci&amp;#x2F;ci-garnet:packer-1515445631-7dfb2e1&amp;quot;
# Xenial
INSTANCE=&amp;quot;travisci&amp;#x2F;ci-sardonyx:packer-1558623664-f909ac5&amp;quot;

echo &amp;quot;Running $BUILDID&amp;quot;
docker run --name $BUILDID -dit $INSTANCE &amp;#x2F;sbin&amp;#x2F;init

# Then enter the container
# docker exec -it $DOCKER_CONTAINER bash
# or
# docker exec -it $BUILDID bash -l

# su - travis
# curl https:&amp;#x2F;&amp;#x2F;sh.rustup.rs -sSf | sh
# (choose nightly)

# Then execute the commands from a Travis CI build
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>My Git workflow</title>
        <published>2019-05-30T00:00:00+00:00</published>
        <updated>2019-05-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/git-workflow/" type="text/html"/>
        <id>https://apiraino.github.io/git-workflow/</id>
        <content type="html">&lt;h3 id=&quot;git-flow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#git-flow&quot; aria-label=&quot;Anchor link for: git-flow&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;Git flow&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Install git flow, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;petervanderdoes&#x2F;gitflow-avh&quot;&gt;AVH edition&lt;&#x2F;a&gt; because the original one is abandoned and the repo spammed. Also don&#x27;t use any Ubuntu packages, the&#x27;re old.&lt;&#x2F;li&gt;
&lt;li&gt;Setup git flow, merges should default to a &lt;code&gt;develop&lt;&#x2F;code&gt; branch&lt;&#x2F;li&gt;
&lt;li&gt;Feature branch workflow&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git flow feature start &amp;lt;branch_name&amp;gt;
$ git flow feature finish -k &amp;lt;branch_name&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;git-release&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#git-release&quot; aria-label=&quot;Anchor link for: git-release&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;Git release&lt;&#x2F;h3&gt;
&lt;p&gt;Update master branch:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;git checkout master&lt;&#x2F;li&gt;
&lt;li&gt;git merge develop&lt;&#x2F;li&gt;
&lt;li&gt;Ensure you don&#x27;t have unstaged diffs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Do the release (from master branch):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git flow release start 0.3.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Update the CHANGELOG&lt;&#x2F;li&gt;
&lt;li&gt;Update the version number everywhere&lt;&#x2F;li&gt;
&lt;li&gt;(opt.) &lt;code&gt;git flow release publish 0.3.0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git flow release finish 0.3.0&lt;&#x2F;code&gt; (will be merged in master)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;then, tag and push the release:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;git push --tags&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>IRC nickname management</title>
        <published>2019-05-22T00:00:00+00:00</published>
        <updated>2019-05-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/irc/" type="text/html"/>
        <id>https://apiraino.github.io/irc/</id>
        <content type="html">&lt;p&gt;A quick HOWTO guide for nick managment on IRC&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How do I register a nick? &lt;code&gt;&#x2F;msg NickServ register &amp;lt;password&amp;gt; &amp;lt;email&amp;gt;&lt;&#x2F;code&gt; then follow the instructions received by email&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How do I login with my nick? &lt;code&gt;&#x2F;msg NickServ identify &amp;lt;pwd&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How do I change my password: &lt;code&gt;&#x2F;msg NickServ SETPASS &amp;lt;nick&amp;gt; &amp;lt;code_received_by_email&amp;gt; &amp;lt;pwd&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How do I reclaim my nick? You should contact an admin. The nick can be claimed if not used for some time (see IRC server policies)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;using-irc-from-emacs&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-irc-from-emacs&quot; aria-label=&quot;Anchor link for: using-irc-from-emacs&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Using IRC from EMACS&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;emacs_reference&#x2F;blob&#x2F;27331707bceb85b6b21b459f8f13db03bf459c7b&#x2F;.emacs.d&#x2F;personal&#x2F;jman.el&quot;&gt;See my EMACS config&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Format of the &lt;code&gt;authinfo&lt;&#x2F;code&gt; file for IRC credentials:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;machine &amp;lt;irc server&amp;gt; port nickserv user &amp;lt;nick&amp;gt; password &amp;lt;pwd&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Half week .into() Gtk with Rust</title>
        <published>2019-05-09T00:00:00+00:00</published>
        <updated>2019-05-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/gtk-rs-first-experience/" type="text/html"/>
        <id>https://apiraino.github.io/gtk-rs-first-experience/</id>
        <content type="html">&lt;p&gt;I&#x27;ve attended the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Hackfests&#x2F;Rust2019&quot;&gt;Rust+Gnome 2019 Hackfest&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;figure&gt;
        &lt;img src=&quot;&#x2F;images&#x2F;doge.png&quot;&gt;
            &lt;figcaption&gt;Much fun, so spaß&lt;&#x2F;figcaption&gt;
    &lt;&#x2F;figure&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I&#x27;ll recap a bit the experience for future reference.&lt;&#x2F;p&gt;
&lt;p&gt;Code for this ongoing project is hosted on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;poor-postman&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I think of it, I would&#x27;t mind pulling out a basic tutorial out of this experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assess-my-rust-proficiency&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#assess-my-rust-proficiency&quot; aria-label=&quot;Anchor link for: assess-my-rust-proficiency&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Assess my Rust proficiency&lt;&#x2F;h2&gt;
&lt;p&gt;Starting to get comfortable with Rust and its quirks, still uncomfortable with the Rust memory model. Never used GTK before, have a general idea of how a GUI application work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#day-1&quot; aria-label=&quot;Anchor link for: day-1&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Day 1&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;where-did-i-start&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-did-i-start&quot; aria-label=&quot;Anchor link for: where-did-i-start&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Where did I start&lt;&#x2F;h3&gt;
&lt;p&gt;I tried my usual &amp;quot;brute force&amp;quot; approach when learning something new: skip tutorials and documentation, get a working codebase, try to figure out the basics by reading the code and have something working with a lot of copy and paste.&lt;&#x2F;p&gt;
&lt;p&gt;I used as a starting point a workshop that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GuillaumeGomez&quot;&gt;Guillaume&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&quot;&gt;Sebastian&lt;&#x2F;a&gt; held at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&quot;&gt;RustFest &#x27;18 in Rome&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I liked how the application was structured: as a GUI application tends to have boiler-plate (to build the GUI itself, of course!), I want to keep this boiler-plate separated from the business logic, and even better split the GUI code in submodules, each with its own responsibility. This way, the application can grow without getting messy.&lt;&#x2F;p&gt;
&lt;p&gt;However, after writing a working sample application doing some wild copy-pasting, this tutorial didn&#x27;t work very well for me, I got a bit lost in some details that I will explain below, so I&#x27;ve started from scratch with a clean slate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-was-clear-and-helpful&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-clear-and-helpful&quot; aria-label=&quot;Anchor link for: what-was-clear-and-helpful&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What was clear and helpful&lt;&#x2F;h3&gt;
&lt;p&gt;Thanks to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;examples&quot;&gt;examples repo&lt;&#x2F;a&gt; I could hack together some simple examples, although perhaps not ideal in real-life applications, e.g. all the code in the &lt;code&gt;main&lt;&#x2F;code&gt; method does not tell you much about idiomatic GTK applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-was-confusing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-confusing&quot; aria-label=&quot;Anchor link for: what-was-confusing&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What was confusing&lt;&#x2F;h3&gt;
&lt;p&gt;In general the code from the workshop helped me figuring out the basics, but also raised some questions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The memory management with macro like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;macros.rs#L4&quot;&gt;upgrade_weak()&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;app.rs#L207&quot;&gt;downgrade()&lt;&#x2F;a&gt; is (for me) an advanced topic that set me off.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;examples&#x2F;blob&#x2F;5b9c4b2d86a47ed3a5014ec723f3613ce3231827&#x2F;src&#x2F;bin&#x2F;child-properties.rs#L19&quot;&gt;macro replacing it&lt;&#x2F;a&gt; helps but it has some downsides (that macro will be rewritten in the future), but anyway nothing a newbie should worry about.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;async&lt;&#x2F;code&gt; macro defined &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;macros.rs#L19&quot;&gt;here&lt;&#x2F;a&gt; appears to be not needed anymore.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;For any button with multiple states (represented by an &lt;code&gt;Enum&lt;&#x2F;code&gt;), did I had to implement &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;app.rs#L108&quot;&gt;all these methods&lt;&#x2F;a&gt;? Example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum ButtonState {
    Enabled,
    Disabled,
}

impl&amp;lt;&amp;#x27;a&amp;gt; From&amp;lt;&amp;amp;&amp;#x27;a glib::Variant&amp;gt; for ButtonState {
    fn from(v: &amp;amp;glib::Variant) -&amp;gt; ButtonState {}
}

impl From&amp;lt;bool&amp;gt; for ButtonState {
    fn from(v: bool) -&amp;gt; ButtonState {}
}

impl From&amp;lt;ButtonState&amp;gt; for glib::Variant {
    fn from(v: ButtonState) -&amp;gt; glib::Variant {}
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This seems not to be needed anymore, but it is confusing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Why do I need to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;app.rs#L34&quot;&gt;wrap&lt;&#x2F;a&gt; my App struct with layers or &lt;code&gt;Rc&lt;&#x2F;code&gt; and dereferencing methods? Why don&#x27;t I need to do all this when building a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;blob&#x2F;master&#x2F;src&#x2F;app.rs#L34&quot;&gt;simpler example application&lt;&#x2F;a&gt;? Am I leaking memory if I don&#x27;t?&lt;&#x2F;p&gt;
&lt;p&gt;The general question for me is: do I need to wrap Structs to not leak memory? How do I know if my application is leaking memory?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All these questions found an answer in the following days.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;accomplishments-of-today&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#accomplishments-of-today&quot; aria-label=&quot;Anchor link for: accomplishments-of-today&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Accomplishments of today&lt;&#x2F;h3&gt;
&lt;p&gt;After throwing away the first application stub, I&#x27;ve rewrote a second prototype, leveraging what I&#x27;ve learned but keeping things simpler. The second try went much better, I gained a basic understanding on how to structure a basic Gtk without stuffing everything into the &lt;code&gt;main.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#day-2&quot; aria-label=&quot;Anchor link for: day-2&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Day 2&lt;&#x2F;h2&gt;
&lt;p&gt;During the night, while I was wearing off the Club Mate, I&#x27;ve decided that it was boring to just hack together a useless GTK app showcasing just random widgets without a purpose. Therefore I thought that it could be interesting to draft a basic simple &amp;quot;clone&amp;quot; of &lt;a href=&quot;https:&#x2F;&#x2F;www.getpostman.com&#x2F;&quot;&gt;Postman&lt;&#x2F;a&gt;, the great tool to test APIs.&lt;&#x2F;p&gt;
&lt;p&gt;What I need is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An input widget to enter a URL&lt;&#x2F;li&gt;
&lt;li&gt;A text widget with a listener to paste the HTTP response into (with some nice formatting, maybe)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I can leverage and get quickly out of the way the HTTP part using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;reqwest&quot;&gt;reqwest&lt;&#x2F;a&gt;. And to add some spice to the receipt, why not making it asynchronous, so the main GUI thread is not blocked until the remote server answers.&lt;&#x2F;p&gt;
&lt;p&gt;A quick question lead to a simple answer: spawn a thread inside the event manager of the input widget. Here&#x27;s a succint version of the implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&amp;#x2F;&amp;#x2F; create a transmit&amp;#x2F;receive facility
let (tx, rx) = glib::MainContext::channel(glib::PRIORITY_DEFAULT);

&amp;#x2F;&amp;#x2F; create the text widget and its text buffer
let response_container = gtk::TextView::new();
let buf = response_container.get_buffer().expect(&amp;quot;dang!&amp;quot;);
buf.set_text(&amp;quot;Hey, placeholder text&amp;quot;);

&amp;#x2F;&amp;#x2F; spawn the thread when the user press &amp;lt;Return&amp;gt; on the input URL
&amp;#x2F;&amp;#x2F; pass the transmitter
url_input.connect_activate(clone!(tx =&amp;gt; move |_| {

    let client = reqwest::Client::new();

    thread::spawn(clone!(tx =&amp;gt; move || {
        let mut resp = client
            .post(...)
            .send()
            .expect(&amp;quot;Request failed&amp;quot;);
        let resp_data : Value = resp.json().unwrap();

        &amp;#x2F;&amp;#x2F; send result to channel
        tx.send(format!(&amp;quot;{}&amp;quot;, resp_data))
            .expect(&amp;quot;Couldn&amp;#x27;t send data to channel&amp;quot;);
    }));
}));

&amp;#x2F;&amp;#x2F; attach the receiver, write the text into the buffer
rx.attach(None, move |response_data| {
    buf.set_text(&amp;amp;response_data);
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;what-was-confusing-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-confusing-1&quot; aria-label=&quot;Anchor link for: what-was-confusing-1&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What was confusing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I had to figure out a bit of Gtk &amp;quot;parlance&amp;quot;, example:&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;Gtk::Button::set_sensitive(bool) = to enable&amp;#x2F;disable a button
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;accomplishments-of-today-1&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#accomplishments-of-today-1&quot; aria-label=&quot;Anchor link for: accomplishments-of-today-1&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Accomplishments of today&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removed all the code that yesterday I&#x27;ve found confusing, things seems to work either way: no idea if I broke anything :-)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Understood a bit better how to read the GTK-rs APIs (example: the difference between &lt;code&gt;Entry&lt;&#x2F;code&gt; and &lt;code&gt;EntryExt&lt;&#x2F;code&gt;), where to look for methods implemented by widgets, where to look for events (&lt;code&gt;connect_*&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Added a thread &amp;quot;spawner&amp;quot; inside a widget event manager&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;day-3&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#day-3&quot; aria-label=&quot;Anchor link for: day-3&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Day 3&lt;&#x2F;h2&gt;
&lt;p&gt;Unfortunately I could not participate as I was offlined due to previous arrangements.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-4&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#day-4&quot; aria-label=&quot;Anchor link for: day-4&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Day 4&lt;&#x2F;h2&gt;
&lt;p&gt;Today I tried experimenting with more new things. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&quot;&gt;@antoyo&lt;&#x2F;a&gt; showed me his shiny new toy &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&#x2F;relm&quot;&gt;relm&lt;&#x2F;a&gt; to create a GUI application using a declarative approach based on macros.&lt;&#x2F;p&gt;
&lt;p&gt;A really seducing way to create GUI applications, because - like we discussed - the GUI code shouldn&#x27;t get in my way, I want to concentrate on the &amp;quot;business logic&amp;quot; of the application.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately the first try didn&#x27;t go too far as I got a bit lost in importing the right &lt;code&gt;relm_*&lt;&#x2F;code&gt; crates and macros. That looks like a stupid reason to be blocked :-) but at some point I&#x27;ve stashed the branch and got back the &amp;quot;classic&amp;quot; way. I&#x27;ll definitively check &lt;code&gt;relm&lt;&#x2F;code&gt; at a later stage.&lt;&#x2F;p&gt;
&lt;p&gt;Today I&#x27;ve added a simple Http client (leveraging the &lt;code&gt;reqwest&lt;&#x2F;code&gt; crate), and a couple more widgets and started testing this simple application.&lt;&#x2F;p&gt;
&lt;p&gt;Things got slower because I tried decoupling the business logic of the application, doing weird things like trying to move and handle gtk objects far from their context. I couldn&#x27;t make sense of what I was doing, so I gave up.&lt;&#x2F;p&gt;
&lt;p&gt;As the last day went on, I felt more and more tired so as I produced less and less code I was trolling more and more the gtk-rs team :-) I&#x27;ve forked the gtk-rs repo and stashed some small PR that I hope to push real soon, in time for the next major release.&lt;&#x2F;p&gt;
&lt;p&gt;It is absolutely great to have maintainers behind your back giving explainations and encouraging you to submit PRs even for trivial things. This is the best part of the open-source development.&lt;&#x2F;p&gt;
&lt;p&gt;But in the end I&#x27;ve accomplished less that I wanted, that&#x27;s price to pay for experimenting :-)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-was-confusing-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-was-confusing-2&quot; aria-label=&quot;Anchor link for: what-was-confusing-2&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What was confusing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;I didn&#x27;t not manage to &lt;em&gt;quickly&lt;&#x2F;em&gt; hack together a new version of the application using relm&lt;&#x2F;li&gt;
&lt;li&gt;Rust quirks got again in the way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But that was basically all I can complain for this day.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;accomplishments-of-today-2&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#accomplishments-of-today-2&quot; aria-label=&quot;Anchor link for: accomplishments-of-today-2&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Accomplishments of today&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Got a bit more comfortable with the GUI code and how it&#x27;s meant to be written&lt;&#x2F;li&gt;
&lt;li&gt;Added a (yet unfinished) Http client to manage the connections&lt;&#x2F;li&gt;
&lt;li&gt;Prepared a small PR for the &lt;code&gt;gtk-rs&lt;&#x2F;code&gt; main repository (that likely will be merged before the next main release)&lt;&#x2F;li&gt;
&lt;li&gt;Learned a bit more on how to correctly stack widgets horizontally and vertically and how to lay down things like you imagine them&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;general-acknowledgements&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#general-acknowledgements&quot; aria-label=&quot;Anchor link for: general-acknowledgements&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
General acknowledgements&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;strong&gt;amazing&lt;&#x2F;strong&gt; gtk-rs people doing an &lt;strong&gt;amazing&lt;&#x2F;strong&gt; job on the Gtk tookit.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;amazing&lt;&#x2F;strong&gt; gtk-rs people patiently explaining me a lot of basic stuff :-)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;gtk-rs-first-experience&#x2F;kinvolk.io&quot;&gt;kinvolk.io&lt;&#x2F;a&gt; for hosting the whole band and fueling us with an endless stream of caffeine.&lt;&#x2F;p&gt;
&lt;p&gt;Once again the Rust developer community proved to be incredibly competent and helpful.&lt;&#x2F;p&gt;
&lt;p&gt;It was great meeting again the gtk-rs and some really good friends.&lt;&#x2F;p&gt;
&lt;p&gt;I couldn&#x27;t have asked more from a workhop.&lt;&#x2F;p&gt;
&lt;p&gt;As an unexpected bonus, experienced Gtk-rs developers and maintainers were really interested in my questions and feedback to understand where the pain points were to a complete newbie with no prior experience of the toolkit. This report is also for them!&lt;&#x2F;p&gt;
&lt;center&gt;&lt;h3&gt;Thank you folks, you are great!&lt;&#x2F;h3&gt;&lt;&#x2F;center&gt;
&lt;h2 id=&quot;references&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#references&quot; aria-label=&quot;Anchor link for: references&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
References&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sdroege&#x2F;rustfest-rome18-gtk-gst-workshop&#x2F;tree&#x2F;master&#x2F;src&quot;&gt;RustFest 18 workshop on GTK-rs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Misc &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;World&#x2F;Rust&quot;&gt;GTK applications in Rust&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;examples&quot;&gt;GTK-rs examples&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gtk-rs.org&#x2F;docs-src&#x2F;&quot;&gt;Documentation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Other projects to inspect for good first issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;GNOME&#x2F;fractal&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;BrainBlasted&#x2F;Social&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;World&#x2F;podcasts&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;World&#x2F;Shortwave&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;users&#x2F;haecker-felix&#x2F;projects&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;haecker-felix&#x2F;Authenticator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&#x2F;relm&quot;&gt;Relm&lt;&#x2F;a&gt;: inspired by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gdotdesign&#x2F;elm-ui&quot;&gt;Elm&lt;&#x2F;a&gt;, a library that abstracts the details when building a GUI.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #2: photorec and srm</title>
        <published>2019-04-08T00:00:00+00:00</published>
        <updated>2019-04-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-2/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-2/</id>
        <content type="html">&lt;p&gt;How many times did I delete by mistake some photos I had dumped from the camera SD card? Too many.&lt;&#x2F;p&gt;
&lt;p&gt;However I&#x27;ve always got my back covered by &lt;a href=&quot;https:&#x2F;&#x2F;www.cgsecurity.org&#x2F;wiki&#x2F;PhotoRec&quot;&gt;photorec&lt;&#x2F;a&gt;, a little and very simple tool to use. You just launch it on your SD card and while it does the job you can go grab a coffee.&lt;&#x2F;p&gt;
&lt;p&gt;Photorec works with virtually any filesystem, because it has no notion of filesystem. When a file is deleted, most of the times the actual data is still there, only the entry in the index table is deleted so the filesystem knows that that cluster is reusable.&lt;&#x2F;p&gt;
&lt;p&gt;Photorec first figures out the block size and then &amp;quot;blindly&amp;quot; proceeds scanning the surface in steps, looking for known file headers (jpg, png, zip, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;If some adjacent clusters belonging to a file have been (partially) overwritten, nothing can help. This is why it&#x27;s important to attempt a file recover as soon as possible before using the device again.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;figure&gt;
        &lt;img src=&quot;&#x2F;images&#x2F;popart.jpg&quot;&gt;
        &lt;figcaption&gt;Pop Art by chance&lt;&#x2F;figcaption&gt;
    &lt;&#x2F;figure&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;This raises the question about how to securely delete files.&lt;&#x2F;p&gt;
&lt;p&gt;There are many options, but the tool I find myself using is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Srm_(Unix)&quot;&gt;srm&lt;&#x2F;a&gt; as it&#x27;s a drop-in replacement for &lt;code&gt;rm&lt;&#x2F;code&gt;. Uses &lt;code&gt;&#x2F;dev&#x2F;urandom&lt;&#x2F;code&gt; to overwrite clustes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ srm -r ~&amp;#x2F;Projects&amp;#x2F;private_stuff
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, remember these two golden rules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Never sell or give away your old SD cards, destroy them.&lt;&#x2F;li&gt;
&lt;li&gt;For some fun, buy used SD cards off of eBay ;-)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #3: pass</title>
        <published>2019-04-08T00:00:00+00:00</published>
        <updated>2019-04-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation-3/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation-3/</id>
        <content type="html">&lt;p&gt;After a couple of iterations to increasingly secure my accounts, I think I&#x27;ve finally found the sweet spot between ease of use and features.&lt;&#x2F;p&gt;
&lt;p&gt;The path leading to &lt;strong&gt;pass&lt;&#x2F;strong&gt; was more or less:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In the beginning, it was &amp;quot;saving passwords in the browser&amp;quot;. Works fine until you realize that an attacker can access the decrypted passwords from the browser&#x27;s memory because (as far as I know) passwords stays decrypted as long as the browser stays open.&lt;&#x2F;li&gt;
&lt;li&gt;Then I had a quite long relationship with &lt;a href=&quot;https:&#x2F;&#x2F;keepassxc.org&quot;&gt;KeepassXC&lt;&#x2F;a&gt; and its great &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;keepassxreboot&#x2F;keepassxc-browser&quot;&gt;browser extension&lt;&#x2F;a&gt;; the small team working on it is amazing, but in the end I&#x27;ve found KeepassXC GUI cumbersome, the CLI features lagging behind and the browser extension pattern matching (to fill login fields) sometimes lackluster.&lt;&#x2F;li&gt;
&lt;li&gt;Finally I&#x27;ve looked for an offline solution, because it was the only way I could have full control.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve completely skipped the step of &amp;quot;online password keyrings&amp;quot; because I don&#x27;t have enough info to assess their security. Some of them have Javascript frontends that have been exploited, then patched, then exploited again. Others seems more secure, but only because there were no public disclosure about security incidents. Besides, I can reach syncronization on different devices using another workflow (detailed later).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.passwordstore.org&quot;&gt;pass&lt;&#x2F;a&gt;, on the other hand, is an incredibly powerful and simple tool to manage passwords. Its strength lies in being a simple tool that does &lt;em&gt;one&lt;&#x2F;em&gt; thing well: storing passwords. The secret of its success is the long list of ancillary tools the community has grown around it and the possibility to chain it with other tools.&lt;&#x2F;p&gt;
&lt;p&gt;So, the points in favor of &lt;code&gt;pass&lt;&#x2F;code&gt; are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Store passwords offline, easy management, good command line (generate new entries, rename and edit)&lt;&#x2F;li&gt;
&lt;li&gt;The keyring is encrypted with a GPG key you choose&lt;&#x2F;li&gt;
&lt;li&gt;Password entries stays encrypted at all times: you only decrypt the entry that you need (each password entry is a separate GPG file) and will briefly stay in the clipboard (45 seconds by default)&lt;&#x2F;li&gt;
&lt;li&gt;Git integration: syncronize the encrypted keyring on a private, hosted repo. I can move the keyring anywhere I need by cloning the repo.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;i3wm&lt;&#x2F;code&gt; integration with &lt;a href=&quot;https:&#x2F;&#x2F;git.zx2c4.com&#x2F;password-store&#x2F;tree&#x2F;contrib&#x2F;dmenu&quot;&gt;passmenu&lt;&#x2F;a&gt;: a useful script to access the keyring from &lt;code&gt;dmenu&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Easy OTP generation &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tadfisher&#x2F;pass-otp&quot;&gt;using a plugin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last point, although admittedly very useful, should not be evangelized as it defeats the purpose of OTP token generation (i.e. keep the OTP seeds separated from the device that stores the passwords).&lt;&#x2F;p&gt;
&lt;p&gt;The topic has also been discussed by the team providing the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;browserpass&#x2F;browserpass-extension&#x2F;issues&#x2F;76&quot;&gt;browser extension&lt;&#x2F;a&gt; and finally decided to externalize this feature, leaving the decision to the user.&lt;&#x2F;p&gt;
&lt;p&gt;Lately I&#x27;ve equipped myself with a Yubikey, and discovered that I can further enhance this scenario using a seemingly convoluted workflow, but it should balance ease of use and security. More on that in a separate article.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Reporting from Rust LATAM 2019</title>
        <published>2019-04-06T00:00:00+00:00</published>
        <updated>2019-04-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/latam/" type="text/html"/>
        <id>https://apiraino.github.io/latam/</id>
        <content type="html">&lt;p&gt;Last week I&#x27;ve returned from Montevideo after having attended &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;rustlatam.org&quot;&gt;Rust LATAM&lt;&#x2F;a&gt;, the first conference in Latin America focused on the Rust programming language.&lt;&#x2F;p&gt;
&lt;p&gt;I have been involved in this conference as an organizer by a very fortuitous and unlikely series of events, which in the end led me to be in Montevideo unloading taxi cabs full of carton boxes and going around an auditorium handing a microphone to attendees. And not sleeping very much for a week.&lt;&#x2F;p&gt;
&lt;p&gt;All in all, it was a humbling experience, where I&#x27;ve learned a lot about things and about people. I came back home with a debt of unslept hours but with some new friends in my contact list.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-technical-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-technical-experience&quot; aria-label=&quot;Anchor link for: the-technical-experience&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;The technical experience&lt;&#x2F;h3&gt;
&lt;p&gt;Being there on the first line grants you some privileges that, alone, make it worth the effort. I had the chance to talk with some really nice people from the Rust community; I&#x27;ve asked questions, exchanged opinions and ideas and everything happened in the nicest and most constructive way I could imagine, far from the (sometime) toxic social media places.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-organizational-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-organizational-experience&quot; aria-label=&quot;Anchor link for: the-organizational-experience&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;The organizational experience&lt;&#x2F;h3&gt;
&lt;p&gt;Organizing a conference is always a burden and in the last two months basically everything is finalized, therefore it&#x27;s when things become hectic. Nothing will ever be perfect, but attention to detail can be key to a better experience for attendees and speakers. Previous experiences in helping conferences allowed me to bring a concrete contribution to the teamwork.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve observed and really appreciated the multilingual content of the conference. It added a richness and a trait of inclusiveness uncommon to many conferences. In an international conference, English is always the &amp;quot;lingua franca&amp;quot;: on the other hand it is important to involve and actively support people not familiar with a foreign language, because it&#x27;s their contribution that matters, and the language should not be a barrier that may shy them away. Therefore I welcome conferences that takes steps in order to improve in this area (f.e. through a live translation service or subtitles).&lt;&#x2F;p&gt;
&lt;p&gt;Also, having a lot of students turned out to be a winning choice and - again - a big plus sign on the inclusiveness. Thanks to an intuition &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spastorino&quot;&gt;Santiago&lt;&#x2F;a&gt; (the mastermind behind the conference), the student scolarship program opened the gates to people that could have been excluded because of the conference price tag.&lt;&#x2F;p&gt;
&lt;p&gt;We hope that this seed will help flourishing a generation of new developers that will ... complain about Rust compile-time checks :-) but eventually overcome them and support their local communities.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, working shoulder-to-shoulder with people and sharing every waking hour, sometimes creates a kind of bonding experience; which leads us to ...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-human-experience&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-human-experience&quot; aria-label=&quot;Anchor link for: the-human-experience&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;The human experience&lt;&#x2F;h3&gt;
&lt;p&gt;It was my first time in Latin America.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I felt is the profound discomfort at customs (they take pictures and fingerprints at any major checkpoint, you have no right to know how your data will be handled and for how long).&lt;&#x2F;p&gt;
&lt;p&gt;And then you find yourself in a new world where countries are ten times bigger than your country, where &lt;em&gt;some cities&lt;&#x2F;em&gt; are as big as entire countries. You&#x27;ll learn about people and their stories (sometimes their pains) and it&#x27;s a profoundly humbling experience, always enriching to get a wider perspective on the world and things that really matter.&lt;&#x2F;p&gt;
&lt;p&gt;A special shout-out also to &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PotHix&quot;&gt;PotHix&lt;&#x2F;a&gt; and &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mayela&quot;&gt;Maricela&lt;&#x2F;a&gt;, the kind of &amp;quot;no-sleep-until-it&#x27;s-done&amp;quot; people that make things happen - hope to have the privilege to work with you again :heart:&lt;&#x2F;p&gt;
&lt;p&gt;In the end you feel like you have &lt;em&gt;survived&lt;&#x2F;em&gt; such an experience, and even though on the flight back the luggage was &lt;a href=&quot;&#x2F;2019&#x2F;04&#x2F;06&#x2F;stolen-laptop.html&quot;&gt;unfortunately lighter than expected&lt;&#x2F;a&gt;, my bag of experiences was overflowing with feelings, colors and awe. I don&#x27;t read often about this: I hope this privilege is not underestimated.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Losing my laptop: lessons learned</title>
        <published>2019-04-06T00:00:00+00:00</published>
        <updated>2019-04-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/stolen-laptop/" type="text/html"/>
        <id>https://apiraino.github.io/stolen-laptop/</id>
        <content type="html">&lt;p&gt;While I was at the &lt;a href=&quot;&#x2F;2019&#x2F;04&#x2F;06&#x2F;latam.html&quot;&gt;Rust LATAM conference&lt;&#x2F;a&gt;, bad luck struck me hard. As a side effect of being tired, I&#x27;ve lost my backpack with passport and laptop.&lt;&#x2F;p&gt;
&lt;p&gt;I could manage to exit Uruguay with some help from local friends and the local embassy of my country. On the other hand, unfortunately, the laptop should be considered &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Missing_in_action&quot;&gt;M.I.A.&lt;&#x2F;a&gt; as was not promptly retrieved. At the end of this blurb of text I will detail a bit the terrible customer support of Uber handling this case.&lt;&#x2F;p&gt;
&lt;p&gt;A lost laptop, when it&#x27;s your main interface to the digital world, is a precious lesson on how to secure your device and an interesting (albeit expensive!) test of my setup. So let&#x27;s attempt a retrospective (note: I&#x27;m a Linux user).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-went-well&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-went-well&quot; aria-label=&quot;Anchor link for: what-went-well&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What went well&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Password keyring GPG-encrypted. I use &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.passwordstore.org&quot;&gt;pass&lt;&#x2F;a&gt;; no password is saved in any browser or online third-party password storage (e.g. LastPass, Bitwarden, 1password, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;The master GPG key protecting the keyring is on a Yubikey, always kept separated from the laptop when not attended&lt;&#x2F;li&gt;
&lt;li&gt;The GPG-encrypted keyring is syncronized on a private, self-hosted GIT repo&lt;&#x2F;li&gt;
&lt;li&gt;Offline backup of the GPG private keys on a LUKS encrypted removable device. Password to decrypt the LUKS device kept offline on a piece of paper.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-can-be-improved-and-how&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-be-improved-and-how&quot; aria-label=&quot;Anchor link for: what-can-be-improved-and-how&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
What can be improved (and how)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Some data lost because not committed&#x2F;backed up (not deemed important). Suggestion: the content of the laptop should be considered a local cache.&lt;&#x2F;li&gt;
&lt;li&gt;Laptop access only protected by a login password. Suggestion: use &lt;a href=&quot;https:&#x2F;&#x2F;developers.yubico.com&#x2F;yubico-pam&quot;&gt;yubico PAM module&lt;&#x2F;a&gt; to login using the Yubikey&lt;&#x2F;li&gt;
&lt;li&gt;Disk not encrypted. Suggestion: encrypt the whole disk or at least a partition with the important things. Use &lt;a href=&quot;https:&#x2F;&#x2F;www.dyne.org&#x2F;software&#x2F;tomb&quot;&gt;tomb&lt;&#x2F;a&gt;. This partition should be decrypted on successful login and re-encrypted on logoff, hibernate, shutdown.&lt;&#x2F;li&gt;
&lt;li&gt;Browser left with some open sessions. Suggestion: not much you can do. Sometimes it&#x27;s impractical to always logout and login. Find a good compromise based on your workflow and threat model.&lt;&#x2F;li&gt;
&lt;li&gt;Email client with local mail storage and local contact list (just the few I still contact through email). Suggestion: no good suggestion here. Maybe use a webmail interfaces?&lt;&#x2F;li&gt;
&lt;li&gt;Need a new laptop. Suggestion: shit happens, get over with it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;countermeasures&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#countermeasures&quot; aria-label=&quot;Anchor link for: countermeasures&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Countermeasures&lt;&#x2F;h3&gt;
&lt;p&gt;Actions took to rebuild and secure my environment:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Retrieved password keyring from the remote repo&lt;&#x2F;li&gt;
&lt;li&gt;Retrieved &lt;code&gt;i3wm&lt;&#x2F;code&gt; configuration from my &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.gitlab.com&#x2F;apiraino&#x2F;dotfiles&quot;&gt;dotfiles&lt;&#x2F;a&gt; repo&lt;&#x2F;li&gt;
&lt;li&gt;Generated new SSH key to access remote servers and services. Deleted old pub keys from any &lt;code&gt;.ssh&#x2F;authorized_keys&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Changed a couple of passwords and invalidated a couple of active sessions&lt;&#x2F;li&gt;
&lt;li&gt;Refreshed API keys for a couple of services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;about-uber&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-uber&quot; aria-label=&quot;Anchor link for: about-uber&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
About Uber&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, let&#x27;s close with with a personal note about Uber.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s the single essential thing that must happen when you leave an important item in a taxi? Being able to immediately contact the driver. With Uber this is not possible, because as the fare finishes, you lose the phone number of your driver.&lt;&#x2F;p&gt;
&lt;p&gt;So, after realizing that my laptop was in the Uber car, we used their App to file a &amp;quot;Lost Item&amp;quot; report. Second unnerving thing: they don&#x27;t put you through a human being, you just push a button, end of the report.&lt;&#x2F;p&gt;
&lt;p&gt;After a radio silence of one day, we decided to pay a visit to the Uber headquarters in Montevideo. We have patiently explained the situation to a clerk (that verified and validated our story) and told us that the driver assured that no backpack was in their car.&lt;&#x2F;p&gt;
&lt;p&gt;We want to trust Uber and their drivers&#x27; word, so we ask if it&#x27;s possible to contact the clients that took that car after us. Sure, it&#x27;s possible but for privacy reasons these phone numbers can&#x27;t be disclosed (makes sense). The clerk gives us a Post-It note with two emails to contact: &lt;code&gt;lert@uber.com&lt;&#x2F;code&gt; and &lt;code&gt;legal@uber.com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We write immediately and were disappointed to discover that &lt;code&gt;legal@uber.com&lt;&#x2F;code&gt; is not a valid recipient. Radio silence from &lt;code&gt;lert@uber.com&lt;&#x2F;code&gt;, not even a bot responding they&#x27;ve received our email.&lt;&#x2F;p&gt;
&lt;p&gt;We keep on sending emails every two days to &lt;code&gt;lert@uber.com&lt;&#x2F;code&gt; but now it&#x27;s just plain stalking, we don&#x27;t really expect to a) receive an answer and b) to retrieve my backpack after a week.&lt;&#x2F;p&gt;
&lt;p&gt;Uber support in managing my case was simply a joke.&lt;&#x2F;p&gt;
&lt;p&gt;This is one of the most clear examples of what&#x27;s wrong in this new VC-funded economy: they provide a service without owning a single asset (e.g. cars or employees providing the service); they take no responsibility and their customer support is unwilling to help, when help is really needed.&lt;&#x2F;p&gt;
&lt;p&gt;If I needed one more reason to be skeptic towards some of these &amp;quot;disrupting&amp;quot; startups, well, here it is.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Configuring Postfix and Dovecot</title>
        <published>2019-03-12T00:00:00+00:00</published>
        <updated>2019-03-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/configuring-postfix-dovecot/" type="text/html"/>
        <id>https://apiraino.github.io/configuring-postfix-dovecot/</id>
        <content type="html">&lt;h3 id=&quot;the-itch-that-needed-to-be-scratched&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-itch-that-needed-to-be-scratched&quot; aria-label=&quot;Anchor link for: the-itch-that-needed-to-be-scratched&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;The itch that needed to be scratched&lt;&#x2F;h3&gt;
&lt;p&gt;I had to move my own server on another machine because the old VPS was aging and due to be turned off soon-ish by the provider.&lt;&#x2F;p&gt;
&lt;p&gt;So I took the chance to re-learn for the n-th time some &lt;i&gt;madz sysamin skillz&lt;&#x2F;i&gt; and configure to the maximum security extend possible the mail server.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, the struggle. Being something that I don&#x27;t usually do, I always start almost from scratch and have to educate me over terms and protocols like POP3, IMAP, STARTTLS and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Then, the utter hostility of these services towards the poor soul that needs to implement the services. Really a lot of time was spent looking for resources and trying a myriad of different settings until finding the right combo that make everything play along the way I wanted.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some lessons learned.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-can-t-simply-live-under-a-ssl-rock&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-can-t-simply-live-under-a-ssl-rock&quot; aria-label=&quot;Anchor link for: you-can-t-simply-live-under-a-ssl-rock&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;You can&#x27;t simply live under a SSL rock&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;ve tried since quite some time to implement the industry best practices and &lt;a href=&quot;&#x2F;2018&#x2F;09&#x2F;22&#x2F;tls-too-soon.html&quot;&gt;tried to lock myself in an ideal world&lt;&#x2F;a&gt; where everything has the green sigil of Let&#x27;s Encrypt.&lt;&#x2F;p&gt;
&lt;p&gt;Well, I&#x27;ve realized that this is simply not possible because there&#x27;s always a non-negligible percentage of servers that simply don&#x27;t care as much and if you want to talk with them, you have to be more tolerant.&lt;&#x2F;p&gt;
&lt;p&gt;So you dutifully implement STARTTLS, hoping this will be a hint to move the conversation to a more secure place. Often it won&#x27;t be the case and you&#x27;ll still see server from important provider sending in plain text!&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m appalled by how a lot is discussed about privacy and security but still - in the business world - a lot of sensible documents are exchanged via email in plain text.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mail-protocols-are-insecure-by-design-and-it-shows&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#mail-protocols-are-insecure-by-design-and-it-shows&quot; aria-label=&quot;Anchor link for: mail-protocols-are-insecure-by-design-and-it-shows&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Mail protocols are insecure by design, and it shows&lt;&#x2F;h3&gt;
&lt;p&gt;At the 35C3 I could attend a very interesting talk about the (in)famous &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;35c3-9463-attacking_end-to-end_email_encryption&quot;&gt;Efail S&#x2F;MIME vulnerability&lt;&#x2F;a&gt; (still not completely resolved!). The speaker showed how the root evil of everything is an inordinate amount of patching over protocols (POP3&#x2F;SMTP) that are not supposed to be secure, because born in a more trustful world than today. Or, like the Postfix manual aptly says: &amp;quot;In a distant past, the Internet was a friendly environment&amp;quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-are-a-hamster-running-in-a-wheel&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-are-a-hamster-running-in-a-wheel&quot; aria-label=&quot;Anchor link for: you-are-a-hamster-running-in-a-wheel&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;You are a hamster running in a wheel&lt;&#x2F;h3&gt;
&lt;p&gt;The moment you start a task like this, you realize you have a long way ahead. Then you patiently make your way in that jungle that is Postfix and Dovecot. Then you succeed and you are - oh - so proud of your server. You&#x27;ll probably say to yourself: this time I will document everything.&lt;&#x2F;p&gt;
&lt;p&gt;But then I gave up because in the end it doesn&#x27;t make sense to put all the knowledge of a sysadmin on a Markdown file. I won&#x27;t simply remember that &lt;em&gt;that&lt;&#x2F;em&gt; setting solved that problem, I cannot write a book with all the steps. Can you write down all the steps and possible pitfalls when compiling a C source code?&lt;&#x2F;p&gt;
&lt;p&gt;And finally you realize that in a month you will have forgotten everything and the next time you&#x27;ll start from scratch, exactly like this time and time before: you basically live in the &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;www.imdb.com&#x2F;title&#x2F;tt0107048&#x2F;&quot;&gt;Groundhog Day movie&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Flutter: basically upselling Firebase services</title>
        <published>2019-02-01T00:00:00+00:00</published>
        <updated>2019-02-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/flutter-first-impressions/" type="text/html"/>
        <id>https://apiraino.github.io/flutter-first-impressions/</id>
        <content type="html">&lt;p&gt;(the future is here and it&#x27;s scary)&lt;&#x2F;p&gt;
&lt;p&gt;First impressions after trying Flutter (that is: a completely different thing I usually develop with).&lt;&#x2F;p&gt;
&lt;p&gt;In two or three days, I went from zero (i.e. install Android Studio and copy-paste the first tutorial) to a complete (albeit simple) app with multiple screens (&amp;quot;Activities&amp;quot;, in Android parlance), routers and some advanced features like asyncronous network fetching (using &lt;code&gt;Future&lt;&#x2F;code&gt;) and background tasks (the &lt;code&gt;compute&lt;&#x2F;code&gt; keyword).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d say the worst obstacle was rewiring my brain to use Android Studio.&lt;&#x2F;p&gt;
&lt;p&gt;Having a look at the stacktrace of a simple &amp;quot;file not found&amp;quot; error, gives an idea of the layers upon which you&#x27;re building your application (and I suspect that much more is hidden, I don&#x27;t even see the Java underlying exception!) before getting to the actionable &amp;quot;levers&amp;quot;:&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;Click to expand this blurb&lt;&#x2F;summary&gt;
&lt;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Performing hot restart...
Syncing files to device Android SDK built for x86...
Restarted application in 1,546ms.
I&amp;#x2F;flutter (23143): got tap
I&amp;#x2F;flutter (23143): ══╡ EXCEPTION CAUGHT BY IMAGE RESOURCE SERVICE ╞════════════════════════════════════════════════════
I&amp;#x2F;flutter (23143): The following assertion was thrown resolving an image codec:
I&amp;#x2F;flutter (23143): Unable to load asset: assets&amp;#x2F;rooms&amp;#x2F;item4.jpg
I&amp;#x2F;flutter (23143):
I&amp;#x2F;flutter (23143): When the exception was thrown, this was the stack:
I&amp;#x2F;flutter (23143): #0      PlatformAssetBundle.load (package:flutter&amp;#x2F;src&amp;#x2F;services&amp;#x2F;asset_bundle.dart:221:7)
I&amp;#x2F;flutter (23143): &amp;lt;asynchronous suspension&amp;gt;
I&amp;#x2F;flutter (23143): #1      AssetBundleImageProvider._loadAsync (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_provider.dart:429:44)
I&amp;#x2F;flutter (23143): &amp;lt;asynchronous suspension&amp;gt;
I&amp;#x2F;flutter (23143): #2      AssetBundleImageProvider.load (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_provider.dart:414:14)
I&amp;#x2F;flutter (23143): #3      ImageProvider.resolve.&amp;lt;anonymous closure&amp;gt;.&amp;lt;anonymous closure&amp;gt; (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_provider.dart:267:86)
I&amp;#x2F;flutter (23143): #4      ImageCache.putIfAbsent (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_cache.dart:143:20)
I&amp;#x2F;flutter (23143): #5      ImageProvider.resolve.&amp;lt;anonymous closure&amp;gt; (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_provider.dart:267:63)
I&amp;#x2F;flutter (23143): #6      SynchronousFuture.then (package:flutter&amp;#x2F;src&amp;#x2F;foundation&amp;#x2F;synchronous_future.dart:38:29)
I&amp;#x2F;flutter (23143): #7      ImageProvider.resolve (package:flutter&amp;#x2F;src&amp;#x2F;painting&amp;#x2F;image_provider.dart:265:30)
I&amp;#x2F;flutter (23143): #8      _ImageState._resolveImage (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;image.dart:630:20)
I&amp;#x2F;flutter (23143): #9      _ImageState.didChangeDependencies (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;image.dart:605:5)
I&amp;#x2F;flutter (23143): #10     StatefulElement._firstBuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3846:12)
I&amp;#x2F;flutter (23143): #11     ComponentElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3696:5)
I&amp;#x2F;flutter (23143): #12     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #13     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #14     SingleChildRenderObjectElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:4860:14)
I&amp;#x2F;flutter (23143): #15     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #16     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #17     SingleChildRenderObjectElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:4860:14)
I&amp;#x2F;flutter (23143): #18     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #19     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #20     ComponentElement.performRebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3732:16)
I&amp;#x2F;flutter (23143): #21     Element.rebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3547:5)
I&amp;#x2F;flutter (23143): #22     ComponentElement._firstBuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3701:5)
I&amp;#x2F;flutter (23143): #23     ComponentElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3696:5)
I&amp;#x2F;flutter (23143): #24     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #25     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #26     ComponentElement.performRebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3732:16)
I&amp;#x2F;flutter (23143): #27     Element.rebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3547:5)
I&amp;#x2F;flutter (23143): #28     ComponentElement._firstBuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3701:5)
I&amp;#x2F;flutter (23143): #29     ComponentElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3696:5)
I&amp;#x2F;flutter (23143): #30     ParentDataElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:4047:11)
I&amp;#x2F;flutter (23143): #31     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #32     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #33     ComponentElement.performRebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3732:16)
I&amp;#x2F;flutter (23143): #34     Element.rebuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3547:5)
I&amp;#x2F;flutter (23143): #35     ComponentElement._firstBuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3701:5)
I&amp;#x2F;flutter (23143): #36     StatefulElement._firstBuild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3848:11)
I&amp;#x2F;flutter (23143): #37     ComponentElement.mount (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:3696:5)
I&amp;#x2F;flutter (23143): #38     Element.inflateWidget (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2950:14)
I&amp;#x2F;flutter (23143): #39     Element.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2753:12)
I&amp;#x2F;flutter (23143): #40     SliverMultiBoxAdaptorElement.updateChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;sliver.dart:1028:36)
I&amp;#x2F;flutter (23143): #41     SliverMultiBoxAdaptorElement.createChild.&amp;lt;anonymous closure&amp;gt; (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;sliver.dart:1013:20)
I&amp;#x2F;flutter (23143): #42     BuildOwner.buildScope (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;framework.dart:2266:19)
I&amp;#x2F;flutter (23143): #43     SliverMultiBoxAdaptorElement.createChild (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;sliver.dart:1006:11)
I&amp;#x2F;flutter (23143): #44     RenderSliverMultiBoxAdaptor._createOrObtainChild.&amp;lt;anonymous closure&amp;gt; (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;sliver_multi_box_adaptor.dart:274:23)
I&amp;#x2F;flutter (23143): #45     RenderObject.invokeLayoutCallback.&amp;lt;anonymous closure&amp;gt; (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1730:58)
I&amp;#x2F;flutter (23143): #46     PipelineOwner._enableMutationsToDirtySubtrees (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:799:15)
I&amp;#x2F;flutter (23143): #47     RenderObject.invokeLayoutCallback (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1730:13)
I&amp;#x2F;flutter (23143): #48     RenderSliverMultiBoxAdaptor._createOrObtainChild (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;sliver_multi_box_adaptor.dart:263:5)
I&amp;#x2F;flutter (23143): #49     RenderSliverMultiBoxAdaptor.insertAndLayoutChild (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;sliver_multi_box_adaptor.dart:401:5)
I&amp;#x2F;flutter (23143): #50     RenderSliverGrid.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;sliver_grid.dart:583:17)
I&amp;#x2F;flutter (23143): #51     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #52     RenderSliverPadding.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;sliver_padding.dart:182:11)
I&amp;#x2F;flutter (23143): #53     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #54     RenderViewportBase.layoutChildSequence (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;viewport.dart:405:13)
I&amp;#x2F;flutter (23143): #55     RenderViewport._attemptLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;viewport.dart:1316:12)
I&amp;#x2F;flutter (23143): #56     RenderViewport.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;viewport.dart:1234:20)
I&amp;#x2F;flutter (23143): #57     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #58     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #59     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #60     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #61     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #62     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #63     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #64     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #65     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #66     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #67     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #68     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #69     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #70     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #71     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #72     _RenderProxyBox&amp;amp;RenderBox&amp;amp;RenderObjectWithChildMixin&amp;amp;RenderProxyBoxMixin.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;proxy_box.dart:104:13)
I&amp;#x2F;flutter (23143): #73     RenderObject.layout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1634:7)
I&amp;#x2F;flutter (23143): #74     MultiChildLayoutDelegate.layoutChild (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;custom_layout.dart:142:11)
I&amp;#x2F;flutter (23143): #75     _ScaffoldLayout.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;material&amp;#x2F;scaffold.dart:339:7)
I&amp;#x2F;flutter (23143): #76     MultiChildLayoutDelegate._callPerformLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;custom_layout.dart:212:7)
I&amp;#x2F;flutter (23143): #77     RenderCustomMultiChildLayoutBox.performLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;custom_layout.dart:356:14)
I&amp;#x2F;flutter (23143): #78     RenderObject._layoutWithoutResize (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:1509:7)
I&amp;#x2F;flutter (23143): #79     PipelineOwner.flushLayout (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;object.dart:768:18)
I&amp;#x2F;flutter (23143): #80     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding&amp;amp;PaintingBinding&amp;amp;SemanticsBinding&amp;amp;RendererBinding.drawFrame (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;binding.dart:281:19)
I&amp;#x2F;flutter (23143): #81     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding&amp;amp;PaintingBinding&amp;amp;SemanticsBinding&amp;amp;RendererBinding&amp;amp;WidgetsBinding.drawFrame (package:flutter&amp;#x2F;src&amp;#x2F;widgets&amp;#x2F;binding.dart:677:13)
I&amp;#x2F;flutter (23143): #82     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding&amp;amp;PaintingBinding&amp;amp;SemanticsBinding&amp;amp;RendererBinding._handlePersistentFrameCallback (package:flutter&amp;#x2F;src&amp;#x2F;rendering&amp;#x2F;binding.dart:219:5)
I&amp;#x2F;flutter (23143): #83     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding._invokeFrameCallback (package:flutter&amp;#x2F;src&amp;#x2F;scheduler&amp;#x2F;binding.dart:990:15)
I&amp;#x2F;flutter (23143): #84     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding.handleDrawFrame (package:flutter&amp;#x2F;src&amp;#x2F;scheduler&amp;#x2F;binding.dart:930:9)
I&amp;#x2F;flutter (23143): #85     _WidgetsFlutterBinding&amp;amp;BindingBase&amp;amp;GestureBinding&amp;amp;ServicesBinding&amp;amp;SchedulerBinding._handleDrawFrame (package:flutter&amp;#x2F;src&amp;#x2F;scheduler&amp;#x2F;binding.dart:842:5)
I&amp;#x2F;flutter (23143): #86     _invoke (dart:ui&amp;#x2F;hooks.dart:154:13)
I&amp;#x2F;flutter (23143): #87     _drawFrame (dart:ui&amp;#x2F;hooks.dart:143:3)
I&amp;#x2F;flutter (23143):
I&amp;#x2F;flutter (23143): Image provider: AssetImage(bundle: null, name: &amp;quot;assets&amp;#x2F;rooms&amp;#x2F;item4.jpg&amp;quot;)
I&amp;#x2F;flutter (23143): Image key: AssetBundleImageKey(bundle: PlatformAssetBundle#3e8f0(), name: &amp;quot;assets&amp;#x2F;rooms&amp;#x2F;item4.jpg&amp;quot;,
I&amp;#x2F;flutter (23143): scale: 1.0)
I&amp;#x2F;flutter (23143): ════════════════════════════════════════════════════════════════════════════════════════════════════
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;So, how did we get there?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-past&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-past&quot; aria-label=&quot;Anchor link for: the-past&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_i&#x27;&gt;&lt;&#x2F;a&gt;The Past&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;First &amp;quot;generation&amp;quot; of SDKs and languages (Objective-C and Java)&lt;&#x2F;li&gt;
&lt;li&gt;Specialized skills, although developers cheered a &amp;quot;lower level&amp;quot; entry barrier (compared to what was available at the time)&lt;&#x2F;li&gt;
&lt;li&gt;Marketplace! Woohoo!!11!&lt;&#x2F;li&gt;
&lt;li&gt;Attract developers to sell apps: more users =&amp;gt; more apps =&amp;gt; platform dominates the market (caveat: Google has always had in mind to sell ads since acquiring Android)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-present&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-present&quot; aria-label=&quot;Anchor link for: the-present&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_ii&#x27;&gt;&lt;&#x2F;a&gt;The Present&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Second &amp;quot;generation&amp;quot; of SDKs and laguages (Swift and Dart a.k.a. Javascript on steroids)&lt;&#x2F;li&gt;
&lt;li&gt;Convergence of skills, even lower entry barrier&lt;&#x2F;li&gt;
&lt;li&gt;Marketplace: overflowing of low quality ads-riddled apps&lt;&#x2F;li&gt;
&lt;li&gt;Moving features on the cloud, smartphones becoming again dumb terminals&lt;&#x2F;li&gt;
&lt;li&gt;SDKs sell cloud services&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;the-future&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-future&quot; aria-label=&quot;Anchor link for: the-future&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_iii&#x27;&gt;&lt;&#x2F;a&gt;The Future&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Big players offering training and tools for nothing&lt;&#x2F;li&gt;
&lt;li&gt;Less and less work to build an app (tipically involving backend and frontend work)&lt;&#x2F;li&gt;
&lt;li&gt;An army of devs willing to make a quick buck and selling users&#x27; data using their apps. This is &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;media.ccc.de&#x2F;v&#x2F;35c3-9941-how_facebook_tracks_you_on_android&quot;&gt;already happening&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, Flutter documentation is great, the tutorial on dedicated websites are clear. The language logo is not dumb. What could possibly go wrong?&lt;&#x2F;p&gt;
&lt;p&gt;Google is basically upselling Firebase services.&lt;&#x2F;p&gt;
&lt;p&gt;Half joking here, but it wouldn&#x27;t surprise me &lt;strong&gt;at all&lt;&#x2F;strong&gt; if Facebook would make its SDK more and more pervasive to the point of releasing its own operating system.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Ipse Dixit no. 3</title>
        <published>2019-01-29T00:00:00+00:00</published>
        <updated>2019-01-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ipse-dixit-3/" type="text/html"/>
        <id>https://apiraino.github.io/ipse-dixit-3/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Self-educating about privacy on Internet&lt;br&gt;
and learning how to use privacy tools&lt;br&gt;
even though you have nothing to hide&lt;br&gt;
is a good training to find yourself prepared&lt;br&gt;
when (and not if) the day will come&lt;br&gt;
you will need these tools for real&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- ?&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Setup a private Git server (quick and for dummies)</title>
        <published>2019-01-24T00:00:00+00:00</published>
        <updated>2019-01-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/git-server-setup/" type="text/html"/>
        <id>https://apiraino.github.io/git-server-setup/</id>
        <content type="html">&lt;p&gt;On your remote server, install the packages and create a &lt;code&gt;git&lt;&#x2F;code&gt; user:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo apt install git
$ sudo adduser git
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;optionally add your public key to access the repo for automatic SSH authentication:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git@server.com:~$ mkdir ~&amp;#x2F;.ssh &amp;amp;&amp;amp; touch ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys
user@local-workstation:~$ cat ~&amp;#x2F;.ssh&amp;#x2F;id_rsa.pub | \
    ssh git@server.com &amp;quot;cat &amp;gt;&amp;gt; ~&amp;#x2F;.ssh&amp;#x2F;authorized_keys&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a &lt;code&gt;bare&lt;&#x2F;code&gt; new local repo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git@server.com:~$ mkdir my-repo
git@server.com:~$ cd my-repo
git@server.com:~$ git --bare init
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The new repo is ready to be cloned:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;user@local-workstation:~$ git clone git@git.myserver.com:my-repo.git
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Appreciation for software #1: Emacs</title>
        <published>2019-01-24T00:00:00+00:00</published>
        <updated>2019-01-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/software-appreciation/" type="text/html"/>
        <id>https://apiraino.github.io/software-appreciation/</id>
        <content type="html">&lt;p&gt;I was reading this &lt;a href=&quot;https:&#x2F;&#x2F;bastibe.de&#x2F;2018-10-14-appreciation-for-open-source-and-commercial-software.html&quot;&gt;blog post&lt;&#x2F;a&gt; on how we often forget to thank and recognize the efforts of the &amp;quot;unsung heroes&amp;quot; of the software world. I find those words truly inspiring, I also had an interaction with the author through GitHub (a very nice person, by the way).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s don&#x27;t forget that many people write software for any reason but money: a sincere &amp;quot;thank you&amp;quot; can often be the best reward. Because, of course, we are humans made of flesh and purposes and need recognition for the things we do.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore I&#x27;ve decided to join him and have my periodical appreciation post on a tool or an application that greatly helped me or simply made me chuckle :-)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The honour of the first post on the theme can&#x27;t be dedicated to none other than the software I use the whole day for so many things.&lt;&#x2F;p&gt;
&lt;p&gt;Some people joke that Emacs is more of an operating system lacking a decent text editor rather a ... wait ... I see a trap, here: is Emacs an IDE or advanced text editor? It&#x27;s simply Emacs. Funny how people discuss what Emacs really is: it&#x27;s a software in its own category.&lt;&#x2F;p&gt;
&lt;p&gt;Learning Emacs teaches you about more than Emacs itself: it teaches you about the quality that software can reach, the complexity and unfriendliness :-) Also a lot about how a truly open system is supposed to be.&lt;&#x2F;p&gt;
&lt;p&gt;After you&#x27;ve been using Emacs for enough time and you need a specific tool for a job, you&#x27;ll stop looking for a new tool to install: as a first thing, you&#x27;ll search for an Emacs package to do that.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll also learn how much of the stuff you write or need can be in bare text, without binary files. You&#x27;ll start thinking if the increasing complexity of some software is justified by actual improvements.&lt;&#x2F;p&gt;
&lt;p&gt;Emacs&#x27; history is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Emacs&quot;&gt;worth reading&lt;&#x2F;a&gt; and despite an ugly icon and an &lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;297&#x2F;&quot;&gt;irritating language&lt;&#x2F;a&gt; it became one of the most long-lived software ever written; and this alone, more than 40 years later, is a remarkable achievement in itself.&lt;&#x2F;p&gt;
&lt;p&gt;I am by no means an experienced Emacs user, nor I dwelved into &lt;code&gt;elisp&lt;&#x2F;code&gt; unless forced by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-mode&#x2F;pull&#x2F;269&quot;&gt;overarching annoyances&lt;&#x2F;a&gt;, but I spent a lot of time documenting my Emacs experience and writing my own guides; to me it&#x27;s simply impossible to remember all the keycombo for all the Emacs packages I use.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;emacs_reference&quot;&gt;Emacs setup&lt;&#x2F;a&gt;. I&#x27;ll copy-paste the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;emacs_reference&#x2F;blob&#x2F;master&#x2F;guide.md#whats-in-my-personal-lisp-file&quot;&gt;list of the tool&lt;&#x2F;a&gt; that I use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;geoff.greer.fm&#x2F;ag&quot; target=&quot;_new&quot;&gt;ag&lt;&#x2F;a&gt;: super fast grep replacement&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;davidhalter&#x2F;jedi&quot; target=&quot;_new&quot;&gt;jedi&lt;&#x2F;a&gt;: Python autocompletion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.flycheck.org&quot; target=&quot;_new&quot;&gt;flycheck&lt;&#x2F;a&gt;: Python syntax-checking&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jorgenschaefer&#x2F;elpy&quot; target=&quot;_new&quot;&gt;elpy&lt;&#x2F;a&gt;: Emacs Lisp Python Environment&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flycheck&#x2F;flycheck-rust&quot; target=&quot;_new&quot;&gt;flycheck-rust&lt;&#x2F;a&gt;: Rust syntax-checking&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;racer-rust&#x2F;emacs-racer&quot; target=&quot;_new&quot;&gt;emacs-racer&lt;&#x2F;a&gt;: Rust code-completion, goto-definition and docs browsing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yoshiki&#x2F;yaml-mode&quot; target=&quot;_new&quot;&gt;yaml-mode&lt;&#x2F;a&gt;: Major mode fpor YAML files&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;paetzke&#x2F;py-autopep8.el&quot; target=&quot;_new&quot;&gt;py-autopep8&lt;&#x2F;a&gt;: Python PEP8 linter&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syohex&#x2F;emacs-git-gutter&quot; target=&quot;_new&quot;&gt;git-gutter&lt;&#x2F;a&gt;: git diff on the fly&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bastibe&#x2F;org-journal&quot; target=&quot;_new&quot;&gt;org-journal&lt;&#x2F;a&gt;: great tool to write a developer&#x27;s diary&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;elpa.gnu.org&#x2F;packages&#x2F;xclip.html&quot; target=&quot;_new&quot;&gt;xclip&lt;&#x2F;a&gt;: (linux only) yanked text in emacs is available in X11 (overwrites X11 clipboard)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;w-vi&#x2F;ox-wk.el&quot; target=&quot;_new&quot;&gt;ox-wk&lt;&#x2F;a&gt;: module to export from ORG mode to Dokuwiki&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not to mention the tools available out of the box:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&quot; target=&quot;_new&quot;&gt;org-mode&lt;&#x2F;a&gt;: &amp;quot;your file in plain text&amp;quot;. Documents, TODOs, notes. And export to whatever format you want.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;InternetRelayChat&quot; target=&quot;_new&quot;&gt;IRC client&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each developer of each of these packages should deserve a personalized praise.&lt;&#x2F;p&gt;
&lt;p&gt;There are downsides in using Emacs, of course:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Once into &amp;quot;Emacs-mode&amp;quot;, it&#x27;s hard to switch back: this also means that if you are the guest on another workstation, you feel so clumsy. And your pair-programming buddy might find awkward seeing you constantly inserting random text or closing windows by mistake. Some IDEs have an &amp;quot;emacs-mode&amp;quot; but my experience (f.e. in IntelliJ) not satisfying.&lt;&#x2F;li&gt;
&lt;li&gt;The documentation, although exhaustive, is not an easy read. I gave up on reading it, I can easily find answers on Stack Overflow anyways.&lt;&#x2F;li&gt;
&lt;li&gt;Although extensible, I honestly hate Lisp (and it&#x27;s my fault, no problems admitting that); nonetheless that&#x27;s a major road-block for me to write my own tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, Emacs is not for everyone and should be approached little by little: for example, first try it as TODO or note taking tool, see if that improves your workflow. If yes, then try adding another tool. And so on and on.&lt;&#x2F;p&gt;
&lt;p&gt;And maybe, one day, you&#x27;ll have a laugh when presented this choice on VisualStudio Code:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;emacs-vs-normal.png&quot;&gt;
    &lt;figcaption&gt;So, am I usually using an abnormal editor?&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Bye Bye, Google (almost)</title>
        <published>2019-01-19T00:00:00+00:00</published>
        <updated>2019-01-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/bye-bye-google/" type="text/html"/>
        <id>https://apiraino.github.io/bye-bye-google/</id>
        <content type="html">&lt;p&gt;Here I&#x27;ll detail all the Google services I&#x27;ve replaced, for future reference.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll factor in the typical user, mostly wishing for things to &amp;quot;just work&amp;quot;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-and-foremost&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-and-foremost&quot; aria-label=&quot;Anchor link for: first-and-foremost&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_i&#x27;&gt;&lt;&#x2F;a&gt;First and foremost&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;:white_check_mark: Google search -&amp;gt; DuckDuckGo&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Google mail -&amp;gt; ProtonMail&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This basically addresses 85% of privacy concerns.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chats-im&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#chats-im&quot; aria-label=&quot;Anchor link for: chats-im&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_ii&#x27;&gt;&lt;&#x2F;a&gt;Chats &#x2F; IM&lt;&#x2F;h3&gt;
&lt;p&gt;Easier. Lot of fragmentation: to this day I wouldn&#x27;t know which Google App to use.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;:white_check_mark: Threema (con: closed-source)&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Signal&lt;&#x2F;li&gt;
&lt;li&gt;:warning:️ Telegram (con: some security &#x2F; privacy concerns)&lt;&#x2F;li&gt;
&lt;li&gt;:no_entry: all others (con: no significant userbase)&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;about.riot.im&quot;&gt;riot.im&lt;&#x2F;a&gt; coupled with a &lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;bye-bye-google&#x2F;matrix.org&quot;&gt;Matrix&lt;&#x2F;a&gt; self-hosted instance on NextCloud. &lt;a href=&quot;https:&#x2F;&#x2F;archive.fosdem.org&#x2F;2018&#x2F;schedule&#x2F;event&#x2F;matrix&quot;&gt;See here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;nextcloud&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nextcloud&quot; aria-label=&quot;Anchor link for: nextcloud&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_iii&#x27;&gt;&lt;&#x2F;a&gt;NextCloud&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;:white_check_mark: Feedly -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;news&quot;&gt;NextCloud News&lt;&#x2F;a&gt; (+ &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;news-updater&quot;&gt;async python feed retriever&lt;&#x2F;a&gt;) + &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;news-android&quot;&gt;news-android&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;NextCloud News unmantained&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Contacts -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;contacts&#x2F;&quot;&gt;NextCloud Contacts&lt;&#x2F;a&gt;, Davx5 + any DAV application&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Google Calendar -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;calendar&quot;&gt;NextCloud Calendar&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.davx5.com&quot;&gt;Davx5&lt;&#x2F;a&gt; + any DAV application&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Google Notes -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;notes&quot;&gt;NextCloud Notes&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;:white_check_mark: Can also be used as a PasteBin-like code snippets share tool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Pocket &#x2F; any &amp;quot;Read It Later&amp;quot; apps -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;bookmarks&quot;&gt;NextCloud Bookmarks&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Performance problems when many bookmarks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Google Drive -&amp;gt; NextCloud Files (out of the box)
&lt;ul&gt;
&lt;li&gt;:white_check_mark: file sharing, permissions, expire access&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: data encryption at rest
&lt;ul&gt;
&lt;li&gt;:warning: encryption key not safe if server is compromised&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;:warning: Google Drive file edit -&amp;gt; &lt;a href=&quot;https:&#x2F;&#x2F;nextcloud.com&#x2F;collaboraonline&#x2F;&quot;&gt;NextCloud Collabora&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;:white_check_mark: Google Photos -&amp;gt; NextCloud Gallery (out of the box)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;what-keeps-me-in-the-google-bubble&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-keeps-me-in-the-google-bubble&quot; aria-label=&quot;Anchor link for: what-keeps-me-in-the-google-bubble&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_iv&#x27;&gt;&lt;&#x2F;a&gt;What keeps me in the Google bubble&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Collaboration, when required by third-parties (hardly solvable in most cases)&lt;&#x2F;li&gt;
&lt;li&gt;Google Maps integration in Drive (might be solvable with a combo of OSM and other drawing tools)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>OK, but much does it actually *cost*??</title>
        <published>2019-01-16T00:00:00+00:00</published>
        <updated>2019-01-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/how-much-does-it-cost/" type="text/html"/>
        <id>https://apiraino.github.io/how-much-does-it-cost/</id>
        <content type="html">&lt;p&gt;From time to time I receive requests to evaluate a project and assess the initial effort (say, the first 6~12 months). This involves basically the platform and the team costs (usually the latter has more weight than the first).&lt;&#x2F;p&gt;
&lt;p&gt;As simple rule of thumb to quickly get to the point is identifying the three variables that &lt;strong&gt;every&lt;&#x2F;strong&gt; project has:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;(&lt;code&gt;E&lt;&#x2F;code&gt;) effort: a global indicator of the cost which basically takes into account: development time required by the technical staff, management time from the CEO, how many resources to involve and their seniority.&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;code&gt;T&lt;&#x2F;code&gt;) development time: how quick do you want your cake to be ready? Are in you in a hurry for X and Y reason? Or is this project a &amp;quot;side job&amp;quot; you want to invest some (but not too much) of your time for the moment?&lt;&#x2F;li&gt;
&lt;li&gt;(&lt;code&gt;Q&lt;&#x2F;code&gt;) quality of the platform: do you want a scalable, distributed, bullet-proof cloud-based backend? Or you just need something &amp;quot;online&amp;quot; to showcase to VCs?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So, the client can have 2 of these variables, they choose which ones. The CTO (and the development team) has the other one.&lt;&#x2F;p&gt;
&lt;p&gt;Possible scenarios, as an example:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The client picks &lt;code&gt;T&lt;&#x2F;code&gt; + &lt;code&gt;Q&lt;&#x2F;code&gt; and asks for a rock-solid platform (we don&#x27;t want to rethink the platform again, do we?) in a short time because they have contacts with possible investors and don&#x27;t want the lead to cool down. The development team then receives the &lt;code&gt;E&lt;&#x2F;code&gt; variable: that is, more effort on the project.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The client picks &lt;code&gt;E&lt;&#x2F;code&gt; + &lt;code&gt;Q&lt;&#x2F;code&gt; as they only have this budget available at this time, but still would like a good platform: developers then receive &lt;code&gt;T&lt;&#x2F;code&gt; and choose to dedicate less time to the project and (for example) push forward other projects or go around with a bicycle chasing crows.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m sure other (more knowledgeable) people have written entire books about this little game of &amp;quot;the three variables&amp;quot; (can&#x27;t detail too much in five sentences); however, sometimes you don&#x27;t need to read books cover-to-cover about project management to learn how to start a conversation about a project with a prospect client and underline the basics.&lt;&#x2F;p&gt;
&lt;p&gt;Also, it will quickly raise a useful warning if the client does not want to play by these rules.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Ipse Dixit no. 2</title>
        <published>2019-01-10T00:00:00+00:00</published>
        <updated>2019-01-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ipse-dixit-2/" type="text/html"/>
        <id>https://apiraino.github.io/ipse-dixit-2/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;If you want a picture of the future, imagine a boot stamping on a human face — for ever.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- George Orwell, 1984&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Where do you live?</title>
        <published>2019-01-09T00:00:00+00:00</published>
        <updated>2019-01-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/where-do-you-live/" type="text/html"/>
        <id>https://apiraino.github.io/where-do-you-live/</id>
        <content type="html">&lt;p&gt;Just noticed this funny thing from a DEFCON talk &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;vJtmZZGcR54?t=77&quot;&gt;of 9 years ago&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!&amp;#x2F;bin&amp;#x2F;bash

MAC=&amp;quot;&amp;lt;your-router-mac-address&amp;gt;&amp;quot;
TK=&amp;quot;&amp;lt;a-free-google-api-token&amp;gt;&amp;quot;

curl -X POST -H &amp;quot;Content-Type: application&amp;#x2F;json&amp;quot; \
    &amp;quot;https:&amp;#x2F;&amp;#x2F;www.googleapis.com&amp;#x2F;geolocation&amp;#x2F;v1&amp;#x2F;geolocate?key=$TK&amp;quot; \
        -d \&amp;#x27;{
            \&amp;quot;macAddress\&amp;quot;: \&amp;quot;&amp;quot;$MAC&amp;quot;\&amp;quot;,
            \&amp;quot;signalStrength\&amp;quot;: -43,
            \&amp;quot;age\&amp;quot;: 0,
            \&amp;quot;channel\&amp;quot;: 11,
            \&amp;quot;signalToNoiseRatio\&amp;quot;: 0
        }\&amp;#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Finding a reliable OpenGPG server</title>
        <published>2019-01-08T00:00:00+00:00</published>
        <updated>2019-01-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/gpg-reliable-servers/" type="text/html"/>
        <id>https://apiraino.github.io/gpg-reliable-servers/</id>
        <content type="html">&lt;p&gt;Is it me, or the GPG directoy servers are either underesourced &#x2F; unmanaged &#x2F; slow?&lt;&#x2F;p&gt;
&lt;p&gt;An updated list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;❌  &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;pgp.mit.edu&quot;&gt;https:&#x2F;&#x2F;pgp.mit.edu&lt;&#x2F;a&gt;: returns a 500 error on queries&lt;&#x2F;li&gt;
&lt;li&gt;❌ &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;keys.gnupg.net&quot;&gt;https:&#x2F;&#x2F;keys.gnupg.net&lt;&#x2F;a&gt;: invalid SSL certificate&lt;&#x2F;li&gt;
&lt;li&gt;❌ &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;http:&#x2F;&#x2F;keys.gnupg.net&quot;&gt;http:&#x2F;&#x2F;keys.gnupg.net&lt;&#x2F;a&gt;: returns a 502 error on queries&lt;&#x2F;li&gt;
&lt;li&gt;✅ &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; href=&quot;https:&#x2F;&#x2F;pgp.surfnet.nl&quot;&gt;https:&#x2F;&#x2F;pgp.surfnet.nl&lt;&#x2F;a&gt;: seems to be working&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I even tried sending an email to the suggested service at &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer nofollow&quot; mailto=&quot;pgp-public-keys@pgp.mit.edu&quot;&gt;pgp-public-keys@pgp.mit.edu&lt;&#x2F;a&gt;, received a not so nice error:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;lol-mail.png&quot;&gt;
    &lt;figcaption&gt;hahaha email&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>My wishlist for Rust &#x27;19</title>
        <published>2018-12-19T00:00:00+00:00</published>
        <updated>2018-12-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/call-for-2019-roadmap/" type="text/html"/>
        <id>https://apiraino.github.io/call-for-2019-roadmap/</id>
        <content type="html">&lt;p&gt;This isn&#x27;t exactly a blog so this won&#x27;t be exactly a &amp;quot;post&amp;quot;, but I&#x27;d like to write down my thoughts on this notepad answering the call for &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;12&#x2F;06&#x2F;call-for-rust-2019-roadmap-blogposts.html&quot;&gt;a wishlist for Rust 2019&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Opinions expressed are from the point of view of an enthusiast, Rust apprentice, that happened to be knee-deep involved in organizing the &lt;a href=&quot;https:&#x2F;&#x2F;rome.rustfest.eu&quot;&gt;RustFest in Rome&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s fun to pin today some thoughts and see in 12 months how things will have evolved!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-of-all-the-community&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-of-all-the-community&quot; aria-label=&quot;Anchor link for: first-of-all-the-community&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;First of all, the Community&lt;&#x2F;h3&gt;
&lt;p&gt;There a lot of takeaways after helping organizing a conference with +200 attendees, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;RustFest&#x2F;status&#x2F;1071720864134168577&quot;&gt;11 talks by 12 speakers&lt;&#x2F;a&gt;, plus workshops, &lt;a href=&quot;https:&#x2F;&#x2F;rome.rustfest.eu&#x2F;about_impl_days&quot;&gt;Impl Days&lt;&#x2F;a&gt; aaaand a beautiful city to walk by night.&lt;&#x2F;p&gt;
&lt;p&gt;Where would I like the conferencing story to go? It&#x27;s a bit like in a startup, where there can be experimenting, a rollercoaster where &lt;em&gt;you&lt;&#x2F;em&gt; decide the next move. There are basically three things I&#x27;d like to see evolving:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More crosstalk between conferences. Sharing know-how and resources will help organizers and new people willing to help organize an event but don&#x27;t know how (hint: commitment is of the essence). This new people can then teach to others. And so on.&lt;&#x2F;p&gt;
&lt;p&gt;This is why it is important to foster a network of conferences and &lt;em&gt;no-conf&lt;&#x2F;em&gt; initiatives to keep the fire sparkling.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;More involvement of Rust companies. Sponsors are a great resource, but they are not faceless entities whom to ask for support and then &amp;quot;&lt;em&gt;thanks, see you next time&lt;&#x2F;em&gt;&amp;quot;. They are made of very motivated people that may &lt;strong&gt;work with you in developing the Rust community&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a call to involve them more. Conferences are just the tip of the iceberg of a partnership that can span the whole year: workshops, meetups, Rust companies can even host events. After all, it&#x27;s in their best interest to have more Rust developers!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A strong organization, the foundation for growth. Organizing activities for developers can quickly turn into a full-time job, it&#x27;s no joke. It&#x27;s called being a &lt;em&gt;community manager&lt;&#x2F;em&gt;. Many moons ago I&#x27;ve read an &lt;a href=&quot;https:&#x2F;&#x2F;yakshav.es&#x2F;sustainability&#x2F;#professionalised-side-efforts&quot;&gt;interesting take on the topic&lt;&#x2F;a&gt;. While not everyone can (or is willing to) afford this as a full-time commitment, also being part-time has its cost in terms of time and being responsive when the situation requires action.&lt;&#x2F;p&gt;
&lt;p&gt;This is why it is important to build a core of people committed. The badge you earn (&lt;em&gt;look mom, I&#x27;m on the stage of a conference!&lt;&#x2F;em&gt;) is not free, but - hey - it&#x27;s not like this is different from anything else: work needs to be done if you want the party to happen.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;more-love-to-crates&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-love-to-crates&quot; aria-label=&quot;Anchor link for: more-love-to-crates&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;More love to crates&lt;&#x2F;h3&gt;
&lt;p&gt;So, I&#x27;m also a developer that is getting into the Rust world and wishes to have some of the bills deliciously covered by a Rust-flavoured fragrance. 2018 was a stepstone year for the ecosystem and a lot of praise has been given to the efforts to improve the language, the libraries, the &lt;em&gt;ergonomics&lt;&#x2F;em&gt; of developing in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;What I would like to see next:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Less 0.1 bit-rot&lt;&#x2F;strong&gt;: some crates that are incredibly responding to a need, are often left in poor state (mostly lacking ancillary work, like documentation or examples) or as the language evolves, even broken.&lt;&#x2F;p&gt;
&lt;p&gt;I also call for a &amp;quot;responsible&amp;quot; development when people start using your libraries; case in point the recent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;rust-openssl&#x2F;issues&#x2F;987&quot;&gt;breaking changes on the OpenSSL crate&lt;&#x2F;a&gt;, which caused some headaches.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;More &amp;quot;production&amp;quot; focused development&lt;&#x2F;strong&gt;: some developers are producing so much good stuff that they end up not having the mental bandwidth to juggle everything. The risk here is to put the ecosystem under a bad light. People coming from the &amp;quot;outside&amp;quot; judge the ecosystem by a library or the framework at hand; how can you use X and then explain to your CTO that a dependency of your project (deployed in production) has broken?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Frameworks often are heroic one-man-bands efforts&lt;&#x2F;strong&gt;: from people that you even meet on IRC providing support (!) answering trivial questions to newbies like me: this is really heartwarming, but not sustainable. I wish for some heavier commitment of companies on Rust projects to let developers focus on the job (and this is already happening in some cases, see &lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&quot;&gt;Actix&lt;&#x2F;a&gt;). This is for the people asking on Stack Overflow: &amp;quot;what&#x27;s the X equivalent for Rust?&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;wishes-expressed-by-others-that-i-share&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#wishes-expressed-by-others-that-i-share&quot; aria-label=&quot;Anchor link for: wishes-expressed-by-others-that-i-share&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Wishes expressed by others, that I share&lt;&#x2F;h3&gt;
&lt;p&gt;Basically upvoting the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;50547&quot;&gt;async&#x2F;await&lt;&#x2F;a&gt; story, pretty please :^)&lt;&#x2F;li&gt;
&lt;li&gt;Rust on the web: I strongly advocate for that, but frameworks are still in a &amp;quot;0.x&amp;quot; state (which doesn&#x27;t necessarily means they&#x27;re broken, see &lt;a href=&quot;https:&#x2F;&#x2F;rocket.rs&quot;&gt;Rocket&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;actix.rs&quot;&gt;Actix&lt;&#x2F;a&gt;). I would love to see a &amp;quot;1.0&amp;quot; at some point (that includes documentation, tutorials, ...).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;rust-in-2022&quot;&gt;The &amp;quot;boredom&amp;quot; of using Rust&lt;&#x2F;a&gt;: a nice concept on how desirable is to be able to focus on the job at hand, without worrying about broken dependencies and nightly release of the compiler.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;cetra3.github.io&#x2F;blog&#x2F;rust-2019#documentation-churn&quot;&gt;tribal knowledge&lt;&#x2F;a&gt; that is often lost on IRC logs - consequence of the &amp;quot;one-man-band&amp;quot; issue mentioned above.&lt;&#x2F;li&gt;
&lt;li&gt;The half-life of Rust answers on Stack Overflow is short. Although updated as the compiler evolves (my infinite gratitude to those doing an amazing job there!), there are many deprecated answers, and that could be confusing. Agreed, that&#x27;s a natural consequence of a rapid evolving language, but this forces me to deliberately ignore answers older than ~12 months.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ask-what-you-can-do-for-rust&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ask-what-you-can-do-for-rust&quot; aria-label=&quot;Anchor link for: ask-what-you-can-do-for-rust&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a id=&quot;part_iv&quot;&gt;&lt;&#x2F;a&gt;... ask what you can do for Rust&lt;&#x2F;h3&gt;
&lt;p&gt;So far, my wishlist. But I want to add a little more to the proposition: what &lt;strong&gt;can I do&lt;&#x2F;strong&gt; for Rust?&lt;&#x2F;p&gt;
&lt;p&gt;In 2019 I will explore a bit how can I contribute to the Rust community environment; that&#x27;s an area where I just moved the first steps, learned something, and I see a great potential for development.&lt;&#x2F;p&gt;
&lt;p&gt;My second goal would be to do some actual work in Rust: every developer that is being paid to do Rust development is a win for the ecosystem. Equally important are contributions to opensource projects: I mentioned some areas that would benefit from some polishing: well, that&#x27;s a great place to start for helping! Lots of crates have &amp;quot;good first issues&amp;quot;, need documentation, examples, even issue reporting or a simple star on the repository will help.&lt;&#x2F;p&gt;
&lt;p&gt;So, all in all, I&#x27;m sure that 2019 will build on the foundation laid by 2018. And unlike the stale joke of &amp;quot;the year of Linux on the desktop&amp;quot;, I feel that 2019 will be &amp;quot;the year of Rust on our laptops&amp;quot; :-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Ipse Dixit no. 1</title>
        <published>2018-12-04T00:00:00+00:00</published>
        <updated>2018-12-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ipse-dixit-1/" type="text/html"/>
        <id>https://apiraino.github.io/ipse-dixit-1/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Il buon senso c&#x27;era, ma se ne stava nascosto per paura del senso comune.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;-- Manzoni nel 32esimo capitolo dei &amp;quot;Promessi Sposi&amp;quot;, a proposito degli untori della peste&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Rust compiler friendliness #1</title>
        <published>2018-11-28T00:00:00+00:00</published>
        <updated>2018-11-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/rust-helps/" type="text/html"/>
        <id>https://apiraino.github.io/rust-helps/</id>
        <content type="html">&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo_check
    Checking open-taffeta v0.1.0  (&amp;#x2F;home&amp;#x2F;...&amp;#x2F;open-taffeta)
error: can&amp;#x27;t qualify macro_rules invocation with `pub`
 --&amp;gt; src&amp;#x2F;config.rs:8:1
  |
8 | pub macro_rules! get_token_duration {
  | ^^^ help: try exporting the macro: `#[macro_export]`

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;me wonders how to make this macro public
RC: Look buddy, I know you&amp;#x27;re too lazy to check the documentation ...
me: Oh ... thanks XD
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Saving it for the last day</title>
        <published>2018-11-09T00:00:00+00:00</published>
        <updated>2018-11-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/last-day/" type="text/html"/>
        <id>https://apiraino.github.io/last-day/</id>
        <content type="html">&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat ~&amp;#x2F;.bash_aliases
alias rm=&amp;#x27;rm -f&amp;#x27;
alias mv=&amp;#x27;touch&amp;#x27;
alias touch=&amp;#x27;echo &amp;gt;&amp;#x27;
alias ls=&amp;#x27;ls -r&amp;#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>ARD Mediathek Filme runterladen</title>
        <published>2018-10-21T00:00:00+00:00</published>
        <updated>2018-10-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ard-mediathek-runterladen/" type="text/html"/>
        <id>https://apiraino.github.io/ard-mediathek-runterladen/</id>
        <content type="html">&lt;h3 id=&quot;part-i-filme&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-filme&quot; aria-label=&quot;Anchor link for: part-i-filme&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_i&#x27;&gt;&lt;&#x2F;a&gt;Part I: Filme&lt;&#x2F;h3&gt;
&lt;p&gt;ARD uses a video streaming player that streams H.264+AAC content from an akamaihd CDN. Subtitles are in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Timed_Text_Markup_Language&quot;&gt;TimedText&lt;&#x2F;a&gt; format.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;example-url-for-episode-download&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-url-for-episode-download&quot; aria-label=&quot;Anchor link for: example-url-for-episode-download&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Example URL for episode download&lt;&#x2F;h4&gt;
&lt;p&gt;To see which streams are available, inspect network traffic with your browser and download the &lt;code&gt;master.m3u8&lt;&#x2F;code&gt; file, you will find something like that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;https:&amp;#x2F;&amp;#x2F;dasersteuni-vh.akamaihd.net&amp;#x2F;i&amp;#x2F;de&amp;#x2F;YYYY&amp;#x2F;MM&amp;#x2F;DD&amp;#x2F;&amp;lt;UUID&amp;gt;&amp;#x2F;,512-1,640-1,320-1,480-1,1280-1,960-1,.mp4.csmil&amp;#x2F;index_2_av.m3u8?null=0
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=316000,RESOLUTION=480x270,CODECS=&amp;quot;avc1.66.30, mp4a.40.2&amp;quot;,CLOSED-CAPTIONS=NONE
https:&amp;#x2F;&amp;#x2F;dasersteuni-vh.akamaihd.net&amp;#x2F;i&amp;#x2F;de&amp;#x2F;YYYY&amp;#x2F;MM&amp;#x2F;DD&amp;#x2F;&amp;lt;UUID&amp;gt;&amp;#x2F;,512-1,640-1,320-1,480-1,1280-1,960-1,.mp4.csmil&amp;#x2F;index_3_av.m3u8?null=0
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=3771000,RESOLUTION=1280x720,CODECS=&amp;quot;avc1.64001f, mp4a.40.2&amp;quot;,CLOSED-CAPTIONS=NONE
https:&amp;#x2F;&amp;#x2F;dasersteuni-vh.akamaihd.net&amp;#x2F;i&amp;#x2F;de&amp;#x2F;YYYY&amp;#x2F;MM&amp;#x2F;DD&amp;#x2F;&amp;lt;UUID&amp;gt;&amp;#x2F;,512-1,640-1,320-1,480-1,1280-1,960-1,.mp4.csmil&amp;#x2F;index_4_av.m3u8?null=0
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=1988000,RESOLUTION=960x540,CODECS=&amp;quot;avc1.77.30, mp4a.40.2&amp;quot;,CLOSED-CAPTIONS=NONE
https:&amp;#x2F;&amp;#x2F;dasersteuni-vh.akamaihd.net&amp;#x2F;i&amp;#x2F;de&amp;#x2F;YYYY&amp;#x2F;MM&amp;#x2F;DD&amp;#x2F;&amp;lt;UUID&amp;gt;&amp;#x2F;,512-1,640-1,320-1,480-1,1280-1,960-1,.mp4.csmil&amp;#x2F;index_5_av.m3u8?null=0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;UUID&amp;gt;&lt;&#x2F;code&gt; is a unique directory with the transmission content&lt;&#x2F;p&gt;
&lt;p&gt;choose the desired resolution (streams won&#x27;t go beyond 1280x720 anyways), f.e.:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;dasersteuni-vh.akamaihd.net&#x2F;i&#x2F;de&#x2F;YYYY&#x2F;MM&#x2F;DD&#x2F;&amp;lt;UUID&amp;gt;&#x2F;,512-1,640-1,320-1,480-1,1280-1,960-1,.mp4.csmil&#x2F;index_1_av.m3u8?null=0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;build the download URL with:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;pdvideosdaserste-a.akamaihd.net&lt;&#x2F;code&gt; + &lt;code&gt;&#x2F;de&#x2F;YYYY&#x2F;MM&#x2F;DD&#x2F;&amp;lt;UUID&amp;gt;&#x2F;&lt;&#x2F;code&gt; + &lt;code&gt;1280-1.mp4&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sometimes the path &lt;code&gt;&#x2F;de&lt;&#x2F;code&gt; can be replaced with &lt;code&gt;&#x2F;int&lt;&#x2F;code&gt; (check carefully the master.m3u file).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sometimes &amp;quot;1280x720&amp;quot; resolution is not explicit but the file is there as well most of the time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Movies rated &lt;code&gt;FSK ab 16&lt;&#x2F;code&gt; or &lt;code&gt;FSK ab 18&lt;&#x2F;code&gt; are not available before late evening. You can circumvent the block searching in the network traffic the XML file of the movie (there should be only one), that provides the needed &lt;code&gt;YYYY&#x2F;MM&#x2F;DD&#x2F;&amp;lt;UUID&amp;gt;&lt;&#x2F;code&gt; and also a path to the subtitle XML file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To keep things easy, you can straight inspect the response for a GET that will provide everything (streams and subtitles links):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;http:&amp;#x2F;&amp;#x2F;mediathek.daserste.de&amp;#x2F;play&amp;#x2F;media&amp;#x2F;&amp;lt;movie_id&amp;gt;?devicetype=pc&amp;amp;features=
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;part-ii-untertitel&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-untertitel&quot; aria-label=&quot;Anchor link for: part-ii-untertitel&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_ii&#x27;&gt;&lt;&#x2F;a&gt;Part II: Untertitel&lt;&#x2F;h3&gt;
&lt;p&gt;Example URL for subtitles:&lt;&#x2F;p&gt;
&lt;p&gt;get the &lt;code&gt;documentId&lt;&#x2F;code&gt; from URL, f.e.:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;http:&#x2F;&#x2F;mediathek.daserste.de&#x2F;Filme-im-Ersten&#x2F;&amp;lt;Film_name&amp;gt;&#x2F;Video?bcastId=1933898&amp;amp;documentId=57028028&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;get the player configuration from:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;http:&#x2F;&#x2F;mediathek.daserste.de&#x2F;play&#x2F;media&#x2F;57028028?devicetype=pc&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;then search for &lt;code&gt;_subtitleUrl&lt;&#x2F;code&gt; and download the XML.&lt;&#x2F;p&gt;
&lt;p&gt;or you can have fun guessing the subtitle filename, they are machine generated and it&#x27;s always an XML:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;www.daserste.de&#x2F;unterhaltung&#x2F;serie&#x2F;&amp;lt;fernsehserie&amp;gt;&#x2F;videos-folgen-verpasst&#x2F;&amp;lt;fernsehserie_folge_1&amp;gt;-ut100.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;www.daserste.de&#x2F;unterhaltung&#x2F;film&#x2F;filmmittwoch-im-ersten&#x2F;videos&#x2F;&amp;lt;movie-title-slugified&amp;gt;-video-ut102.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;www.daserste.de&#x2F;unterhaltung&#x2F;film&#x2F;film-im-ersten&#x2F;videos&#x2F;&amp;lt;movie-title-slugified&amp;gt;-video-ut100.xml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then convert the XML to .srt (more common in video players):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gotranscript.com&#x2F;subtitle-converter&quot;&gt;works fine!&lt;&#x2F;a&gt;&lt;pre&gt;&lt;code&gt;# first fix timings
cat orig.xml | sed &amp;#x27;s&amp;#x2F;=&amp;quot;10:&amp;#x2F;=&amp;quot;00:&amp;#x2F;g&amp;#x27; | sed &amp;#x27;s&amp;#x2F;=&amp;quot;11:&amp;#x2F;=&amp;quot;01:&amp;#x2F;g&amp;#x27; &amp;gt; tmp.xml
# convert XML -&amp;gt; SRT on that website
dos2unix file.srt
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;You can do it using some scrips, f.e. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rg3&#x2F;youtube-dl&#x2F;issues&#x2F;12303#issuecomment-315519815&quot;&gt;this one&lt;&#x2F;a&gt; (not tested).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;thanks ARD for putting all this wealth of stuff free for everyone.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>How to sync a GitHub fork</title>
        <published>2018-10-20T00:00:00+00:00</published>
        <updated>2018-10-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/github-sync-fork/" type="text/html"/>
        <id>https://apiraino.github.io/github-sync-fork/</id>
        <content type="html">&lt;h3 id=&quot;part-i-this-is-embarrassing&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-this-is-embarrassing&quot; aria-label=&quot;Anchor link for: part-i-this-is-embarrassing&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_i&#x27;&gt;&lt;&#x2F;a&gt;Part I: This is embarrassing&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s easy to rebase a branch, but when it comes to GitHub forks I &lt;strong&gt;always&lt;&#x2F;strong&gt; forget how to do it, so I keep on checking the same GitHub guide over and over. As with any other big humanity failure, history keeps repeating itself.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not kidding when I say this is the most repeated DuckDuckGo search I&#x27;ve done in 2018: &lt;code&gt;github rebase branch fork from master&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-ii-howto&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-howto&quot; aria-label=&quot;Anchor link for: part-ii-howto&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_ii&#x27;&gt;&lt;&#x2F;a&gt;Part II: HOWTO&lt;&#x2F;h3&gt;
&lt;p&gt;Your forked project has by default one &lt;code&gt;upstream&lt;&#x2F;code&gt;: the one of your fork.&lt;&#x2F;p&gt;
&lt;p&gt;So, first add the original project as additional &lt;code&gt;upstream&lt;&#x2F;code&gt; (this needs to be done only once):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cd coolproject_myfork
$ git remote add upstream git@github.com:original_owner&amp;#x2F;coolproject.git
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the additional &lt;code&gt;upstream&lt;&#x2F;code&gt; is available, update you fork:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git fetch upstream
$ git checkout master
$ git merge upstream&amp;#x2F;master
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;push the updates to your master:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git push origin master
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can update your feature too:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git checkout &amp;lt;my_feature_branch&amp;gt;
$ git merge master
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;syncing-a-fork&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iii-let-s-make-things-a-bit-better&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-let-s-make-things-a-bit-better&quot; aria-label=&quot;Anchor link for: part-iii-let-s-make-things-a-bit-better&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_iii&#x27;&gt;&lt;&#x2F;a&gt;Part III: Let&#x27;s make things a bit better&lt;&#x2F;h3&gt;
&lt;p&gt;When you&#x27;re about to merge your feature branch in the main branch, it&#x27;s &lt;em&gt;always&lt;&#x2F;em&gt; a good idea to do the opposite first: by merging the main branch into your feature branch you will ease your job in case of conflicts.&lt;&#x2F;p&gt;
&lt;p&gt;In the best scenario, there&#x27;s nothing else you have to do.&lt;&#x2F;p&gt;
&lt;p&gt;In the worst case, if your feature branch is an unrecoverable mess or has a tormented history, you can &amp;quot;rebase&amp;quot; creating another feature branch from the current master and merge the messed up feature branch into the new, updated feature branch. But this is another topic. Something along this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ git status
On myfork
...

$ git merge master
&amp;lt;a mess of conflicts&amp;gt;

$ git checkout master
$ git checkout -b myfork_take2
$ git merge --squash --no-commit myfork
$ git reset

# and now you have your patch out of the stage and can regroup in clean commits
# people working on the projects will thank you for keeping the git history clean
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Art is a multiform beast</title>
        <published>2018-10-08T00:00:00+00:00</published>
        <updated>2018-10-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/youtube-mashups/" type="text/html"/>
        <id>https://apiraino.github.io/youtube-mashups/</id>
        <content type="html">&lt;p&gt;🤘&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.youtubemultiplier.com&#x2F;5bbbafcb02367-doom-metal-and-babies-suffering.php&quot;&gt;YouTube mashup #1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.youtubemultiplier.com&#x2F;5bbbb06120311-doom-metal-and-people-suffering-in-hell.php&quot;&gt;YouTube mashup #2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>TLS: too soon to secure your email?</title>
        <published>2018-09-22T00:00:00+00:00</published>
        <updated>2018-09-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/tls-too-soon/" type="text/html"/>
        <id>https://apiraino.github.io/tls-too-soon/</id>
        <content type="html">&lt;h3 id=&quot;part-i-disbelief&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-disbelief&quot; aria-label=&quot;Anchor link for: part-i-disbelief&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_i&#x27;&gt;&lt;&#x2F;a&gt;Part I: Disbelief&lt;&#x2F;h3&gt;
&lt;p&gt;Some time ago I&#x27;ve read about the &lt;a href=&quot;http:&#x2F;&#x2F;starttls-everywhere.org&quot;&gt;STARTTLS Everywhere&lt;&#x2F;a&gt; campaign by the EFF. I was immediately sold.&lt;&#x2F;p&gt;
&lt;p&gt;With the precious help of a friend (more knowledgeable than me on the matter), we configured my Postfix as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;postfix&quot; class=&quot;language-postfix &quot;&gt;&lt;code class=&quot;language-postfix&quot; data-lang=&quot;postfix&quot;&gt;smtp_enforce_tls = no
smtpd_tls_loglevel = 1
smtpd_tls_cert_file = &amp;#x2F;path&amp;#x2F;to&amp;#x2F;letsencrypt&amp;#x2F;fullchain.pem
smtpd_tls_key_file = &amp;#x2F;path&amp;#x2F;to&amp;#x2F;letsencrypt&amp;#x2F;privkey.pem
smtpd_tls_received_header = yes

smtpd_tls_session_cache_database = btree:${data_directory}&amp;#x2F;smtpd_scache
smtpd_tls_session_cache_timeout = 86400s
smtpd_tls_security_level = encrypt  # &amp;lt;--- THIS is the important part!
smtpd_tls_ciphers = high
smtpd_tls_mandatory_ciphers = high

smtp_tls_session_cache_database = btree:${data_directory}&amp;#x2F;smtp_scache
smtp_tls_session_cache_timeout = 86400s
smtp_tls_security_level = encrypt  # &amp;lt;--- THIS is the important part!
smtp_tls_ciphers = high
smtp_tls_mandatory_ciphers = high
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the changes everything works; so, let&#x27;s start our experimentation period.&lt;&#x2F;p&gt;
&lt;p&gt;After a while (couple of weeks), as I sent emails from my various account, some mail server started spitting back my emails:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;tin.it&lt;&#x2F;li&gt;
&lt;li&gt;tiscali.it&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;another_italian_domain_pretty_important_to_me&amp;gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The error message I receive is a nice:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;too_much_tls.png&quot;&gt;
    &lt;figcaption&gt;Too much, too soon&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Two of these emails servers are &lt;em&gt;Italian national providers&lt;&#x2F;em&gt; - not amateurish Postfix installation from your know-it-all friend that plugs printer power cords.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t they, right?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-ii-technical-support-ftw-or-not&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-technical-support-ftw-or-not&quot; aria-label=&quot;Anchor link for: part-ii-technical-support-ftw-or-not&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_ii&#x27;&gt;&lt;&#x2F;a&gt;Part II: Technical support FTW ... or not?&lt;&#x2F;h3&gt;
&lt;p&gt;This part will be really short. I&#x27;ve contacted the admin reference suggesting to improve their configuration and - of course - my request was ignored.&lt;&#x2F;p&gt;
&lt;p&gt;Well, not exactly ignored: I could actually hear their laughters thousands kms away.&lt;&#x2F;p&gt;
&lt;p&gt;So, all I could do was relax the configuration I was so proud of and allow a more tolerant communication among SMTP servers:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;postfix&quot; class=&quot;language-postfix &quot;&gt;&lt;code class=&quot;language-postfix&quot; data-lang=&quot;postfix&quot;&gt;smtp_tls_security_level = may
# smtp_tls_security_level = encrypt
smtpd_tls_security_level = may
# smtpd_tls_security_level = encrypt
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;followed by the usual &lt;code&gt;postfix reload&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iii-to-add-insult-to-injury&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-to-add-insult-to-injury&quot; aria-label=&quot;Anchor link for: part-iii-to-add-insult-to-injury&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&#x27;part_iii&#x27;&gt;&lt;&#x2F;a&gt;Part III: To add insult to injury&lt;&#x2F;h3&gt;
&lt;p&gt;Fun fact! I have an old email account seldom used on one of the above-mentioned internet providers. I meant to use that account outside their country with the same SMTP settings because - well - what could possibly go wrong?&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;smtp_outside.png&quot;&gt;
    &lt;figcaption&gt;Ouch, *michael* doesn&#x27;t like emails from evil countries&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Although this is described in a support page of that provider, it doesn&#x27;t make this less awkward.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>EMACS Rust linter suddenly chocking</title>
        <published>2018-08-12T00:00:00+00:00</published>
        <updated>2018-08-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/emacs-rust/" type="text/html"/>
        <id>https://apiraino.github.io/emacs-rust/</id>
        <content type="html">&lt;h3 id=&quot;part-i-a-little-surprise&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-a-little-surprise&quot; aria-label=&quot;Anchor link for: part-i-a-little-surprise&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&quot;part_i&quot;&gt;&lt;&#x2F;a&gt;Part I: a little surprise&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;d spend a fair amount of time to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;emacs_reference&#x2F;blob&#x2F;master&#x2F;guide.md#rust-specific-setup&quot;&gt;setup EMACS for Rust development&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All of a sudden, I&#x27;ve recently realized I could not run &lt;code&gt;cargo build&lt;&#x2F;code&gt; easily anymore, I often had this message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cargo build
    Blocking waiting for file lock on build directory
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and there I had to wait for long (like, a full minute!).&lt;&#x2F;p&gt;
&lt;p&gt;Ooook, let&#x27;s spend some quality-time debugging &lt;strong&gt;*groan&lt;&#x2F;strong&gt;*&lt;&#x2F;p&gt;
&lt;p&gt;So, where do we start? The message, of course. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-mode&#x2F;issues&#x2F;181#issuecomment-319161568&quot;&gt;Here&lt;&#x2F;a&gt; I see someone is experiencing the same symptoms with another setup. The message &lt;em&gt;lingo&lt;&#x2F;em&gt; basically says there are concurrent tasks attempting to compile sources. Uhm ... and who is the other ghost compiling process?&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll start doing some tests randomly saving a buffer in EMACS after or before a fresh build. After a while I see that simply opening a file in a buffer is triggering a chain reaction of &lt;code&gt;cargo test&lt;&#x2F;code&gt; processes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&amp;#x2F;home&amp;#x2F;me&amp;#x2F;.rustup&amp;#x2F;toolchains&amp;#x2F;nightly-x86_64-unknown-linux-gnu&amp;#x2F;bin&amp;#x2F;cargo test --no-run --bin my_rust_project --message-format=json
&amp;#x2F;home&amp;#x2F;me&amp;#x2F;.rustup&amp;#x2F;toolchains&amp;#x2F;nightly-x86_64-unknown-linux-gnu&amp;#x2F;bin&amp;#x2F;cargo test --no-run --lib --message-format=json
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What in the world is triggering a &lt;strong&gt;tests&lt;&#x2F;strong&gt; run!?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-ii-the-facepalm&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-the-facepalm&quot; aria-label=&quot;Anchor link for: part-ii-the-facepalm&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&quot;part_ii&quot;&gt;&lt;&#x2F;a&gt;Part II: the facepalm&lt;&#x2F;h3&gt;
&lt;p&gt;I comment out all my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apiraino&#x2F;emacs_reference&#x2F;blob&#x2F;master&#x2F;.emacs.d&#x2F;personal&#x2F;jman.el&quot;&gt;customization to EMACS&lt;&#x2F;a&gt; and run on bare &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bbatsov&#x2F;prelude&quot;&gt;Prelude&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Still tests running when I open a file.&lt;&#x2F;p&gt;
&lt;p&gt;Damn, ok let&#x27;s patiently comment all the Prelude modules and see which one is triggering this. Turns out that &lt;em&gt;any&lt;&#x2F;em&gt; modules I have enabled triggers this behaviour, so there must be a common module above all.&lt;&#x2F;p&gt;
&lt;p&gt;Fast-forward: the culprit is the &lt;code&gt;prelude-programming&lt;&#x2F;code&gt; module, namely this piece of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elisp&quot; class=&quot;language-elisp &quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(if (fboundp &amp;#x27;global-flycheck-mode)
    (global-flycheck-mode +1)
  (add-hook &amp;#x27;prog-mode-hook &amp;#x27;flycheck-mode))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What does Flycheck know about Rust? A syntax checker that triggers tests? &lt;strong&gt;*sigh&lt;&#x2F;strong&gt;*&lt;&#x2F;p&gt;
&lt;p&gt;So after some more research, I see that Flycheck &lt;em&gt;does&lt;&#x2F;em&gt; know Jack &lt;a href=&quot;http:&#x2F;&#x2F;www.flycheck.org&#x2F;en&#x2F;latest&#x2F;languages.html#rust&quot;&gt;about Rust&lt;&#x2F;a&gt; and in a way I didn&#x27;t expect: a &lt;code&gt;flycheck-rust-check-tests&lt;&#x2F;code&gt; config parameter.&lt;&#x2F;p&gt;
&lt;p&gt;This parameter has been added &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flycheck&#x2F;flycheck&#x2F;blob&#x2F;7a7a358b6232cff6a2f0f80f8c8b314e505b8c56&#x2F;CHANGES.old#L376&quot;&gt;many moons ago&lt;&#x2F;a&gt; (in 2014) when the project was not even on GitHub so I don&#x27;t have a diff or an issue to refer to. Let&#x27;s have a look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flycheck&#x2F;flycheck&#x2F;blob&#x2F;master&#x2F;flycheck.el#L9477&quot;&gt;&lt;code&gt;flycheck.el&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; elisp code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elisp&quot; class=&quot;language-elisp &quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(flycheck-def-option-var flycheck-rust-check-tests t (rust-cargo rust)
  &amp;quot;Whether to check test code in Rust.

For the `rust&amp;#x27; checker: When non-nil, `rustc&amp;#x27; is passed the
`--test&amp;#x27; flag, which will check any code marked with the
`#[cfg(test)]&amp;#x27; attribute and any functions marked with
`#[test]&amp;#x27;. Otherwise, `rustc&amp;#x27; is not passed `--test&amp;#x27; and test
code will not be checked.  Skipping `--test&amp;#x27; is necessary when
using `#![no_std]&amp;#x27;, because compiling the test runner requires
`std&amp;#x27;.

For the `rust-cargo&amp;#x27; checker: When non-nil, calls `cargo test
--no-run&amp;#x27; instead of `cargo check&amp;#x27;.&amp;quot;
  :type &amp;#x27;boolean
  :safe #&amp;#x27;booleanp
  :package-version &amp;#x27;(&amp;quot;flycheck&amp;quot; . &amp;quot;0.19&amp;quot;))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code&gt;flycheck-rust-check-tests&lt;&#x2F;code&gt; is set to &lt;code&gt;nil&lt;&#x2F;code&gt; &lt;em&gt;and&lt;&#x2F;em&gt; &lt;code&gt;cargo&lt;&#x2F;code&gt; is installed, flycheck will execute &lt;code&gt;cargo test --no-run&lt;&#x2F;code&gt; instead of &lt;code&gt;cargo check&lt;&#x2F;code&gt;. Let&#x27;s do this and add a line to the Rust prelude module (&lt;code&gt;prelude-rust.el&lt;&#x2F;code&gt;) trying to mute that parameter:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elisp&quot; class=&quot;language-elisp &quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;(setq flycheck-rust-check-tests nil)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and ... the &lt;code&gt;cargo test&lt;&#x2F;code&gt; little devils are not spawned anymore.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iii-the-unanswered-questions&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-the-unanswered-questions&quot; aria-label=&quot;Anchor link for: part-iii-the-unanswered-questions&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Part III: the unanswered questions&lt;&#x2F;h3&gt;
&lt;p&gt;The saying goes that if you reproduce a bug, you&#x27;re halfway to its resolution. I&#x27;ll add that fixing the bug takes you to a 90%; but only understanding the cause of a behaviour unlocks the real 100% achievement.&lt;&#x2F;p&gt;
&lt;p&gt;So what triggered such a &lt;code&gt;cargo test&lt;&#x2F;code&gt; frenzy? Has it ever always been there, just unnoticed?&lt;&#x2F;p&gt;
&lt;p&gt;The most likely answer is that Flycheck run &lt;code&gt;cargo test&lt;&#x2F;code&gt; and I manually run &lt;code&gt;cargo build&lt;&#x2F;code&gt; from the command line. Each of these two commands invalidates the compiled cache, so what happened is something like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open file in buffer (&lt;code&gt;cargo test&lt;&#x2F;code&gt; triggered, slow run unnoticed)&lt;&#x2F;li&gt;
&lt;li&gt;code-code-code&lt;&#x2F;li&gt;
&lt;li&gt;Save buffer (&lt;code&gt;cargo test&lt;&#x2F;code&gt; triggered: fast run)&lt;&#x2F;li&gt;
&lt;li&gt;from CLI run &lt;code&gt;cargo build&lt;&#x2F;code&gt; to run my application (slow run)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;&#x2F;me wtf?!&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and then:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;code-code-code&lt;&#x2F;li&gt;
&lt;li&gt;Save buffer (&lt;code&gt;cargo test&lt;&#x2F;code&gt; triggered: slow run unnoticed)&lt;&#x2F;li&gt;
&lt;li&gt;from CLI run &lt;code&gt;cargo build&lt;&#x2F;code&gt; (message warning about concurrent build)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;&#x2F;me wtf?!&lt;&#x2F;em&gt; again&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Running several times in a row only &lt;em&gt;one&lt;&#x2F;em&gt; of these two commands doesn&#x27;t invalidate the build cache, so the issue doesn&#x27;t happen.&lt;&#x2F;p&gt;
&lt;p&gt;Setting to &lt;code&gt;nil&lt;&#x2F;code&gt; that variable made Flycheck switch from &lt;code&gt;cargo test&lt;&#x2F;code&gt; to &lt;code&gt;cargo check&lt;&#x2F;code&gt; to get errors produced the following benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo check&lt;&#x2F;code&gt; is the recommended way to get &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flycheck&#x2F;flycheck&#x2F;pull&#x2F;1289&quot;&gt;compilation warning&#x2F;errors&lt;&#x2F;a&gt; and in some scenario should &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2017&#x2F;03&#x2F;16&#x2F;Rust-1.16.html&quot;&gt;speed things up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;informed me to not run &lt;code&gt;cargo build&lt;&#x2F;code&gt; unless I really need to&lt;&#x2F;li&gt;
&lt;li&gt;does not run &lt;code&gt;cargo test&lt;&#x2F;code&gt; to get syntax&#x2F;lint errors, which was awkward and confusing in the first place&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;BUG&lt;&#x2F;em&gt;: there&#x27;s an old outstanding bug, due to &lt;code&gt;cargo check&lt;&#x2F;code&gt; metadata caching: on &lt;em&gt;--lib&lt;&#x2F;em&gt; cargo projects (not &lt;em&gt;--bin&lt;&#x2F;em&gt;) it only shows compiler warnings &lt;em&gt;once&lt;&#x2F;em&gt; after a rebuild, see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;3624&quot;&gt;issue&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Flycheck command before:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;cargo test --no-run --lib --message-format=json
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and after:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;cargo check --lib --message-format=json
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, let&#x27;s ensure this won&#x27;t happen again - let&#x27;s save this in my custom EMACS config:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;M-x flycheck-rust-check-tests
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;set the value to &lt;code&gt;nil&lt;&#x2F;code&gt;, then save to &lt;code&gt;~&#x2F;.emacs.d&#x2F;personal&#x2F;custom.el&lt;&#x2F;code&gt;. This improve upon the previous solution as now I don&#x27;t need to customize &lt;code&gt;prelude-rust.el&lt;&#x2F;code&gt; anymore.&lt;&#x2F;p&gt;
&lt;p&gt;Second step, disable &lt;code&gt;rust&lt;&#x2F;code&gt; from the list of checkers:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;M-x flycheck-disabled-checkers
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, my &lt;code&gt;custom.el&lt;&#x2F;code&gt; has two new configs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;elisp&quot; class=&quot;language-elisp &quot;&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt; &amp;#x27;(flycheck-disabled-checkers (quote (rust)))
 &amp;#x27;(flycheck-rust-check-tests nil)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Closing thoughts: an outstanding issue in the Rust world is how to speed compiling times up, but that&#x27;s nothing we can do here, eventually we will get there.&lt;&#x2F;p&gt;
&lt;p&gt;Oh, one last comment: I hate elisp so much that I find a perverse pleasure in understanding how it works.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Power suspend on Ubuntu with an external monitor</title>
        <published>2018-08-06T00:00:00+00:00</published>
        <updated>2018-08-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ubuntu-gnome-power/" type="text/html"/>
        <id>https://apiraino.github.io/ubuntu-gnome-power/</id>
        <content type="html">&lt;h3 id=&quot;part-i-setting-the-basic-suspend&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-setting-the-basic-suspend&quot; aria-label=&quot;Anchor link for: part-i-setting-the-basic-suspend&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part I: setting the basic suspend&lt;&#x2F;h3&gt;
&lt;p&gt;You can access the power management from the Gnome settings and set the computer to suspend after a delay (both on battery and on AC).&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;gnome_suspend.png&quot;&gt;
    &lt;figcaption&gt;Gnome settings for the suspend behaviour&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Set them to your preference and now the laptop should always suspend after the delay you&#x27;ve set.&lt;&#x2F;p&gt;
&lt;p&gt;One more thing: there&#x27;s a separate setting to configure the &amp;quot;close lid&amp;quot; action.&lt;&#x2F;p&gt;
&lt;p&gt;Once, it was right with the Power settings, but at some point it has been removed.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;gpm-prefs.png&quot;&gt;
    &lt;figcaption&gt;OLD and NEW Gnome power settings&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Oh wait, it was not removed. Just moved to a place that only the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Tweaks&quot;&gt;Tweak companion utility&lt;&#x2F;a&gt; can reach:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;gnome-tweaks-power.png&quot;&gt;
    &lt;figcaption&gt;What. The. Actual. Fuck.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;As a side note, I&#x27;ve discovered in the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;GNOME#Configure_behaviour_on_lid_switch_close&quot;&gt;ArchLinux wiki&lt;&#x2F;a&gt; that this setting, when set to &lt;em&gt;false&lt;&#x2F;em&gt;, creates this file:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;~&#x2F;.config&#x2F;autostart&#x2F;ignore-lid-switch-tweak.desktop&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;a &amp;quot;drop-in&amp;quot; configuration file that will trigger the Gnome Tweaks &lt;em&gt;inhibitor&lt;&#x2F;em&gt;. Well ... wow.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-ii-the-external-monitor&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-the-external-monitor&quot; aria-label=&quot;Anchor link for: part-ii-the-external-monitor&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part II: the external monitor&lt;&#x2F;h3&gt;
&lt;p&gt;I soon realize that this is just partially what I need: I have an external monitor attached and this seems to be a completely different can of worms.&lt;&#x2F;p&gt;
&lt;p&gt;The external monitor is blocking the suspend feature. Well, one can argue that it makes sense: you might want to attach an external keyboard+monitor to a laptop, close the lid, put it away in a corner and keep on working.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, I&#x27;d like the laptop to always suspend immediately when I close the lid, with or without an external monitor attached.&lt;&#x2F;p&gt;
&lt;p&gt;After some research, I discover a hidden Gnome setting: &lt;code&gt;lid-close-suspend-with-external-monitor&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Why is it hidden? There&#x27;s no explicit flag for this on Gnome settings (or Gnome Tweaks).&lt;&#x2F;p&gt;
&lt;p&gt;This setting can be changed using &lt;code&gt;dconf-editor&lt;&#x2F;code&gt; (&lt;code&gt;apt install dconf-editor&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ dconf-editor org.gnome.settings-daemon.plugins.power
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then look up &lt;code&gt;lid-close-suspend-with-external-monitor&lt;&#x2F;code&gt;, its default is &lt;em&gt;false&lt;&#x2F;em&gt;. Set it to &lt;em&gt;true&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So, not only this setting if not actionable in a &amp;quot;user-friendly&amp;quot; way, not even using Gnome Tweaks, but also it looks to be undocumented. I&#x27;ve found a reference on a &lt;a href=&quot;https:&#x2F;&#x2F;ubuntu-mate.community&#x2F;t&#x2F;not-sleep-laptop-when-external-display-is-connected&#x2F;16921&quot;&gt;Ubuntu Mate forum&lt;&#x2F;a&gt; after throwing some random keywords at DuckDuckGo. And only after - now I knew what to look for - I&#x27;ve found it referenced in other places too. I was not able to find a reference in any Gnome documentation. And, in my opinion, this is not good.&lt;&#x2F;p&gt;
&lt;p&gt;While the majority of people were complaining that their laptop suspended when they closed the lid, this is exactly the behaviour I was looking for, se let&#x27;s set &lt;code&gt;lid-close-suspend-with-external-monitor&lt;&#x2F;code&gt; to &lt;em&gt;false&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It doesn&#x27;t work.&lt;&#x2F;p&gt;
&lt;p&gt;If I unplug the monitor or explicitly request to suspend, it suspend-on-lid-closing works. With the external monitor attached, no way. *sigh*.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s apply some more DDG-fu. Uhm ... more people complaining about this. I also see floating keywords such as &lt;em&gt;systemd&lt;&#x2F;em&gt;, &lt;em&gt;nvidia&lt;&#x2F;em&gt;, &lt;em&gt;bugs&lt;&#x2F;em&gt; ... *groan*, I should have seen this coming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;613693&#x2F;15-04-15-10-16-04-closing-lid-does-not-suspend-laptop-if-connected-to-extern&#x2F;613773#613773&quot;&gt;This answer on askubuntu.com&lt;&#x2F;a&gt; suggests a problem with the nVidia chipset (ah-ah, so &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JbovJbKALzA&quot;&gt;Linus was right?&lt;&#x2F;a&gt;). That was in 2015, will they have fixed by now? I disable the nVidia chipset altogether with &lt;code&gt;nvidia-settings&lt;&#x2F;code&gt; and switch to the FOSS &lt;em&gt;nouveau&lt;&#x2F;em&gt; driver from Ubuntu &amp;quot;Software &amp;amp; Update&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;No luck.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iii-following-systemd-bloody-trail&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-following-systemd-bloody-trail&quot; aria-label=&quot;Anchor link for: part-iii-following-systemd-bloody-trail&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
&lt;a name=&quot;part_iii&quot;&gt;&lt;&#x2F;a&gt;Part III: following &lt;em&gt;systemd&lt;&#x2F;em&gt; bloody trail&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;systemd&#x2F;systemd&#x2F;issues&#x2F;7137&quot;&gt;Here&lt;&#x2F;a&gt; there&#x27;s a thorough bug report that teaches me how to edit the &lt;code&gt;logind&lt;&#x2F;code&gt; configuration, followed by a convoluted explanation by Poettering on why systemd&#x27;s behaviour is correct and passes the buck to the Gnome folks. The main getaway in this GitHub issue, however, is the line that allows you to inspect what systemd is blocking and why:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ systemd-inhibit --list --mode block
...
     Who: me (UID 1000&amp;#x2F;me, PID 1393&amp;#x2F;gsd-power)
    What: handle-lid-switch
     Why: Multiple displays attached
    Mode: block
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;now&lt;&#x2F;em&gt; I understand what&#x27;s really happening and what to investigate.&lt;&#x2F;p&gt;
&lt;p&gt;Something&#x27;s blocking the &lt;code&gt;handle-lid-switch&lt;&#x2F;code&gt; action. I need to get rid of those &amp;quot;&lt;code&gt;block&lt;&#x2F;code&gt;&amp;quot;s. I feel I&#x27;m just some DDG-searches from the solution.&lt;&#x2F;p&gt;
&lt;p&gt;Following &lt;a href=&quot;https:&#x2F;&#x2F;bugs.freedesktop.org&#x2F;show_bug.cgi?id=76267&quot;&gt;this&lt;&#x2F;a&gt; systemd issue, I decide to bite the bullet and dive into the &lt;em&gt;systemd&lt;&#x2F;em&gt; configuration and &lt;code&gt;logind.conf&lt;&#x2F;code&gt; documentation (&lt;code&gt;man 5 logind.conf&lt;&#x2F;code&gt;), changing the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;HandleLidSwitch=suspend
HandleLidSwitchDocked=suspend
LidSwitchIgnoreInhibited=no
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Restart systemd &lt;em&gt;logind&lt;&#x2F;em&gt; service with &lt;code&gt;sudo systemctl restart systemd-logind&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Nope.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s the problem with systemd not honouring the &lt;code&gt;LidSwitchIgnoreInhibited&lt;&#x2F;code&gt; setting?&lt;&#x2F;p&gt;
&lt;p&gt;According to this &lt;a href=&quot;https:&#x2F;&#x2F;bbs.archlinux.org&#x2F;viewtopic.php?pid=1735292#p1735292&quot;&gt;ArchLinux forum thread&lt;&#x2F;a&gt; there&#x27;s a Gnome bug that inhibits the suspend on lid closing. I&#x27;m not commenting further that thread.&lt;&#x2F;p&gt;
&lt;p&gt;Next hint retrieved from another &lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.redhat.com&#x2F;show_bug.cgi?id=1517967#c4&quot;&gt;issue&lt;&#x2F;a&gt;, this time on Fedora: apparently there&#x27;s a patch for this! I&#x27;m getting closer, I can feel it.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately that thread says that the patch didn&#x27;t make it to Bionic Beaver, &lt;em&gt;BUT&lt;&#x2F;em&gt; a &lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.gnome.org&#x2F;show_bug.cgi?id=788915#c10&quot;&gt;workaround&lt;&#x2F;a&gt; disables all lid management done by Gnome:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Edit &amp;#x2F;etc&amp;#x2F;UPower&amp;#x2F;UPower.conf
Change the setting
IgnoreLid=false to IgnoreLid=true
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;YES, it worked!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so ... all is well what ends well, right?&lt;&#x2F;p&gt;
&lt;p&gt;Almost.&lt;&#x2F;p&gt;
&lt;p&gt;As a addendum, I&#x27;ve discovered some interesting things preventing suspend&#x2F;sleep in Ubuntu. Aside the aforementioned &#x27;handle-lid-switch&#x27;, there are other applications blocking it.&lt;&#x2F;p&gt;
&lt;p&gt;I use &lt;a href=&quot;https:&#x2F;&#x2F;rambox.pro&quot;&gt;Rambox&lt;&#x2F;a&gt; to keep together instant messenger (IM) applications; some of them have a desktop client that is nothing but a tethered session with the smartphone. When using Rambox, this session between the two devices seems to be blocking the suspend&#x2F;sleep. It took me a while to narrow down the culprit, only to realize that happened when opening a session with &lt;a href=&quot;http:&#x2F;&#x2F;web.threemaa.ch&quot;&gt;Threema&lt;&#x2F;a&gt;; here&#x27;s what we see using our new &lt;a href=&quot;https:&#x2F;&#x2F;apiraino.github.io&#x2F;ubuntu-gnome-power&#x2F;#part_iii&quot;&gt;cool new trick&lt;&#x2F;a&gt; we&#x27;ve learned:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ systemd-inhibit --list --mode block
...
     Who: me (UID 1000&amp;#x2F;me, PID 2919&amp;#x2F;gnome-session-b)
    What: shutdown:sleep
     Why: user session inhibited
    Mode: block
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll need to close the session in order to cut the leash and be able to suspend your laptop. This does not happen if I use the plain browser.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iv-final-thoughts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iv-final-thoughts&quot; aria-label=&quot;Anchor link for: part-iv-final-thoughts&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part IV: final thoughts&lt;&#x2F;h3&gt;
&lt;p&gt;I can only be thankful to the generosity of the collective mind, a whole lot of people, whom each bit of hint allowed to move me an inch forward to the solution, allowing me to understand and (possibly fix) the issue at hand.&lt;&#x2F;p&gt;
&lt;p&gt;Complex projects not talking to each other, bad design decisions, then reverted, half-assed documentation. Volunteers doing what they can to help, sometimes doing what they want. This year will &lt;em&gt;never&lt;&#x2F;em&gt; be the year of Linux, until stuff like that persists.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Locally testing a GitHub static website</title>
        <published>2018-08-05T00:00:00+00:00</published>
        <updated>2018-08-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/github-pages/" type="text/html"/>
        <id>https://apiraino.github.io/github-pages/</id>
        <content type="html">&lt;h3 id=&quot;part-i-the-hosted-solution&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-i-the-hosted-solution&quot; aria-label=&quot;Anchor link for: part-i-the-hosted-solution&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part I: The &amp;quot;hosted&amp;quot; solution&lt;&#x2F;h3&gt;
&lt;p&gt;Github pages are nice, behind the scene there is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;jekyll&quot;&gt;jekyll&lt;&#x2F;a&gt; instance running your website&#x2F;blog. Many plugins are available, you can compile HTML files out of a Markdown source you commit to the GitHub repository.&lt;&#x2F;p&gt;
&lt;p&gt;But what if you want to test locally the website before committing the changes?&lt;&#x2F;p&gt;
&lt;p&gt;You need to follow this tutorial &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;setting-up-your-github-pages-site-locally-with-jekyll&quot;&gt;on GitHub&lt;&#x2F;a&gt; and install:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bundler.io&quot;&gt;Bundler&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;jekyll&quot;&gt;jekyll&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ok, what if you don&#x27;t want any of this cruft installed (&lt;sub&gt;because as a pythonist &lt;em&gt;and&lt;&#x2F;em&gt; linux user, you already have your laptop messed up enough&lt;&#x2F;sub&gt;) just for your GitHub pages?&lt;&#x2F;p&gt;
&lt;p&gt;Docker to the rescue!&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Checkout this repo: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BretFisher&#x2F;jekyll-serve&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;BretFisher&#x2F;jekyll-serve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;copy into your repo the file &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;From your website repo dir run: &lt;code&gt;$ docker-compose up&lt;&#x2F;code&gt;. It will download the docker image(s), build the container and run it on &lt;code&gt;localhost:80&lt;&#x2F;code&gt;; wow. This command (almost) equals to the following docker bash command:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ docker run --rm -p 80:4000 \
   -v $(pwd):&amp;#x2F;site \
   bretfisher&amp;#x2F;jekyll-serve
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s all good but ... that docker container defaults to using the &lt;a href=&quot;https:&#x2F;&#x2F;jekyll.github.io&#x2F;minima&quot;&gt;&lt;code&gt;minima&lt;&#x2F;code&gt; jekyll theme&lt;&#x2F;a&gt;. As you can see, this site is pretty different and uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pages-themes&#x2F;hacker&quot;&gt;the hacker theme&lt;&#x2F;a&gt;, so how to load this theme?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-ii-here-be-dragons&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-ii-here-be-dragons&quot; aria-label=&quot;Anchor link for: part-ii-here-be-dragons&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part II: here be dragons&lt;&#x2F;h3&gt;
&lt;p&gt;You can do that editing your &lt;code&gt;_config.yml&lt;&#x2F;code&gt; (create it if not present), adding (in my case) the following line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;theme: jekyll-hacker-theme

# other values you may already have
title: my blog
description: too much information
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run again the container, and ... watch it crash.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ docker run ....
...
      Generating...
jekyll 3.7.3 | Error:  No such file or directory - git
  Liquid Exception: No such file or directory - git in &amp;#x2F;_layouts&amp;#x2F;default.html
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I could not generate anymore the static HTML, &lt;code&gt;jekyll serve&lt;&#x2F;code&gt; crashes for reasons not apparent to my ruby-newbie eyes.&lt;&#x2F;p&gt;
&lt;p&gt;So I tried what everyone does: trial-and-error, copy error on search engine, check stackoverflow, apply or discard patch, next error, rinse and repeat (gnawing your own teeth and mumbling 135 WTFs&#x2F;minute).&lt;&#x2F;p&gt;
&lt;p&gt;First batch of fixes occurred when I&#x27;ve understood that the docker container downloaded a nice Ruby package called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;github-metadata&quot;&gt;&lt;code&gt;github-metadata&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This package takes advantage of your remote repo to gather some info. But you need to tell it &lt;em&gt;what&lt;&#x2F;em&gt; your repo is. So let&#x27;s fix that by adding to the &lt;code&gt;_config.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;repository: apiraino&amp;#x2F;apiraino.github.io
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and pass your GitHub token when you run the container:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ docker run --rm -p 80:4000 \
   -e JEKYLL_GITHUB_TOKEN=xxx \
   -v $(pwd):&amp;#x2F;site \
   bretfisher&amp;#x2F;jekyll-serve
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this is explained &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;github-metadata&#x2F;blob&#x2F;master&#x2F;docs&#x2F;configuration.md#configuration&quot;&gt;in their documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;after a long back and forth I&#x27;ve finally nailed another issue: the ruby package &lt;code&gt;github-metadata&lt;&#x2F;code&gt; is not exporting a variable used by the &lt;code&gt;hacker&lt;&#x2F;code&gt; theme: &lt;code&gt;github.build_revision&lt;&#x2F;code&gt;, which is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pages-themes&#x2F;hacker&#x2F;blob&#x2F;master&#x2F;_layouts&#x2F;default.html#l7&quot;&gt;required by this line of code&lt;&#x2F;a&gt;. I rolled back all the changes (yay) and verified that removing that single variable made everything work.&lt;&#x2F;p&gt;
&lt;p&gt;But why did it fail?&lt;&#x2F;p&gt;
&lt;p&gt;Like we said, the Ruby package takes advantage of the directive &lt;code&gt;repository&lt;&#x2F;code&gt; (and the GitHub token you pass to docker) to query your repo for some stuff; here&#x27;s the Github documentation &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;articles&#x2F;repository-metadata-on-github-pages&quot;&gt;about the metadata&lt;&#x2F;a&gt;. It&#x27;s not clear where the fail happens: in the Ruby package or the Github API?&lt;&#x2F;p&gt;
&lt;p&gt;Ok, I can live without that variable, but I can&#x27;t sleep until I really fix it. What is this variable, how can I retrieve it? Turns out that the metadata &lt;code&gt;build_revision&lt;&#x2F;code&gt; can be recovered from your local repo with a simple &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;github-metadata&#x2F;blob&#x2F;master&#x2F;docs&#x2F;configuration.md#overrides&quot;&gt;&lt;code&gt;git rev-parse HEAD&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Nice!&lt;&#x2F;p&gt;
&lt;p&gt;So, let&#x27;s add another environment variable to our docker command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ docker run --rm -p 80:4000 \
   -e JEKYLL_GITHUB_TOKEN=xxx \
   -e JEKYLL_BUILD_REVISION=$( git rev-parse HEAD ) \
   -v $(pwd):&amp;#x2F;site \
   bretfisher&amp;#x2F;jekyll-serve
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and &lt;em&gt;FINALLY&lt;&#x2F;em&gt; the website appeared exactly like I see it on github.&lt;&#x2F;p&gt;
&lt;p&gt;The final touch? Oh, the &lt;code&gt;Docker compose&lt;&#x2F;code&gt; recipe we mentioned at the beginning so you don&#x27;t have to remember that bash blurb. Let&#x27;s amend the one provided by the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BretFisher&#x2F;jekyll-serve&#x2F;blob&#x2F;master&#x2F;docker-compose.yml&quot;&gt;Dockerfile maintainer&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat docker-compose.yml
version: &amp;#x27;3.7&amp;#x27;

services:
  jekyll:
    image: bretfisher&amp;#x2F;jekyll-serve
    volumes:
      - .:&amp;#x2F;site
    ports:
      - &amp;#x27;80:4000&amp;#x27;
    environment:
      - JEKYLL_GITHUB_TOKEN=${JEKYLL_GITHUB_TOKEN}
      - JEKYLL_BUILD_REVISION=${JEKYLL_BUILD_REVISION}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add those two env variables in your &lt;code&gt;.bashrc&lt;&#x2F;code&gt; file (or equivalent for other shells) or create a shell script to be loaded upon entering this directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat set_env.sh
#!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;env bash
export JEKYLL_BUILD_REVISION=$( git rev-parse HEAD )
export JEKYLL_GITHUB_TOKEN=aaabbbcccddd
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;now simply run the Docker orchestrator:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ docker-compose up
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;part-iii-closing-thoughts&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iii-closing-thoughts&quot; aria-label=&quot;Anchor link for: part-iii-closing-thoughts&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part III: closing thoughts&lt;&#x2F;h3&gt;
&lt;p&gt;Wow, that was some work to just switch a theme in a containerized Jekyll instance.&lt;&#x2F;p&gt;
&lt;p&gt;See, the funny thing of all this story is that the theme works out of the box when enabled on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;Now, the behaviour of the &lt;code&gt;github-metadata&lt;&#x2F;code&gt; package looks a bit odd, I&#x27;d like to understand where the problem is (the Ruby package? The GitHub API?). I opened an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;github-metadata&#x2F;issues&#x2F;131&quot;&gt;issue on github&lt;&#x2F;a&gt; - let&#x27;s see if we can get to the bottom of it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;part-iv-understanding-the-issue-2018-12-14-update&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#part-iv-understanding-the-issue-2018-12-14-update&quot; aria-label=&quot;Anchor link for: part-iv-understanding-the-issue-2018-12-14-update&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Part IV: Understanding the issue (2018-12-14 UPDATE)&lt;&#x2F;h3&gt;
&lt;p&gt;Finally I could dig until the core.&lt;&#x2F;p&gt;
&lt;p&gt;Run the Docker container in interactive mode with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run --rm -it -p 80:4000 \
       -e JEKYLL_GITHUB_TOKEN=$GITHUB_TOKEN \
       -v $(pwd):&amp;#x2F;site \
       bretfisher&amp;#x2F;jekyll-serve &amp;#x2F;bin&amp;#x2F;bash
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then run Jekyll manually with a flag tracing the crash:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# bundle exec jekyll build --trace
Configuration file: &amp;#x2F;site&amp;#x2F;_config.yml
bundler: failed to load command: jekyll (&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bundle&amp;#x2F;bin&amp;#x2F;jekyll)
Errno::ENOENT: No such file or directory - git
  &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bundle&amp;#x2F;gems&amp;#x2F;jekyll-github-metadata-2.9.4&amp;#x2F;lib&amp;#x2F;jekyll-github-metadata&amp;#x2F;metadata_drop.rb:84:in ``&amp;#x27;
  &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bundle&amp;#x2F;gems&amp;#x2F;jekyll-github-metadata-2.9.4&amp;#x2F;lib&amp;#x2F;jekyll-github-metadata&amp;#x2F;metadata_drop.rb:84:in `build_revision&amp;#x27;
  &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bundle&amp;#x2F;gems&amp;#x2F;jekyll-3.7.3&amp;#x2F;lib&amp;#x2F;jekyll&amp;#x2F;drops&amp;#x2F;drop.rb:52:in `public_send&amp;#x27;
  &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bundle&amp;#x2F;gems&amp;#x2F;jekyll-3.7.3&amp;#x2F;lib&amp;#x2F;jekyll&amp;#x2F;drops&amp;#x2F;drop.rb:52:in `[]&amp;#x27;
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Ruby line failing is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    82 def build_revision
    83     @build_revision ||= begin
=&amp;gt;  84        ENV[&amp;quot;JEKYLL_BUILD_REVISION&amp;quot;] || `git rev-parse HEAD`.strip
    85     end
    86 end

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside the container &lt;code&gt;git&lt;&#x2F;code&gt; is not installed, so if the env var is not set as well, here it is the crash explained.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Managing Python projects with pipenv</title>
        <published>2018-08-03T00:00:00+00:00</published>
        <updated>2018-08-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/pipenv/" type="text/html"/>
        <id>https://apiraino.github.io/pipenv/</id>
        <content type="html">&lt;p&gt;Pipenv: &lt;a href=&quot;https:&#x2F;&#x2F;docs.pipenv.org&quot;&gt;https:&#x2F;&#x2F;docs.pipenv.org&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pipenv automatically creates a virtualenv, downloads the python version you&#x27;re interested in, all in two commands. It is the recommended package manager, due to replace &lt;code&gt;pip&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before, I&#x27;ve been installing python version with &lt;code&gt;pyenv&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ pyenv install 3.6.4
$ pyenv install 3.5.4
$ pyenv install 2.7.14
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Install Pipenv globally:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ sudo -H pip install pipenv
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I can use &lt;code&gt;pipenv&lt;&#x2F;code&gt; to install the python version &lt;em&gt;and&lt;&#x2F;em&gt; create the virtualenv:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cd ~&amp;#x2F;myprojects&amp;#x2F;prj_name&amp;#x2F;
$ pipenv --python 2.7
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A file &lt;code&gt;Pipfile&lt;&#x2F;code&gt; is being created:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ cat Pipfile
[dev-packages]
&amp;quot;flake8&amp;quot; = &amp;quot;&amp;gt;=3.3.0,&amp;lt;4&amp;quot;
pytest = &amp;quot;*&amp;quot;
mock = &amp;quot;*&amp;quot;

[packages]
django==2.0

[scripts]
tests = &amp;quot;bash .&amp;#x2F;run-tests.sh&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;[dev-packages]&lt;&#x2F;code&gt; are for development only (e.g. &lt;code&gt;mock&lt;&#x2F;code&gt;, &lt;code&gt;flake8&lt;&#x2F;code&gt;, &lt;code&gt;pytest&lt;&#x2F;code&gt;, ...), &lt;code&gt;[packages]&lt;&#x2F;code&gt; are your project real dependencies and &lt;code&gt;[scripts]&lt;&#x2F;code&gt; are script bindings (e.g. to execute commands).&lt;&#x2F;p&gt;
&lt;p&gt;Add project dependencies with:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;pipenv install &amp;lt;pkg_name&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or simply edit the &lt;code&gt;Pipfile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re migrating from a project using &lt;code&gt;pip&lt;&#x2F;code&gt; and the usual &lt;code&gt;requirements.txt&lt;&#x2F;code&gt; file, simply use &lt;code&gt;pipenv install&lt;&#x2F;code&gt; to automatically read that file, install the packages and create&#x2F;update the &lt;code&gt;Pipenv&lt;&#x2F;code&gt; file. You can install from a specifif pip file with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pipenv install --dev -r requirements&amp;#x2F;dev.txt
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After having installed all the packages, create a &lt;code&gt;Pipfile.lock&lt;&#x2F;code&gt; snapshot of the packages installed, each identified by a hash:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ pipenv lock
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check updates for installed packages: &lt;code&gt;$ pipenv update --outdated&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Update a package (will only update &lt;code&gt;Pipfile.lock&lt;&#x2F;code&gt;): &lt;code&gt;$ pipenv update &amp;lt;pkg&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Update all packages (will only update &lt;code&gt;Pipfile.lock&lt;&#x2F;code&gt;): &lt;code&gt;$ pipenv update&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#links&quot; aria-label=&quot;Anchor link for: links&quot;&gt;&amp;sect;&lt;&#x2F;a&gt;
Links&lt;&#x2F;h2&gt;
&lt;p&gt;Command reference: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv&#x2F;blob&#x2F;master&#x2F;COMMANDS.md#pyenv-install&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pyenv&#x2F;pyenv&#x2F;blob&#x2F;master&#x2F;COMMANDS.md#pyenv-install&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Submitting a patch for an Ubuntu package</title>
        <published>2018-07-26T00:00:00+00:00</published>
        <updated>2018-07-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/ubuntu-patch/" type="text/html"/>
        <id>https://apiraino.github.io/ubuntu-patch/</id>
        <content type="html">&lt;p&gt;I had the chance to peep into how an Ubuntu package is cooked and submitted: the procedure is clearly described in clear, detailed steps on the Ubuntu wiki, so this is just a summary for my own reference: I&#x27;ll give a lot of details for granted.&lt;&#x2F;p&gt;
&lt;p&gt;First of all you need a Launchpad account, with your SSH public and GPG key:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;packaging.ubuntu.com&#x2F;html&#x2F;getting-set-up.html&quot;&gt;http:&#x2F;&#x2F;packaging.ubuntu.com&#x2F;html&#x2F;getting-set-up.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then you need to setup your workstation for building packages and various tooling for patching package sources:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;packaging.ubuntu.com&#x2F;html&#x2F;fixing-a-bug.html&quot;&gt;http:&#x2F;&#x2F;packaging.ubuntu.com&#x2F;html&#x2F;fixing-a-bug.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t like adding a lot of random packages to my workstation, so I wrote down all the required packages so I can replicate the environment in a virtual machine or (as Ubuntu suggests) an &lt;a href=&quot;https:&#x2F;&#x2F;help.ubuntu.com&#x2F;lts&#x2F;serverguide&#x2F;lxd.html&quot;&gt;LXD container&lt;&#x2F;a&gt; - although I&#x27;ll investigate if it can run GUI applications.&lt;&#x2F;p&gt;
&lt;p&gt;Now, I discovered there are two ways to patch the sources of a package. One involves using &lt;a href=&quot;https:&#x2F;&#x2F;manpages.debian.org&#x2F;stretch&#x2F;devscripts&#x2F;edit-patch.1.en.html&quot;&gt;edit-patch (1)&lt;&#x2F;a&gt;, as described in the previous link, the other revolves around &lt;a href=&quot;https:&#x2F;&#x2F;manpages.debian.org&#x2F;stretch&#x2F;quilt&#x2F;quilt.1.en.html&quot;&gt;quilt (1)&lt;&#x2F;a&gt;, a nice tool that Andrew Morton wrote for his own purpose of maintaining patches to the Linux kernel (the &lt;em&gt;-mm&lt;&#x2F;em&gt; branch). Usage is detailed here:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raphaelhertzog.com&#x2F;2012&#x2F;08&#x2F;08&#x2F;how-to-use-quilt-to-manage-patches-in-debian-packages&quot;&gt;https:&#x2F;&#x2F;raphaelhertzog.com&#x2F;2012&#x2F;08&#x2F;08&#x2F;how-to-use-quilt-to-manage-patches-in-debian-packages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;and&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;UsingQuilt&quot;&gt;https:&#x2F;&#x2F;wiki.debian.org&#x2F;UsingQuilt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;edit-patch&lt;&#x2F;code&gt; is easier to use, but if you feel like playing with &lt;code&gt;quilt&lt;&#x2F;code&gt; it&#x27;ll only take 5 minutes to get acquainted. So, basically the procedure consists in:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;ensure to have &lt;code&gt;deb-src&lt;&#x2F;code&gt; packages activated in your &lt;code&gt;sources.list&lt;&#x2F;code&gt;, then run &lt;code&gt;apt update&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;create a patch containing all the changes that you want applied to the package (e.g. &lt;code&gt;git diff &amp;gt; patch.diff&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;create a work directory somewhere and &lt;code&gt;cd&lt;&#x2F;code&gt; into it&lt;&#x2F;li&gt;
&lt;li&gt;get the sources for the package you want to update: &lt;code&gt;pull-lp-sources &amp;lt;ubuntu_release&amp;gt; &amp;lt;package_name&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;descent into the source directory and either use &lt;code&gt;edit-patch&lt;&#x2F;code&gt; or &lt;code&gt;quilt&lt;&#x2F;code&gt; to create and apply the patch you create before&lt;&#x2F;li&gt;
&lt;li&gt;sign-off the patch and fill up some paperwork (changelog and other stuff)&lt;&#x2F;li&gt;
&lt;li&gt;locally build the package, install it and test if it works&lt;&#x2F;li&gt;
&lt;li&gt;submit your patch (a .debdiff file) on Launchpad, attaching it to a bug. Await comments from the maintainers.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For any question or doubt, support is available on irc.freenode.net on &lt;code&gt;#ubuntu-motu&lt;&#x2F;code&gt; or &lt;code&gt;ubuntu-motu@lists.ubuntu.com&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Enabling any website as a Firefox custom search engine</title>
        <published>2018-07-12T00:00:00+00:00</published>
        <updated>2018-07-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/firefox-custom-search/" type="text/html"/>
        <id>https://apiraino.github.io/firefox-custom-search/</id>
        <content type="html">&lt;p&gt;I am an avid user of the Firefox &lt;a href=&quot;https:&#x2F;&#x2F;support.mozilla.org&#x2F;en-US&#x2F;kb&#x2F;use-search-bar-firefox&quot;&gt;Custom Search Engine&lt;&#x2F;a&gt; feature, so I&#x27;d like to add any site I use frequently that allows a search through a &lt;code&gt;GET&lt;&#x2F;code&gt; request, example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;curl&quot; class=&quot;language-curl &quot;&gt;&lt;code class=&quot;language-curl&quot; data-lang=&quot;curl&quot;&gt;https:&amp;#x2F;&amp;#x2F;www.thewebsite.com&amp;#x2F;search?keyword=%s
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Mozilla documentation details how to add new search custom engines. Basically we have two options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;From the Firefox search widget, when a plus &lt;code&gt;+&lt;&#x2F;code&gt; icon appears as you land on your website&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;ff_cse.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;For websites not supporting the custom search engine feature (more on that later), you can bookmark the search URL provided by the website. Example:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;bing_cse_lol.png&quot;&gt;
    &lt;figcaption&gt;Bing being good at ignoring OpenSearch support&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;The procedure is explained, for example, &lt;a href=&quot;https:&#x2F;&#x2F;www-archive.mozilla.org&#x2F;docs&#x2F;end-user&#x2F;keywords.html&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;kb.mozillazine.org&#x2F;Using_keyword_searches&quot;&gt;here&lt;&#x2F;a&gt;: you basically bookmark the search page and assign it a keyword:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;bing_cse_bookmark.png&quot;&gt;
    &lt;figcaption&gt;Add a bookmark with quick keyword access&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;From now on you can perform in the URL bar searches writing the custom search engine keyword and the search terms, example: &amp;quot;&amp;lt;keyword&amp;gt; funny cats&amp;quot;, example &amp;quot;bing funny cats&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;This is ok-ish, it works; if you have many sites to bookmark for fast access, it kind of clutters my bookmarks and ... it just doesn&#x27;t &lt;em&gt;feel right&lt;&#x2F;em&gt;. I wanted to dig this thing to the core and understand what makes a website have that &lt;code&gt;+&lt;&#x2F;code&gt; icon appear on Firefox.&lt;&#x2F;p&gt;
&lt;p&gt;Enter the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dewitt&#x2F;opensearch&#x2F;blob&#x2F;master&#x2F;opensearch-1-1-draft-6.md#version&quot;&gt;OpenSearch Description&lt;&#x2F;a&gt; specification!&lt;&#x2F;p&gt;
&lt;p&gt;Well, turns out that (of course) I just didn&#x27;t discover anything special.&lt;&#x2F;p&gt;
&lt;p&gt;Firefox will show your site as a potential custom search engine if the page you&#x27;re visiting contains in the &lt;code&gt;&amp;lt;HEAD&amp;gt;&lt;&#x2F;code&gt; tag a reference to a properly crafted XML file, describing how to access the search function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&amp;lt;link rel=&amp;quot;search&amp;quot; type=&amp;quot;application&amp;#x2F;opensearchdescription+xml&amp;quot; href=&amp;quot;&amp;#x2F;osd.xml&amp;quot; title=&amp;quot;MyWebsite search!&amp;quot;&amp;#x2F;&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The XML file specification is long but the bare minimum to make it work could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;OpenSearchDescription xmlns=&amp;quot;http:&amp;#x2F;&amp;#x2F;a9.com&amp;#x2F;-&amp;#x2F;spec&amp;#x2F;opensearch&amp;#x2F;1.1&amp;#x2F;&amp;quot;&amp;gt;
    &amp;lt;ShortName&amp;gt;MyWebsite search&amp;lt;&amp;#x2F;ShortName&amp;gt;
    &amp;lt;Url type=&amp;quot;text&amp;#x2F;html&amp;quot; template=&amp;quot;https:&amp;#x2F;&amp;#x2F;www.thewebsite.com&amp;#x2F;search?keyword={searchTerms}&amp;quot;&amp;#x2F;&amp;gt;
    &amp;lt;Url type=&amp;quot;application&amp;#x2F;opensearchdescription+xml&amp;quot; rel=&amp;quot;self&amp;quot; template=&amp;quot;&amp;#x2F;mywebsite_osd.xml&amp;quot;&amp;#x2F;&amp;gt;
    &amp;lt;InputEncoding&amp;gt;UTF-8&amp;lt;&amp;#x2F;InputEncoding&amp;gt;
    &amp;lt;OutputEncoding&amp;gt;UTF-8&amp;lt;&amp;#x2F;OutputEncoding&amp;gt;
&amp;lt;&amp;#x2F;OpenSearchDescription&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the custom search engine is now enabled for your site.&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;roll_your_own_cse.png&quot;&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Finally, these two files cannot be simply accessed from the filesystem, it must be an HTTP request. So, if you want your favorite site to support this feature, send them an email (I did) and see how they ignore your request! XD&lt;&#x2F;p&gt;
&lt;p&gt;Second option is to host these two files somehere, just anywhere: Firefox won&#x27;t check if the search URL you provide comes from the same hosting of your files. This means that &lt;code&gt;localhost:80&lt;&#x2F;code&gt; can add a custom search engine for &lt;code&gt;https:&#x2F;&#x2F;www.thewebsite.com&#x2F;search?keyword={searchTerms}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Not the safest thing if you ask me: this could be used for some subtle phishing, if you don&#x27;t pay close attention to the URL that pops up (or find a way to disable the popup via CSS).&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t have any hosting available, you can use one of the many ways to serve a simple HTML.&lt;&#x2F;p&gt;
&lt;p&gt;Repeat for every site you want to map in custom searches, the final result for me
looks like this:&lt;&#x2F;p&gt;
&lt;figure&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;ff_cse_shortcuts.png&quot;&gt;
&lt;&#x2F;figure&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>BASH oneliners</title>
        <published>2018-05-22T00:00:00+00:00</published>
        <updated>2018-05-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/bash-workflow/" type="text/html"/>
        <id>https://apiraino.github.io/bash-workflow/</id>
        <content type="html">&lt;ol&gt;
&lt;li&gt;need to do a simple scripting job&lt;&#x2F;li&gt;
&lt;li&gt;always start saying: &amp;quot;_Ok, let&#x27;s crack this with a simple bash oneliner, I&#x27;m too lazy to do that in $&lt;em&gt;other_language&lt;&#x2F;em&gt;&amp;quot; ...&lt;&#x2F;li&gt;
&lt;li&gt;... end up with &amp;quot;&lt;em&gt;I&#x27;ll never write a bash script again&lt;&#x2F;em&gt;&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;goto 1&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>How the EMACS manual explains a local variable</title>
        <published>2018-05-22T00:00:00+00:00</published>
        <updated>2018-05-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://apiraino.github.io/emacs-manual/" type="text/html"/>
        <id>https://apiraino.github.io/emacs-manual/</id>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;let is used to attach or bind a symbol to a value in such a way that the Lisp interpreter will not confuse the variable with a variable of the same name that is not part of the function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To understand why the let special form is necessary, consider the situation in which you own a home that you generally refer to as “the house”, as in the sentence, “The house needs painting.” If you are visiting a friend and your host refers to “the house”, he is likely to be referring to his house, not yours, that is, to a different house.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If your friend is referring to his house and you think he is referring to your house, you may be in for some confusion. The same thing could happen in Lisp if a variable that is used inside of one function has the same name as a variable that is used inside of another function, and the two are not intended to refer to the same value. The let special form prevents this kind of confusion.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;emacs&#x2F;manual&#x2F;html_node&#x2F;eintr&#x2F;let.html&quot;&gt;link to the manual&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
